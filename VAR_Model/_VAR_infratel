{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" VAR_infratel","provenance":[{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554395851},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1rcH_BhhjhbI25ABoH8TJtrpyOXLrVbPT","authorship_tag":"ABX9TyOZlx8POqd2h2AXWKh6LUCI"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554681755,"user_tz":-330,"elapsed":3866,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d6684e2e-13d6-4f11-89b1-6bfd40c84aa3"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610554685317,"user_tz":-330,"elapsed":2667,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a4aca16d-2f2d-4864-d7b5-ed39f41a9fe1"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_INFRATEL.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_infratel.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>2.39</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.04</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.11</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>-1.70</td>\n","      <td>0.93</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.02</td>\n","      <td>0.61</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.85</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.00\n","2018-01-02    2.39           0.00\n","2018-01-03   -0.04           0.74\n","2018-01-04    0.11           0.00\n","2018-01-05   -1.70           0.93\n","...            ...            ...\n","2019-12-27   -0.02           0.61\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30    0.85           0.00\n","2019-12-31    0.00           0.00\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610554748344,"user_tz":-330,"elapsed":62186,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e2d270a5-0dcb-4a8f-dfc7-b8685ae3ab85"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610554766677,"user_tz":-330,"elapsed":3203,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5e3f70eb-ca13-4d8a-f31b-a1ad6ca008ba"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.41</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.5592</td>\n","      <td>1.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000             0.41\n","negative tone_y    0.5592             1.00"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"gaNZFZYmb-DQ","executionInfo":{"status":"ok","timestamp":1610972394258,"user_tz":-330,"elapsed":1526,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as : Both negative tone do not causes return and return do not causes negative tone significantly.\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554774217,"user_tz":-330,"elapsed":1642,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"67e91fb7-a450-4757-f17b-36bdde43bae3"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554780123,"user_tz":-330,"elapsed":1771,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"630b1f2e-3b68-4b83-8df0-25578bf8ac5c"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -7.8494\n"," No. Lags Chosen       = 12\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -4.8012\n"," No. Lags Chosen       = 18\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0001. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554782612,"user_tz":-330,"elapsed":1158,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"06ca74df-7240-4a42-c615-3ab3ab80e8ae"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.8255018207490985\n","BIC :  0.8635795919864351\n","FPE :  2.2830263661853323\n","HQIC:  0.8402000335444457 \n","\n","Lag Order = 2\n","AIC :  0.8340730221057784\n","BIC :  0.8976047715826848\n","FPE :  2.302679550531514\n","HQIC:  0.8585981781098303 \n","\n","Lag Order = 3\n","AIC :  0.833448967589114\n","BIC :  0.9224899633781993\n","FPE :  2.301244797739196\n","HQIC:  0.867823670861695 \n","\n","Lag Order = 4\n","AIC :  0.842353759689595\n","BIC :  0.9569594682278132\n","FPE :  2.321831641848193\n","HQIC:  0.8866006973137941 \n","\n","Lag Order = 5\n","AIC :  0.852213035389924\n","BIC :  0.992439122463825\n","FPE :  2.344841550581008\n","HQIC:  0.9063549778890322 \n","\n","Lag Order = 6\n","AIC :  0.8339726853430507\n","BIC :  0.9998750170802755\n","FPE :  2.3024657964140993\n","HQIC:  0.8980324871001519 \n","\n","Lag Order = 7\n","AIC :  0.8272962612083038\n","BIC :  1.0189309050753699\n","FPE :  2.287154626818989\n","HQIC:  0.9012968608885409 \n","\n","Lag Order = 8\n","AIC :  0.8382872010958388\n","BIC :  1.0557104269022672\n","FPE :  2.312444357258316\n","HQIC:  0.9222516220713742 \n","\n","Lag Order = 9\n","AIC :  0.8423376388487006\n","BIC :  1.08560591975753\n","FPE :  2.321846500407571\n","HQIC:  0.9362889896263936 \n","\n","Lag Order = 10\n","AIC :  0.8475215338459964\n","BIC :  1.1166915473907375\n","FPE :  2.333934845582167\n","HQIC:  0.9514830084978171 \n","\n","Lag Order = 11\n","AIC :  0.8584030639735445\n","BIC :  1.1535316930816215\n","FPE :  2.3594960007488748\n","HQIC:  0.9723979425697463 \n","\n","Lag Order = 12\n","AIC :  0.8681632403494653\n","BIC :  1.1893075743721968\n","FPE :  2.382668900742618\n","HQIC:  0.992214889394537 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23   -0.94           1.55\n","2019-12-24    0.08           1.52\n","2019-12-25    0.00           0.00\n","2019-12-26   -1.64           1.53\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610554786243,"user_tz":-330,"elapsed":1688,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9fc713cb-1cae-462f-9917-f64ec7b1692a"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.8457</td>  <td>    0.8585*</td> <td>     2.330</td>  <td>    0.8507*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.8423</td>  <td>    0.8809</td>  <td>     2.322</td>  <td>    0.8572</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.8511</td>  <td>    0.9153</td>  <td>     2.342</td>  <td>    0.8759</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.8484</td>  <td>    0.9384</td>  <td>     2.336</td>  <td>    0.8832</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.8552</td>  <td>    0.9708</td>  <td>     2.352</td>  <td>    0.8998</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.8636</td>  <td>     1.005</td>  <td>     2.372</td>  <td>    0.9181</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.8427</td>  <td>     1.010</td>  <td>     2.323</td>  <td>    0.9072</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.8345*</td> <td>     1.027</td>  <td>     2.304*</td> <td>    0.9090</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.8431</td>  <td>     1.061</td>  <td>     2.324</td>  <td>    0.9274</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.8457</td>  <td>     1.090</td>  <td>     2.330</td>  <td>    0.9400</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.8501</td>  <td>     1.120</td>  <td>     2.340</td>  <td>    0.9543</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.8592</td>  <td>     1.155</td>  <td>     2.361</td>  <td>    0.9733</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.8682</td>  <td>     1.189</td>  <td>     2.383</td>  <td>    0.9922</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610554796462,"user_tz":-330,"elapsed":1660,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"fc35aa58-eedb-450b-89bb-ba4757d5860e"},"source":["model_fitted = model.fit(7)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Wed, 13, Jan, 2021\n","Time:                     16:19:53\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                    1.01893\n","Nobs:                     716.000    HQIC:                  0.901297\n","Log likelihood:          -2298.09    FPE:                    2.28715\n","AIC:                     0.827296    Det(Omega_mle):         2.19425\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                   -0.021574         0.125026           -0.173           0.863\n","L1.return               -0.004694         0.037633           -0.125           0.901\n","L1.negative tone         0.066184         0.086608            0.764           0.445\n","L2.return               -0.016503         0.037504           -0.440           0.660\n","L2.negative tone        -0.055523         0.086223           -0.644           0.520\n","L3.return               -0.120344         0.037459           -3.213           0.001\n","L3.negative tone        -0.077200         0.086255           -0.895           0.371\n","L4.return               -0.054175         0.037713           -1.437           0.151\n","L4.negative tone         0.040245         0.086257            0.467           0.641\n","L5.return               -0.040886         0.037487           -1.091           0.275\n","L5.negative tone         0.060282         0.086290            0.699           0.485\n","L6.return               -0.081896         0.037464           -2.186           0.029\n","L6.negative tone        -0.091472         0.086336           -1.059           0.289\n","L7.return               -0.085697         0.037565           -2.281           0.023\n","L7.negative tone         0.081986         0.086821            0.944           0.345\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.348562         0.054299            6.419           0.000\n","L1.return               -0.008696         0.016344           -0.532           0.595\n","L1.negative tone         0.099024         0.037614            2.633           0.008\n","L2.return                0.009588         0.016288            0.589           0.556\n","L2.negative tone         0.029345         0.037447            0.784           0.433\n","L3.return               -0.019343         0.016269           -1.189           0.234\n","L3.negative tone        -0.013133         0.037461           -0.351           0.726\n","L4.return               -0.004167         0.016379           -0.254           0.799\n","L4.negative tone         0.039468         0.037462            1.054           0.292\n","L5.return                0.000300         0.016281            0.018           0.985\n","L5.negative tone        -0.044093         0.037476           -1.177           0.239\n","L6.return                0.004602         0.016271            0.283           0.777\n","L6.negative tone         0.141895         0.037496            3.784           0.000\n","L7.return               -0.007886         0.016314           -0.483           0.629\n","L7.negative tone         0.104079         0.037707            2.760           0.006\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.029538\n","negative tone   -0.029538       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554798723,"user_tz":-330,"elapsed":1572,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"84958e73-0ff6-4ad6-858b-cbfd1b02dfa6"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 1.99\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554800918,"user_tz":-330,"elapsed":1576,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"306cc70c-d4d5-4e82-c9c4-0718d3842ecc"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["7\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[ 0.2 ,  0.  ],\n","       [ 0.  ,  1.01],\n","       [ 0.  ,  0.  ],\n","       [-0.94,  1.55],\n","       [ 0.08,  1.52],\n","       [ 0.  ,  0.  ],\n","       [-1.64,  1.53]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610554803417,"user_tz":-330,"elapsed":1350,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a11ae62f-7bc9-4305-a335-96d9db129c47"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.035808</td>\n","      <td>0.699651</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.238529</td>\n","      <td>0.543481</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.077827</td>\n","      <td>0.580737</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.145147</td>\n","      <td>0.867136</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.238090</td>\n","      <td>0.556581</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.035808       0.699651\n","2019-12-28  0.238529       0.543481\n","2019-12-29  0.077827       0.580737\n","2019-12-30  0.145147       0.867136\n","2019-12-31  0.238090       0.556581"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610554805465,"user_tz":-330,"elapsed":1050,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a15577bb-0e54-4a47-b814-786fdb7cf7c9"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.0332\n","mae :  0.255\n","mpe :  inf\n","rmse :  0.3512\n","corr :  0.0783\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.5275\n","mae :  0.5275\n","mpe :  inf\n","rmse :  0.5835\n","corr :  0.2054\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}