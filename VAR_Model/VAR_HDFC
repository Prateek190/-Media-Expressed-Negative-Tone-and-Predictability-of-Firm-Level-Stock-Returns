{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_HDFC","provenance":[{"file_id":"1GyTEhpqznBiD-raPPyZLWOwlOKPxUtCO","timestamp":1609623541370},{"file_id":"1pUiM9tW9TFJRP1OYgN70yjgjOqrHZXni","timestamp":1609621491864},{"file_id":"1Jrk01wRDu2zRJjdoaEhwD3uix_8qhLrA","timestamp":1609620869825},{"file_id":"1Ph7hHF7qdnMhnykYIFGrqCRof9ROi1tw","timestamp":1609620694974},{"file_id":"1_oyB9Egec5xpaQlpCBmPMYFTPeHcvTsr","timestamp":1609620348596},{"file_id":"1JyhHyr6VXUT9WRJpq47RknOPQCZ3MuV6","timestamp":1609619744263},{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609619203614},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1PKkIYs23-TxkNowfhKZ6hDI3v4JtnWMY","authorship_tag":"ABX9TyMcSgG1b1LoFVYEPhKVDALF"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623690024,"user_tz":-330,"elapsed":2088,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"3ab074ba-a160-4ec8-e62a-3a74ee1e50d3"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609623694181,"user_tz":-330,"elapsed":3265,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"82180316-30d8-49fa-9d83-95204c2f7f38"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_HDFC.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_hdfc.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>1.58</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>1.16</td>\n","      <td>1.28</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.14</td>\n","      <td>1.54</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.14</td>\n","      <td>0.94</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>1.29</td>\n","      <td>1.19</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>2.31</td>\n","      <td>1.18</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.36</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.92</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.62</td>\n","      <td>1.44</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.91</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           1.58\n","2018-01-02    1.16           1.28\n","2018-01-03   -0.14           1.54\n","2018-01-04    0.14           0.94\n","2018-01-05    1.29           1.19\n","...            ...            ...\n","2019-12-27    2.31           1.18\n","2019-12-28    0.00           0.36\n","2019-12-29    0.00           0.92\n","2019-12-30    0.62           1.44\n","2019-12-31    0.00           0.91\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609623754140,"user_tz":-330,"elapsed":59071,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"714cd055-24a7-4910-867a-0cb4b1475bcd"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609623790692,"user_tz":-330,"elapsed":1820,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"19f79be4-3c3d-4d07-e94c-cd7eac08d237"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.0052</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0367</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.0052\n","negative tone_y    0.0367           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vmAuQ_5Qzpdn"},"source":["# Results from Granger Casuality test can be read as : negative tone causes return(1% significance) and return  causes negative tone (5% significance).\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623961064,"user_tz":-330,"elapsed":1633,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"981ca979-7d88-4aae-d352-df749862ff9a"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623965690,"user_tz":-330,"elapsed":891,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6bd77568-8b15-459d-ed79-12ca0701934d"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -13.6367\n"," No. Lags Chosen       = 4\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -6.6488\n"," No. Lags Chosen       = 6\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623969701,"user_tz":-330,"elapsed":1682,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"de786cab-cb38-4952-ba8b-11965b7ae54f"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  -0.5476037570218572\n","BIC :  -0.5095259857845206\n","FPE :  0.5783340353724352\n","HQIC:  -0.5329055442265099 \n","\n","Lag Order = 2\n","AIC :  -0.5522238105222618\n","BIC :  -0.4886920610453554\n","FPE :  0.575668464861818\n","HQIC:  -0.5276986545182099 \n","\n","Lag Order = 3\n","AIC :  -0.5607589587920973\n","BIC :  -0.47171796300301194\n","FPE :  0.5707764035797339\n","HQIC:  -0.5263842555195163 \n","\n","Lag Order = 4\n","AIC :  -0.5695835146546652\n","BIC :  -0.454977806116447\n","FPE :  0.5657625004450354\n","HQIC:  -0.5253365770304661 \n","\n","Lag Order = 5\n","AIC :  -0.5700541308875346\n","BIC :  -0.4298280438136336\n","FPE :  0.5654975387883266\n","HQIC:  -0.5159121883884265 \n","\n","Lag Order = 6\n","AIC :  -0.5749358783650249\n","BIC :  -0.4090335466278001\n","FPE :  0.5627454246059597\n","HQIC:  -0.5108760766079237 \n","\n","Lag Order = 7\n","AIC :  -0.5759724833657637\n","BIC :  -0.3843378394986975\n","FPE :  0.5621648073212507\n","HQIC:  -0.5019718836855266 \n","\n","Lag Order = 8\n","AIC :  -0.5743442724108953\n","BIC :  -0.3569210466044669\n","FPE :  0.5630840653984792\n","HQIC:  -0.4903798514353598 \n","\n","Lag Order = 9\n","AIC :  -0.5650812601230278\n","BIC :  -0.3218129792141984\n","FPE :  0.5683282487178705\n","HQIC:  -0.47112990934533483 \n","\n","Lag Order = 10\n","AIC :  -0.5596769821815955\n","BIC :  -0.2905069686368543\n","FPE :  0.5714130802308063\n","HQIC:  -0.45571550752977474 \n","\n","Lag Order = 11\n","AIC :  -0.5527211956481408\n","BIC :  -0.2575925665400637\n","FPE :  0.5754078286400252\n","HQIC:  -0.438726317051939 \n","\n","Lag Order = 12\n","AIC :  -0.5498876708017194\n","BIC :  -0.228743336778988\n","FPE :  0.5770480935626544\n","HQIC:  -0.4258360217566478 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23   -0.14           1.11\n","2019-12-24    1.55           1.36\n","2019-12-25    0.00           0.69\n","2019-12-26    0.88           1.14\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609623971979,"user_tz":-330,"elapsed":1095,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a1e8010e-126b-4b26-968a-1bed1d11bb30"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>   -0.5286</td>  <td>   -0.5157*</td> <td>    0.5895</td>  <td>   -0.5236*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>   -0.5273</td>  <td>   -0.4888</td>  <td>    0.5902</td>  <td>   -0.5124</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>   -0.5342</td>  <td>   -0.4700</td>  <td>    0.5861</td>  <td>   -0.5094</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>   -0.5451</td>  <td>   -0.4552</td>  <td>    0.5798</td>  <td>   -0.5104</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>   -0.5561</td>  <td>   -0.4405</td>  <td>    0.5734</td>  <td>   -0.5114</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>   -0.5575</td>  <td>   -0.4162</td>  <td>    0.5727</td>  <td>   -0.5029</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>   -0.5631</td>  <td>   -0.3961</td>  <td>    0.5695</td>  <td>   -0.4986</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>   -0.5666</td>  <td>   -0.3739</td>  <td>    0.5674</td>  <td>   -0.4922</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>   -0.5672*</td> <td>   -0.3488</td>  <td>    0.5671*</td> <td>   -0.4828</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>   -0.5591</td>  <td>   -0.3151</td>  <td>    0.5717</td>  <td>   -0.4648</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>   -0.5565</td>  <td>   -0.2867</td>  <td>    0.5732</td>  <td>   -0.4523</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>   -0.5519</td>  <td>   -0.2564</td>  <td>    0.5759</td>  <td>   -0.4378</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>   -0.5499</td>  <td>   -0.2287</td>  <td>    0.5770</td>  <td>   -0.4258</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609624085976,"user_tz":-330,"elapsed":1659,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6fa09934-d48c-44cc-8691-4cfd711a0714"},"source":["model_fitted = model.fit(7)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     21:48:05\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                  -0.384338\n","Nobs:                     716.000    HQIC:                 -0.501972\n","Log likelihood:          -1795.72    FPE:                   0.562165\n","AIC:                    -0.575972    Det(Omega_mle):        0.539330\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.793771         0.229624            3.457           0.001\n","L1.return               -0.069645         0.037650           -1.850           0.064\n","L1.negative tone        -0.006113         0.075477           -0.081           0.935\n","L2.return                0.009909         0.037731            0.263           0.793\n","L2.negative tone        -0.032916         0.075017           -0.439           0.661\n","L3.return                0.011381         0.037600            0.303           0.762\n","L3.negative tone        -0.225622         0.075143           -3.003           0.003\n","L4.return               -0.110295         0.037373           -2.951           0.003\n","L4.negative tone         0.025357         0.075449            0.336           0.737\n","L5.return               -0.082945         0.037422           -2.216           0.027\n","L5.negative tone        -0.060656         0.075851           -0.800           0.424\n","L6.return               -0.006300         0.037523           -0.168           0.867\n","L6.negative tone        -0.146498         0.075748           -1.934           0.053\n","L7.return               -0.074670         0.037472           -1.993           0.046\n","L7.negative tone        -0.084511         0.076097           -1.111           0.267\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.764379         0.114478            6.677           0.000\n","L1.return               -0.028323         0.018770           -1.509           0.131\n","L1.negative tone        -0.048862         0.037629           -1.299           0.194\n","L2.return               -0.011306         0.018810           -0.601           0.548\n","L2.negative tone         0.087690         0.037399            2.345           0.019\n","L3.return               -0.008308         0.018746           -0.443           0.658\n","L3.negative tone         0.063692         0.037462            1.700           0.089\n","L4.return               -0.009483         0.018632           -0.509           0.611\n","L4.negative tone         0.084693         0.037615            2.252           0.024\n","L5.return                0.001222         0.018656            0.065           0.948\n","L5.negative tone         0.065397         0.037816            1.729           0.084\n","L6.return               -0.017381         0.018707           -0.929           0.353\n","L6.negative tone         0.107314         0.037764            2.842           0.004\n","L7.return               -0.017033         0.018681           -0.912           0.362\n","L7.negative tone         0.078064         0.037938            2.058           0.040\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.018702\n","negative tone   -0.018702       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609624090982,"user_tz":-330,"elapsed":1552,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"97d74cd8-724d-4c37-9900-c4694dd43cbb"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609624094200,"user_tz":-330,"elapsed":1431,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c20c1c66-db26-4f18-b045-7fda082d6f34"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #7\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["7\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[ 1.15,  1.63],\n","       [ 0.  ,  0.78],\n","       [ 0.  ,  0.  ],\n","       [-0.14,  1.11],\n","       [ 1.55,  1.36],\n","       [ 0.  ,  0.69],\n","       [ 0.88,  1.14]])"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609624109888,"user_tz":-330,"elapsed":1724,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a461fe71-ee59-48fd-9005-4c0409b719ec"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.119291</td>\n","      <td>1.104701</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.336119</td>\n","      <td>1.074780</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.126126</td>\n","      <td>1.133988</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.095758</td>\n","      <td>1.206586</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.045938</td>\n","      <td>1.188257</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.119291       1.104701\n","2019-12-28  0.336119       1.074780\n","2019-12-29  0.126126       1.133988\n","2019-12-30  0.095758       1.206586\n","2019-12-31  0.045938       1.188257"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609624114015,"user_tz":-330,"elapsed":1978,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"74bfd3df-2607-4373-d101-49edc6df7b53"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.4414\n","mae :  0.6446\n","mpe :  inf\n","rmse :  1.0203\n","corr :  -0.1991\n","\n","Forecast Accuracy of: negative tone\n","mape :  0.55\n","me :  0.1797\n","mae :  0.3031\n","mpe :  0.4596\n","rmse :  0.3726\n","corr :  0.688\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}