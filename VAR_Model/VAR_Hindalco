{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_Hindalco","provenance":[{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610553402597},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1gg1EKJhssj2ehhrInHj8dX4IN41eDFO_","authorship_tag":"ABX9TyMljd3AB/3uQG8fIPKdIgqU"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553556395,"user_tz":-330,"elapsed":3044,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"06843c4f-989e-49dc-b268-211dff0c6fa2"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610553575768,"user_tz":-330,"elapsed":2846,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"28cdaac3-6e07-404d-a4b6-04d1577565f4"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_HINDALCO.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_hindalco.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>0.28</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>1.69</td>\n","      <td>0.27</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>1.19</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>-1.22</td>\n","      <td>1.35</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>3.41</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.02</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.69</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.00\n","2018-01-02    0.28           0.00\n","2018-01-03    1.69           0.27\n","2018-01-04    1.19           0.00\n","2018-01-05   -1.22           1.35\n","...            ...            ...\n","2019-12-27    3.41           0.00\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30   -0.02           0.00\n","2019-12-31    0.00           0.69\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610553636442,"user_tz":-330,"elapsed":55214,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a906699b-41e9-4a06-e128-dd1031614faa"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610553691264,"user_tz":-330,"elapsed":1737,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"fda0a0ca-8e19-4f96-e615-a53d36995147"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.6052</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.1766</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.6052\n","negative tone_y    0.1766           1.0000"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"gaNZFZYmb-DQ","executionInfo":{"status":"ok","timestamp":1610974175447,"user_tz":-330,"elapsed":2252,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as : Both negative tone do not causes return and return do not causes negative tone significantly.\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553707467,"user_tz":-330,"elapsed":1494,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4a7c8ca3-1ac8-4a7b-d16c-c704fecc0419"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553712363,"user_tz":-330,"elapsed":1187,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"89dcba65-9f3e-4364-df3f-02f321737eda"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -13.2433\n"," No. Lags Chosen       = 4\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -7.7999\n"," No. Lags Chosen       = 6\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553714985,"user_tz":-330,"elapsed":1539,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"dbb57e2f-a863-4607-9bed-ef10e9612094"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.754306879182575\n","BIC :  0.7923846504199116\n","FPE :  2.1261375458387475\n","HQIC:  0.7690050919779222 \n","\n","Lag Order = 2\n","AIC :  0.7643178674624714\n","BIC :  0.8278496169393779\n","FPE :  2.147529930505084\n","HQIC:  0.7888430234665234 \n","\n","Lag Order = 3\n","AIC :  0.7577659326233764\n","BIC :  0.8468069284124617\n","FPE :  2.13350711379855\n","HQIC:  0.7921406358959574 \n","\n","Lag Order = 4\n","AIC :  0.769541816830036\n","BIC :  0.8841475253682541\n","FPE :  2.158782557746066\n","HQIC:  0.813788754454235 \n","\n","Lag Order = 5\n","AIC :  0.7642053369604729\n","BIC :  0.9044314240343739\n","FPE :  2.1472976232544525\n","HQIC:  0.8183472794595811 \n","\n","Lag Order = 6\n","AIC :  0.7671908955118494\n","BIC :  0.9330932272490742\n","FPE :  2.1537248774457733\n","HQIC:  0.8312506972689506 \n","\n","Lag Order = 7\n","AIC :  0.7694829657396628\n","BIC :  0.961117609606729\n","FPE :  2.1586763404102047\n","HQIC:  0.8434835654198999 \n","\n","Lag Order = 8\n","AIC :  0.7807601182756188\n","BIC :  0.9981833440820471\n","FPE :  2.183170210781146\n","HQIC:  0.8647245392511542 \n","\n","Lag Order = 9\n","AIC :  0.7911406442898273\n","BIC :  1.0344089251986568\n","FPE :  2.2059665993644186\n","HQIC:  0.8850919950675203 \n","\n","Lag Order = 10\n","AIC :  0.7995363958156144\n","BIC :  1.0687064093603555\n","FPE :  2.224585219634149\n","HQIC:  0.9034978704674351 \n","\n","Lag Order = 11\n","AIC :  0.8125734133573362\n","BIC :  1.1077020424654134\n","FPE :  2.253801591349046\n","HQIC:  0.9265682919535381 \n","\n","Lag Order = 12\n","AIC :  0.8247049950150716\n","BIC :  1.145849329037803\n","FPE :  2.2813400257923564\n","HQIC:  0.9487566440601432 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    2.47           0.00\n","2019-12-24    3.38           1.08\n","2019-12-25    0.00           3.52\n","2019-12-26   -0.77           0.85\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610553717527,"user_tz":-330,"elapsed":1181,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"35e06ad5-b94a-4c80-bace-87fb44933ab6"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.7767</td>  <td>    0.7896*</td> <td>     2.174</td>  <td>    0.7817*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.7746*</td> <td>    0.8131</td>  <td>     2.170*</td> <td>    0.7895</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.7826</td>  <td>    0.8468</td>  <td>     2.187</td>  <td>    0.8074</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.7748</td>  <td>    0.8647</td>  <td>     2.170</td>  <td>    0.8095</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.7850</td>  <td>    0.9006</td>  <td>     2.192</td>  <td>    0.8297</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.7795</td>  <td>    0.9208</td>  <td>     2.180</td>  <td>    0.8341</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.7806</td>  <td>    0.9476</td>  <td>     2.183</td>  <td>    0.8451</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.7806</td>  <td>    0.9733</td>  <td>     2.183</td>  <td>    0.8550</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.7897</td>  <td>     1.008</td>  <td>     2.203</td>  <td>    0.8740</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.7987</td>  <td>     1.043</td>  <td>     2.223</td>  <td>    0.8930</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.8047</td>  <td>     1.074</td>  <td>     2.236</td>  <td>    0.9089</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.8152</td>  <td>     1.111</td>  <td>     2.260</td>  <td>    0.9293</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.8247</td>  <td>     1.146</td>  <td>     2.281</td>  <td>    0.9488</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610553725615,"user_tz":-330,"elapsed":1568,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"8d034bf4-3220-427f-99a1-63f5f4d818fb"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Wed, 13, Jan, 2021\n","Time:                     16:02:02\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.792385\n","Nobs:                     722.000    HQIC:                  0.769005\n","Log likelihood:          -2315.25    FPE:                    2.12614\n","AIC:                     0.754307    Det(Omega_mle):         2.10858\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                   -0.000606         0.077781           -0.008           0.994\n","L1.return               -0.044786         0.037389           -1.198           0.231\n","L1.negative tone        -0.041533         0.077399           -0.537           0.592\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.500239         0.037384           13.381           0.000\n","L1.return                0.017993         0.017970            1.001           0.317\n","L1.negative tone         0.104242         0.037200            2.802           0.005\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.081571\n","negative tone   -0.081571       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553727841,"user_tz":-330,"elapsed":1550,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"87c74c6a-1527-4865-a425-1756c38d6aed"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553730609,"user_tz":-330,"elapsed":1854,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"50c87c92-0bce-405e-cf2a-608563ea81b4"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-0.77,  0.85]])"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610553733042,"user_tz":-330,"elapsed":1651,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b7095d27-792e-48e6-d39d-81642a56fb18"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.001424</td>\n","      <td>0.574991</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.024423</td>\n","      <td>0.560152</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.022777</td>\n","      <td>0.558191</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.022769</td>\n","      <td>0.558016</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>-0.022762</td>\n","      <td>0.557998</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.001424       0.574991\n","2019-12-28 -0.024423       0.560152\n","2019-12-29 -0.022777       0.558191\n","2019-12-30 -0.022769       0.558016\n","2019-12-31 -0.022762       0.557998"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610553735476,"user_tz":-330,"elapsed":1298,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5eedfb43-bbed-40b1-9c26-edc5a839dc65"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.6968\n","mae :  0.6968\n","mpe :  -inf\n","rmse :  1.5257\n","corr :  0.9971\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.4239\n","mae :  0.4767\n","mpe :  inf\n","rmse :  0.5069\n","corr :  -0.2928\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}