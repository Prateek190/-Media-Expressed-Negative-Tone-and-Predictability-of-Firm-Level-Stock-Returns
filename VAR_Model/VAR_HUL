{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_HUL","provenance":[{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610553546675},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1ERUxLEIxQsi9HjF5wjiwscnVxMDlqpRK","authorship_tag":"ABX9TyPxu4HJst48TlcB4XTqds5M"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554082834,"user_tz":-330,"elapsed":2648,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c409c1a5-9c25-4ae3-bb33-1ad209f6db0a"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610554087270,"user_tz":-330,"elapsed":3676,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"7b95f777-fe45-4d9a-8370-4e631136addc"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_HINDUNILVR.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_hul.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.65</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.44</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>0.88</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.14</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.32</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.68</td>\n","      <td>0.57</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>1.60</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-1.67</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>1.17</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.65\n","2018-01-02   -0.44           0.00\n","2018-01-03    0.88           0.00\n","2018-01-04    0.14           0.00\n","2018-01-05    0.32           0.00\n","...            ...            ...\n","2019-12-27   -0.68           0.57\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           1.60\n","2019-12-30   -1.67           0.00\n","2019-12-31    0.00           1.17\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610554159027,"user_tz":-330,"elapsed":59718,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"33d214a3-0529-4d4b-dbd4-749d82d3e9ba"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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Afi97/nL+dKXdJiUDKIvuWT0d2lrwoUX6mPz29/q/0vMrryn6Etf0qmugdE5Y3PmAD/7WdregfSBwX336XftANrB+spXdL1FFE1MaDfl/e8HHv94/d3f/gb8+c/6XIgouuyymft31116cC9zir75Te3ezpoVvslJ3VeuHE2LumQJcOaZqVNk7iMAfPWrabu95prUKTr5ZOAXv9DnbdkyHWqYJO70+CaHHpr2Lccf719O5n2dcoo+B2bmPpPDDwdOOEF//va3gQsucDtFDz2k268pinwPNkQUnXaa/utqv2bfdPrpo/W+4grdjo46Cli0KC7cZ6jkmU9TBdJv53WKigxIyqTijhVFn/rU6PIxx64ph8O1zaLbNdfJ4xSVpawbUwX2ADpGFMWc4yZEUSiUXpL2mMvnrVdMWzDp+pyiULvtSRRCWVG0OYDpOBasVEp5bI8K+da39N9ddkkn+APhkBc7PfJxx+mT96Y36d/e9S79/ckna8EE6MnukuYXAP7939PPr3qV/vvoo3rQs8suevDyP/+jv//wh/XLHJ/61PC+POUp6aDSRjoOO0zQ5KKL0ob2xCem3998sx5cyaBp441HRdCpp+r/H3igrrvwylcC++wzuo299gI++EH9WSbE24L0JS/Rf5/61FRMXXutPjYmP/yh/itzXQC9/STRIV7SscgA3wwb+P7304G6yeSkHli72H134DWvSf9//vmjv5sdmTnAFPH22Mfquk5M+B09YYst0if/wpFHAh/9qP78T/8EPOtZWrCFRNbRR+tzt8EGOjzKHLBKhrbtt0/nluy8sz5n++6r/3/KKXo96bA//vF0/V//Ov38whdq8XPyyekAXM7P056WXk+nn67b89VXA1tvDbzxjfr/u+2m9+m979XXxo9/rI/Tb3+btsWf/nTm/ol7se22+vNll+mnbhMTwOc+p19Geuih/uOzcqVuC4K0lf/7f91C/8MfBu65J/3/S1+q/x5wgBYGImZPPFG376c8Re/j+98PfPGLwOtel55DQF9b118P3H33zJjp7bdPP8vDARHYe++t/yoF7L9/2od87GPpRNwbbtDCaO5c/fsrX6nb8LOepY/3c5+rz/d73qPb2sc+5k79LsdYxMwPfjBzGfNaOu+89Fr43Of0dnbYQR+jz342HBM/dJp2iuQ8dSl8zt5WaHv293YocNdEkUsY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\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610554209719,"user_tz":-330,"elapsed":2315,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6819ff4c-1690-49cc-8595-f7b2119d839f"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.000</td>\n","      <td>0.4534</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.046</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y            1.000           0.4534\n","negative tone_y     0.046           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj","executionInfo":{"status":"ok","timestamp":1610974349330,"user_tz":-330,"elapsed":2348,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as : negative tone causes return (5% significance) but return do not causes negative tone significantly.\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554215158,"user_tz":-330,"elapsed":1127,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9c1d1b08-f6ec-442e-a4e3-0e23ddea6bf9"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554219554,"user_tz":-330,"elapsed":1838,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9b1acd8c-d018-45e5-9a30-260c810c77c0"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -26.4106\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -8.5799\n"," No. Lags Chosen       = 6\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554221864,"user_tz":-330,"elapsed":1767,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"eeb8414b-989a-4fea-cc0a-89700f8003cb"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  -0.10379984548864352\n","BIC :  -0.06572207425130701\n","FPE :  0.9014057860053336\n","HQIC:  -0.0891016326932963 \n","\n","Lag Order = 2\n","AIC :  -0.09494175969685077\n","BIC :  -0.0314100102199444\n","FPE :  0.909426302576852\n","HQIC:  -0.07041660369279891 \n","\n","Lag Order = 3\n","AIC :  -0.09206769748482005\n","BIC :  -0.0030267016957347403\n","FPE :  0.9120445219832606\n","HQIC:  -0.05769299421223914 \n","\n","Lag Order = 4\n","AIC :  -0.09221563279529833\n","BIC :  0.02239007574291982\n","FPE :  0.9119108758772847\n","HQIC:  -0.04796869517109925 \n","\n","Lag Order = 5\n","AIC :  -0.0811882099988395\n","BIC :  0.05903787707506153\n","FPE :  0.9220245629636308\n","HQIC:  -0.027046267499731297 \n","\n","Lag Order = 6\n","AIC :  -0.07572548846881558\n","BIC :  0.09017684326840916\n","FPE :  0.9270780322704408\n","HQIC:  -0.011665686711714307 \n","\n","Lag Order = 7\n","AIC :  -0.0781343721668248\n","BIC :  0.11350027170024135\n","FPE :  0.9248514865713895\n","HQIC:  -0.004133772486587722 \n","\n","Lag Order = 8\n","AIC :  -0.06783597167438522\n","BIC :  0.1495872541320431\n","FPE :  0.9344304829862291\n","HQIC:  0.016128449301150177 \n","\n","Lag Order = 9\n","AIC :  -0.06083126430366294\n","BIC :  0.18243701660516648\n","FPE :  0.9410056560913455\n","HQIC:  0.03312008647403006 \n","\n","Lag Order = 10\n","AIC :  -0.05436228156575018\n","BIC :  0.21480773197899095\n","FPE :  0.9471212128784985\n","HQIC:  0.04959919308607055 \n","\n","Lag Order = 11\n","AIC :  -0.044302963124820544\n","BIC :  0.2508256659832566\n","FPE :  0.9567071048876422\n","HQIC:  0.06969191547138132 \n","\n","Lag Order = 12\n","AIC :  -0.04006288142869202\n","BIC :  0.2810814525940394\n","FPE :  0.9607847548226068\n","HQIC:  0.0839887676163796 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23   -0.15           0.00\n","2019-12-24   -0.06           0.31\n","2019-12-25    0.00           0.89\n","2019-12-26   -1.57           1.40\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610554230913,"user_tz":-330,"elapsed":1882,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b81447df-63d3-497c-beca-1f44259f0b54"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>   -0.1016*</td> <td>  -0.08875*</td> <td>    0.9034*</td> <td>  -0.09663*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>  -0.09692</td>  <td>  -0.05838</td>  <td>    0.9076</td>  <td>  -0.08203</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>  -0.08838</td>  <td>  -0.02415</td>  <td>    0.9154</td>  <td>  -0.06357</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>  -0.08597</td>  <td>  0.003952</td>  <td>    0.9176</td>  <td>  -0.05123</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>  -0.08822</td>  <td>   0.02739</td>  <td>    0.9156</td>  <td>  -0.04357</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>  -0.07865</td>  <td>   0.06265</td>  <td>    0.9244</td>  <td>  -0.02407</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>  -0.07475</td>  <td>   0.09224</td>  <td>    0.9280</td>  <td>  -0.01024</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>  -0.07889</td>  <td>    0.1138</td>  <td>    0.9242</td>  <td> -0.004456</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>  -0.06894</td>  <td>    0.1494</td>  <td>    0.9334</td>  <td>   0.01541</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>  -0.06332</td>  <td>    0.1808</td>  <td>    0.9387</td>  <td>   0.03096</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>  -0.05830</td>  <td>    0.2115</td>  <td>    0.9434</td>  <td>   0.04590</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>  -0.04968</td>  <td>    0.2458</td>  <td>    0.9516</td>  <td>   0.06445</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>  -0.04006</td>  <td>    0.2811</td>  <td>    0.9608</td>  <td>   0.08399</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610554261439,"user_tz":-330,"elapsed":1575,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"3c271676-5e6a-4e52-f474-363df4552d5e"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Wed, 13, Jan, 2021\n","Time:                     16:10:58\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                 -0.0657221\n","Nobs:                     722.000    HQIC:                -0.0891016\n","Log likelihood:          -2005.48    FPE:                   0.901406\n","AIC:                    -0.103800    Det(Omega_mle):        0.893961\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.075858         0.059001            1.286           0.199\n","L1.return                0.013147         0.037457            0.351           0.726\n","L1.negative tone        -0.014725         0.042110           -0.350           0.727\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.966323         0.052201           18.511           0.000\n","L1.return               -0.006680         0.033140           -0.202           0.840\n","L1.negative tone         0.085836         0.037257            2.304           0.021\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.074818\n","negative tone   -0.074818       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554263576,"user_tz":-330,"elapsed":979,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"bddf8405-e42a-4f2c-9e41-92c6ff2d376e"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.01\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554265954,"user_tz":-330,"elapsed":1677,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c26d8bcc-9da0-4755-87e8-c87f4309edc6"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-1.57,  1.4 ]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610554268470,"user_tz":-330,"elapsed":1799,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"f9f7a77c-353b-4ad9-f96a-275651540b6f"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.034604</td>\n","      <td>1.096981</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.060161</td>\n","      <td>1.060252</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.061037</td>\n","      <td>1.056929</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.061098</td>\n","      <td>1.056637</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.061103</td>\n","      <td>1.056612</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.034604       1.096981\n","2019-12-28  0.060161       1.060252\n","2019-12-29  0.061037       1.056929\n","2019-12-30  0.061098       1.056637\n","2019-12-31  0.061103       1.056612"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610554270879,"user_tz":-330,"elapsed":1325,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4ec10df4-1610-4af3-da4c-39697db139c4"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  0.5256\n","mae :  0.5256\n","mpe :  inf\n","rmse :  0.8389\n","corr :  0.1481\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.3975\n","mae :  0.6601\n","mpe :  inf\n","rmse :  0.7518\n","corr :  -0.1215\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}