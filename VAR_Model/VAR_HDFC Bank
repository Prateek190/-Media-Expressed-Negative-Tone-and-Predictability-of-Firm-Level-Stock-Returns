{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_HDFC Bank","provenance":[{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610552916397},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1os1uO4nRWS064sfeVsjx350-4FEB6z3c","authorship_tag":"ABX9TyOa3QRR5xD/72uiFW+2FlRO"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610552993406,"user_tz":-330,"elapsed":2632,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d27f95d2-0d3b-42b1-9c8b-8f2f8961f64b"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610553059371,"user_tz":-330,"elapsed":4870,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"84078e2e-87a8-4d54-96cf-db641e0f4f29"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_HDFCBANK.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_bank.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>2.21</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>0.96</td>\n","      <td>0.91</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-1.05</td>\n","      <td>1.88</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.39</td>\n","      <td>1.83</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.20</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>1.09</td>\n","      <td>1.27</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.36</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>1.32</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>1.67</td>\n","      <td>1.90</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.69</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           2.21\n","2018-01-02    0.96           0.91\n","2018-01-03   -1.05           1.88\n","2018-01-04    0.39           1.83\n","2018-01-05    0.20           0.00\n","...            ...            ...\n","2019-12-27    1.09           1.27\n","2019-12-28    0.00           0.36\n","2019-12-29    0.00           1.32\n","2019-12-30    1.67           1.90\n","2019-12-31    0.00           0.69\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610553122171,"user_tz":-330,"elapsed":60787,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"0fd45309-c2c6-4eed-a2c9-f099fac1c575"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610553167665,"user_tz":-330,"elapsed":1967,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"863704ca-40b9-4593-d965-37e35218a9e3"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.0877</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0752</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.0877\n","negative tone_y    0.0752           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj"},"source":["# Results from Granger Casuality test can be read as : Both negative tone causes return and return causes negative tone are significant at 10% significance.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553218629,"user_tz":-330,"elapsed":1968,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c2795bc0-976a-45cd-ad0f-cade00663092"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553227032,"user_tz":-330,"elapsed":1683,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e4dd424e-04a6-4ec1-e5ba-201e78624708"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -14.9598\n"," No. Lags Chosen       = 2\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -9.206\n"," No. Lags Chosen       = 7\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553229814,"user_tz":-330,"elapsed":1071,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"08c965a2-4761-4dda-bcb8-a0f5ce09209d"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  -0.47335393372276807\n","BIC :  -0.43527616248543155\n","FPE :  0.6229096230393922\n","HQIC:  -0.45865572092742085 \n","\n","Lag Order = 2\n","AIC :  -0.4727402801866867\n","BIC :  -0.4092085307097803\n","FPE :  0.6232922085922136\n","HQIC:  -0.4482151241826348 \n","\n","Lag Order = 3\n","AIC :  -0.47962239641223137\n","BIC :  -0.39058140062314606\n","FPE :  0.6190178492677256\n","HQIC:  -0.4452476931396504 \n","\n","Lag Order = 4\n","AIC :  -0.47112522286907765\n","BIC :  -0.3565195143308595\n","FPE :  0.6243010296830641\n","HQIC:  -0.4268782852448786 \n","\n","Lag Order = 5\n","AIC :  -0.4623748888340489\n","BIC :  -0.32214880176014793\n","FPE :  0.6297892158115272\n","HQIC:  -0.4082329463349408 \n","\n","Lag Order = 6\n","AIC :  -0.45495475419923537\n","BIC :  -0.28905242246201057\n","FPE :  0.6344817179991672\n","HQIC:  -0.39089495244213407 \n","\n","Lag Order = 7\n","AIC :  -0.45478682855848\n","BIC :  -0.2631521846914139\n","FPE :  0.6345910103349073\n","HQIC:  -0.380786228878243 \n","\n","Lag Order = 8\n","AIC :  -0.4557541520126123\n","BIC :  -0.238330926206184\n","FPE :  0.6339810435726302\n","HQIC:  -0.3717897310370769 \n","\n","Lag Order = 9\n","AIC :  -0.44806014630642593\n","BIC :  -0.20479186539759653\n","FPE :  0.6388823159273991\n","HQIC:  -0.354108795528733 \n","\n","Lag Order = 10\n","AIC :  -0.4376646054864505\n","BIC :  -0.16849459194170935\n","FPE :  0.6455642611042915\n","HQIC:  -0.33370313083462977 \n","\n","Lag Order = 11\n","AIC :  -0.4404187300160748\n","BIC :  -0.14529010090799765\n","FPE :  0.6437957530930833\n","HQIC:  -0.32642385141987296 \n","\n","Lag Order = 12\n","AIC :  -0.4280514278190921\n","BIC :  -0.10690709379636071\n","FPE :  0.6518157024914657\n","HQIC:  -0.3039997787740205 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    1.19           1.30\n","2019-12-24    0.02           0.90\n","2019-12-25    0.00           0.41\n","2019-12-26   -0.51           0.20\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610553232672,"user_tz":-330,"elapsed":1168,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e9bd17bd-9fc3-42ab-c8c5-4483ee35b4ca"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>   -0.4667</td>  <td>   -0.4538*</td> <td>    0.6271</td>  <td>   -0.4617*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>   -0.4610</td>  <td>   -0.4224</td>  <td>    0.6307</td>  <td>   -0.4461</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>   -0.4610</td>  <td>   -0.3968</td>  <td>    0.6306</td>  <td>   -0.4362</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>   -0.4677*</td> <td>   -0.3777</td>  <td>    0.6265*</td> <td>   -0.4329</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>   -0.4615</td>  <td>   -0.3459</td>  <td>    0.6303</td>  <td>   -0.4169</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>   -0.4525</td>  <td>   -0.3112</td>  <td>    0.6360</td>  <td>   -0.3979</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>   -0.4446</td>  <td>   -0.2776</td>  <td>    0.6411</td>  <td>   -0.3801</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>   -0.4463</td>  <td>   -0.2537</td>  <td>    0.6400</td>  <td>   -0.3719</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>   -0.4501</td>  <td>   -0.2317</td>  <td>    0.6376</td>  <td>   -0.3657</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>   -0.4451</td>  <td>   -0.2010</td>  <td>    0.6408</td>  <td>   -0.3508</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>   -0.4358</td>  <td>   -0.1661</td>  <td>    0.6467</td>  <td>   -0.3316</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>   -0.4381</td>  <td>   -0.1427</td>  <td>    0.6453</td>  <td>   -0.3240</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>   -0.4281</td>  <td>   -0.1069</td>  <td>    0.6518</td>  <td>   -0.3040</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610553272933,"user_tz":-330,"elapsed":1859,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6fd37c44-7e8d-4233-df94-d3185184522b"},"source":["model_fitted = model.fit(3)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Wed, 13, Jan, 2021\n","Time:                     15:54:29\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                  -0.390581\n","Nobs:                     720.000    HQIC:                 -0.445248\n","Log likelihood:          -1856.61    FPE:                   0.619018\n","AIC:                    -0.479622    Det(Omega_mle):        0.607155\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.262343         0.096741            2.712           0.007\n","L1.return               -0.022081         0.037189           -0.594           0.553\n","L1.negative tone        -0.062481         0.041383           -1.510           0.131\n","L2.return               -0.086531         0.037061           -2.335           0.020\n","L2.negative tone        -0.032900         0.041412           -0.794           0.427\n","L3.return                0.089106         0.037150            2.399           0.016\n","L3.negative tone        -0.076611         0.041387           -1.851           0.064\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    1.198045         0.087375           13.712           0.000\n","L1.return               -0.044297         0.033588           -1.319           0.187\n","L1.negative tone         0.012910         0.037377            0.345           0.730\n","L2.return               -0.027649         0.033473           -0.826           0.409\n","L2.negative tone        -0.044637         0.037403           -1.193           0.233\n","L3.return               -0.016520         0.033553           -0.492           0.622\n","L3.negative tone         0.068900         0.037380            1.843           0.065\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000       0.005061\n","negative tone    0.005061       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553278956,"user_tz":-330,"elapsed":1584,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"8c2b61f0-9516-449c-ce18-00a7a9ec9845"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 1.99\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553282160,"user_tz":-330,"elapsed":1676,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d50c6ff3-035c-4b90-e02a-78c85a43c9b4"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["3\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[ 0.02,  0.9 ],\n","       [ 0.  ,  0.41],\n","       [-0.51,  0.2 ]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610553285979,"user_tz":-330,"elapsed":1641,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"234bdfcc-01dd-4f1d-ed89-334d52ac6eb0"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.180451</td>\n","      <td>1.266597</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.185360</td>\n","      <td>1.239827</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.062732</td>\n","      <td>1.166520</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.050287</td>\n","      <td>1.234147</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.061847</td>\n","      <td>1.240309</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.180451       1.266597\n","2019-12-28  0.185360       1.239827\n","2019-12-29  0.062732       1.166520\n","2019-12-30  0.050287       1.234147\n","2019-12-31  0.061847       1.240309"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610553288513,"user_tz":-330,"elapsed":1139,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"7d6af72a-dda9-494a-9f09-d813a3bd5e46"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.4439\n","mae :  0.5678\n","mpe :  inf\n","rmse :  0.8358\n","corr :  -0.0829\n","\n","Forecast Accuracy of: negative tone\n","mape :  0.7422\n","me :  0.1215\n","mae :  0.4506\n","mpe :  0.5544\n","rmse :  0.5557\n","corr :  -0.1777\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}