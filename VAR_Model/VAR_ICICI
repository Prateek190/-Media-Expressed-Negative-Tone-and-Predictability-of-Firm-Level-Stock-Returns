{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_ICICI","provenance":[{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610553999717},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"14B4uaI1UOgFcEY-DYaZUj7NnzehMIVVm","authorship_tag":"ABX9TyPcuOG++WBLkTPYYRZskWtX"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610554331078,"user_tz":-330,"elapsed":2622,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2d825bdc-50b1-4e6e-d204-bba30c8253bc"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_ICICIBANK.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_icici.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>1.58</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.19</td>\n","      <td>1.46</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>1.71</td>\n","      <td>1.41</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>-0.10</td>\n","      <td>2.03</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>-0.57</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.35</td>\n","      <td>0.85</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>1.66</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>1.30</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.05</td>\n","      <td>1.14</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>1.11</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           1.58\n","2018-01-02   -0.19           1.46\n","2018-01-03    1.71           1.41\n","2018-01-04   -0.10           2.03\n","2018-01-05   -0.57           0.75\n","...            ...            ...\n","2019-12-27    0.35           0.85\n","2019-12-28    0.00           1.66\n","2019-12-29    0.00           1.30\n","2019-12-30    0.05           1.14\n","2019-12-31    0.00           1.11\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610554396481,"user_tz":-330,"elapsed":51750,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"3986ed62-0a1c-4307-bc2f-ae3d6551dec7"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610554449599,"user_tz":-330,"elapsed":2136,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"eb36deb3-cad2-4145-c000-b249e4e54015"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.4633</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.2843</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.4633\n","negative tone_y    0.2843           1.0000"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"gaNZFZYmb-DQ"},"source":["# Results from Granger Casuality test can be read as : Both negative tone do not causes return and return do not causes negative tone significantly.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554457153,"user_tz":-330,"elapsed":1594,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"213eb7f3-2557-481d-d9e9-c817ce004131"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554462332,"user_tz":-330,"elapsed":1716,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"92f56933-7b5f-4144-e757-deb920df9387"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -28.8734\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -8.0752\n"," No. Lags Chosen       = 5\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554465893,"user_tz":-330,"elapsed":1530,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2cc45e5f-8d45-4318-ae53-d03c172729bc"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.4242578749373111\n","BIC :  0.4623356461746476\n","FPE :  1.5284558395840884\n","HQIC:  0.4389560877326583 \n","\n","Lag Order = 2\n","AIC :  0.4253879083989422\n","BIC :  0.48891965787584857\n","FPE :  1.5301845561846419\n","HQIC:  0.44991306440299406 \n","\n","Lag Order = 3\n","AIC :  0.4228992694492191\n","BIC :  0.5119402652383044\n","FPE :  1.5263824054212374\n","HQIC:  0.4572739727217999 \n","\n","Lag Order = 4\n","AIC :  0.4345604195386816\n","BIC :  0.5491661280768997\n","FPE :  1.5442881113839493\n","HQIC:  0.47880735716288064 \n","\n","Lag Order = 5\n","AIC :  0.44350878337424343\n","BIC :  0.5837348704481444\n","FPE :  1.5581723727924213\n","HQIC:  0.4976507258733516 \n","\n","Lag Order = 6\n","AIC :  0.4460973253107995\n","BIC :  0.6119996570480242\n","FPE :  1.5622159186383535\n","HQIC:  0.5101571270679007 \n","\n","Lag Order = 7\n","AIC :  0.4519403878454647\n","BIC :  0.6435750317125308\n","FPE :  1.5713775430233052\n","HQIC:  0.5259409875257017 \n","\n","Lag Order = 8\n","AIC :  0.46283604254095384\n","BIC :  0.6802592683473822\n","FPE :  1.5886013417591995\n","HQIC:  0.5468004635164893 \n","\n","Lag Order = 9\n","AIC :  0.4733683947760838\n","BIC :  0.7166366756849132\n","FPE :  1.6054330453697754\n","HQIC:  0.5673197455537767 \n","\n","Lag Order = 10\n","AIC :  0.4834574790261399\n","BIC :  0.752627492570881\n","FPE :  1.6217268905478124\n","HQIC:  0.5874189536779606 \n","\n","Lag Order = 11\n","AIC :  0.4939770917052476\n","BIC :  0.7891057208133248\n","FPE :  1.6388947225372628\n","HQIC:  0.6079719703014494 \n","\n","Lag Order = 12\n","AIC :  0.5010893000126753\n","BIC :  0.8222336340354066\n","FPE :  1.650613943918673\n","HQIC:  0.6251409490577469 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    0.34           1.29\n","2019-12-24    0.32           0.96\n","2019-12-25    0.00           0.78\n","2019-12-26    0.41           0.93\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610554468445,"user_tz":-330,"elapsed":1416,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"583c74fb-06c2-4ff5-991c-4cd3fbebc4a5"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.4695</td>  <td>    0.4823</td>  <td>     1.599</td>  <td>    0.4744</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.4356</td>  <td>    0.4741*</td> <td>     1.546</td>  <td>    0.4505*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.4351</td>  <td>    0.4994</td>  <td>     1.545</td>  <td>    0.4599</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.4310*</td> <td>    0.5209</td>  <td>     1.539*</td> <td>    0.4657</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.4407</td>  <td>    0.5563</td>  <td>     1.554</td>  <td>    0.4854</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.4481</td>  <td>    0.5894</td>  <td>     1.565</td>  <td>    0.5027</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.4493</td>  <td>    0.6163</td>  <td>     1.567</td>  <td>    0.5138</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.4583</td>  <td>    0.6510</td>  <td>     1.581</td>  <td>    0.5328</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.4677</td>  <td>    0.6861</td>  <td>     1.596</td>  <td>    0.5520</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.4766</td>  <td>    0.7206</td>  <td>     1.611</td>  <td>    0.5709</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.4842</td>  <td>    0.7540</td>  <td>     1.623</td>  <td>    0.5884</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.4924</td>  <td>    0.7879</td>  <td>     1.636</td>  <td>    0.6065</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.5011</td>  <td>    0.8222</td>  <td>     1.651</td>  <td>    0.6251</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610554479195,"user_tz":-330,"elapsed":1528,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"3273d591-30ce-410f-8905-69eec9f80aa2"},"source":["model_fitted = model.fit(3)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Wed, 13, Jan, 2021\n","Time:                     16:14:36\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.511940\n","Nobs:                     720.000    HQIC:                  0.457274\n","Log likelihood:          -2181.52    FPE:                    1.52638\n","AIC:                     0.422899    Det(Omega_mle):         1.49713\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.138031         0.171347            0.806           0.420\n","L1.return               -0.071235         0.037406           -1.904           0.057\n","L1.negative tone        -0.055290         0.073117           -0.756           0.450\n","L2.return                0.028134         0.037504            0.750           0.453\n","L2.negative tone         0.045445         0.073824            0.616           0.538\n","L3.return                0.028987         0.037419            0.775           0.439\n","L3.negative tone        -0.023009         0.073144           -0.315           0.753\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.960667         0.087171           11.021           0.000\n","L1.return               -0.019768         0.019030           -1.039           0.299\n","L1.negative tone         0.159238         0.037198            4.281           0.000\n","L2.return                0.008516         0.019080            0.446           0.655\n","L2.negative tone         0.086440         0.037557            2.302           0.021\n","L3.return                0.001068         0.019036            0.056           0.955\n","L3.negative tone         0.117728         0.037211            3.164           0.002\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.007187\n","negative tone   -0.007187       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554484236,"user_tz":-330,"elapsed":1521,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"92541cfe-2224-4279-da93-0f64d51a9cd6"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554486073,"user_tz":-330,"elapsed":970,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"77b6ef5f-0289-4340-e5a3-09d4163c4b17"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["3\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[0.32, 0.96],\n","       [0.  , 0.78],\n","       [0.41, 0.93]])"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610554488370,"user_tz":-330,"elapsed":1415,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9904b1bb-6949-45e4-b64c-43f38fc2f7fa"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.080039</td>\n","      <td>1.281436</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.097330</td>\n","      <td>1.338846</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.108046</td>\n","      <td>1.393311</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.089716</td>\n","      <td>1.447903</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.089960</td>\n","      <td>1.468535</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.080039       1.281436\n","2019-12-28  0.097330       1.338846\n","2019-12-29  0.108046       1.393311\n","2019-12-30  0.089716       1.447903\n","2019-12-31  0.089960       1.468535"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610554491323,"user_tz":-330,"elapsed":1308,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"500383c8-73a2-48d5-f4dd-07f7b8502484"},"source":["\r\n","from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  0.013\n","mae :  0.121\n","mpe :  inf\n","rmse :  0.144\n","corr :  -0.7418\n","\n","Forecast Accuracy of: negative tone\n","mape :  0.2732\n","me :  0.174\n","mae :  0.3025\n","mpe :  0.1958\n","rmse :  0.3229\n","corr :  0.0488\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}