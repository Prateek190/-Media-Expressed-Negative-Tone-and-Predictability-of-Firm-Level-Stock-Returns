{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_Nestle","provenance":[{"file_id":"1h9SvZXO5XCLw7d-G_y9XQoMeAn0ybyhl","timestamp":1610971075170},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554880495},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1VMB1lCDwpxfwa7oY0j8Ru9wFDb4LE2E2","authorship_tag":"ABX9TyM9AYRJrYhcEmMMDPXlC73n"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971261911,"user_tz":-330,"elapsed":3561,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"57e697de-a02d-4a12-f1c7-95f20f68a825"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":1,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610971270759,"user_tz":-330,"elapsed":4640,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d6ac1843-2f1e-40d0-caf7-57076069773d"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_NESTLEIND.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_nestle.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.04</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.12</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>-0.16</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.02</td>\n","      <td>1.52</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.30</td>\n","      <td>0.68</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>1.23</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.00\n","2018-01-02    0.00           0.00\n","2018-01-03   -0.04           0.00\n","2018-01-04    0.12           0.00\n","2018-01-05   -0.16           0.00\n","...            ...            ...\n","2019-12-27   -0.02           1.52\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30    0.30           0.68\n","2019-12-31    0.00           1.23\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610971348330,"user_tz":-330,"elapsed":55101,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"abcfafb6-3e6c-40ac-fce5-712f3b8f493f"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610971351794,"user_tz":-330,"elapsed":2024,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"0c02b62a-efe8-4cc7-8b82-de13bb2cdf91"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.0035</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0296</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.0035\n","negative tone_y    0.0296           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj","executionInfo":{"status":"ok","timestamp":1610971669191,"user_tz":-330,"elapsed":4694,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as : Both negative tone causes return  and return causes negative tone (5% significance).\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971359216,"user_tz":-330,"elapsed":2261,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d1cf6fff-3ff7-4b5d-fa53-03d9041f1703"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":5,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI","executionInfo":{"status":"ok","timestamp":1610971362046,"user_tz":-330,"elapsed":2019,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971364852,"user_tz":-330,"elapsed":1988,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"8ec1c439-0b73-41ec-cc71-1a7ddc40c841"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":7,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -27.8507\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -24.0014\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971368509,"user_tz":-330,"elapsed":2676,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e1457d39-5471-4da7-f3a7-8ad58f7e8102"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":8,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  -0.14976224637628593\n","BIC :  -0.11168447513894944\n","FPE :  0.8609127195421438\n","HQIC:  -0.1350640335809387 \n","\n","Lag Order = 2\n","AIC :  -0.1452589015271788\n","BIC :  -0.08172715205027241\n","FPE :  0.8647987510723416\n","HQIC:  -0.12073374552312692 \n","\n","Lag Order = 3\n","AIC :  -0.13792017213649096\n","BIC :  -0.048879176347405656\n","FPE :  0.871169299955135\n","HQIC:  -0.10354546886391006 \n","\n","Lag Order = 4\n","AIC :  -0.1275438244450705\n","BIC :  -0.012938115906852371\n","FPE :  0.880257140436815\n","HQIC:  -0.08329688682087144 \n","\n","Lag Order = 5\n","AIC :  -0.11954777513358686\n","BIC :  0.020678311940314165\n","FPE :  0.8873258697719469\n","HQIC:  -0.06540583263447866 \n","\n","Lag Order = 6\n","AIC :  -0.11243436337784943\n","BIC :  0.05346796835937531\n","FPE :  0.8936631051911699\n","HQIC:  -0.04837456162074816 \n","\n","Lag Order = 7\n","AIC :  -0.11515430925862043\n","BIC :  0.07648033460844572\n","FPE :  0.8912395374493439\n","HQIC:  -0.04115370957838335 \n","\n","Lag Order = 8\n","AIC :  -0.10686772508500543\n","BIC :  0.1105555007214229\n","FPE :  0.8986606436665061\n","HQIC:  -0.02290330410947003 \n","\n","Lag Order = 9\n","AIC :  -0.10298958131591453\n","BIC :  0.1402786995929149\n","FPE :  0.9021590485420559\n","HQIC:  -0.009038230538221531 \n","\n","Lag Order = 10\n","AIC :  -0.09777834566059129\n","BIC :  0.17139166788414983\n","FPE :  0.9068807985461871\n","HQIC:  0.006183128991229442 \n","\n","Lag Order = 11\n","AIC :  -0.0908167103518388\n","BIC :  0.20431191875623833\n","FPE :  0.9132261427578432\n","HQIC:  0.023178168244363057 \n","\n","Lag Order = 12\n","AIC :  -0.08266544681770469\n","BIC :  0.23847888720502675\n","FPE :  0.9207125103601167\n","HQIC:  0.04138620222736694 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    0.63           1.12\n","2019-12-24    1.04           0.00\n","2019-12-25    0.00           0.89\n","2019-12-26   -1.05           0.26\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610971371002,"user_tz":-330,"elapsed":1270,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"87b22572-9bbf-402c-b9f8-4fb9d510007d"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>   -0.1159</td>  <td>   -0.1031*</td> <td>    0.8906</td>  <td>   -0.1109</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>   -0.1337*</td> <td>  -0.09519</td>  <td>    0.8748*</td> <td>   -0.1188*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>   -0.1318</td>  <td>  -0.06753</td>  <td>    0.8766</td>  <td>   -0.1070</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>   -0.1272</td>  <td>  -0.03724</td>  <td>    0.8806</td>  <td>  -0.09243</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>   -0.1191</td>  <td> -0.003514</td>  <td>    0.8877</td>  <td>  -0.07447</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>   -0.1137</td>  <td>   0.02765</td>  <td>    0.8926</td>  <td>  -0.05907</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>   -0.1090</td>  <td>   0.05800</td>  <td>    0.8967</td>  <td>  -0.04449</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>   -0.1146</td>  <td>   0.07812</td>  <td>    0.8918</td>  <td>  -0.04013</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>   -0.1079</td>  <td>    0.1105</td>  <td>    0.8977</td>  <td>  -0.02355</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>   -0.1027</td>  <td>    0.1414</td>  <td>    0.9024</td>  <td> -0.008417</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>  -0.09903</td>  <td>    0.1707</td>  <td>    0.9057</td>  <td>  0.005172</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>  -0.09143</td>  <td>    0.2040</td>  <td>    0.9127</td>  <td>   0.02270</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>  -0.08267</td>  <td>    0.2385</td>  <td>    0.9207</td>  <td>   0.04139</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610971377132,"user_tz":-330,"elapsed":2228,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"44256221-ea80-4998-effb-031223f75fdb"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Mon, 18, Jan, 2021\n","Time:                     12:02:52\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                  -0.111684\n","Nobs:                     722.000    HQIC:                 -0.135064\n","Log likelihood:          -1988.88    FPE:                   0.860913\n","AIC:                    -0.149762    Det(Omega_mle):        0.853803\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.031638         0.051339            0.616           0.538\n","L1.return               -0.041667         0.037129           -1.122           0.262\n","L1.negative tone         0.156547         0.057956            2.701           0.007\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.386556         0.032745           11.805           0.000\n","L1.return               -0.050463         0.023682           -2.131           0.033\n","L1.negative tone         0.114246         0.036966            3.091           0.002\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000       0.024558\n","negative tone    0.024558       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971380322,"user_tz":-330,"elapsed":2214,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a9aedda8-e29d-45f3-93e3-10c4482a5f37"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["return : 2.01\n","negative tone : 1.99\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971383390,"user_tz":-330,"elapsed":2273,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"8fa58345-f308-4465-ceb7-090e1670c470"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":12,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-1.05,  0.26]])"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610971385849,"user_tz":-330,"elapsed":1566,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"8e8bf674-dcc4-434f-938d-402a41f3c0f7"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.116091</td>\n","      <td>0.469246</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.100260</td>\n","      <td>0.434308</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.095450</td>\n","      <td>0.431115</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.095151</td>\n","      <td>0.430993</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.095144</td>\n","      <td>0.430994</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.116091       0.469246\n","2019-12-28  0.100260       0.434308\n","2019-12-29  0.095450       0.431115\n","2019-12-30  0.095151       0.430993\n","2019-12-31  0.095144       0.430994"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610971389753,"user_tz":-330,"elapsed":2378,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6ac50355-dd92-45d7-bd4e-0f5989740a03"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  0.0444\n","mae :  0.1264\n","mpe :  inf\n","rmse :  0.1332\n","corr :  -0.3838\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  -0.2467\n","mae :  0.5928\n","mpe :  inf\n","rmse :  0.6601\n","corr :  0.6332\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}