{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_Maruti","provenance":[{"file_id":"1h9SvZXO5XCLw7d-G_y9XQoMeAn0ybyhl","timestamp":1610970856334},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554880495},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"mount_file_id":"14Ru_KdEgJJ10m7GzUUXqEch8-ozlBqDK","authorship_tag":"ABX9TyNzc1wmrQ6plGVYhZLq1yyV"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971127217,"user_tz":-330,"elapsed":2684,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"63557a5d-1869-4d30-8a44-42ba62e779f2"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":1,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610971131453,"user_tz":-330,"elapsed":3392,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"fa9f0ebe-f28f-4452-967b-61907d5f65dd"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_MARUTI.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_maruti.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.56</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-1.01</td>\n","      <td>0.65</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-1.44</td>\n","      <td>0.67</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>-0.32</td>\n","      <td>0.88</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.51</td>\n","      <td>0.76</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.77</td>\n","      <td>0.91</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>2.59</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.63</td>\n","      <td>1.31</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>1.83</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.56\n","2018-01-02   -1.01           0.65\n","2018-01-03   -1.44           0.67\n","2018-01-04   -0.32           0.88\n","2018-01-05    0.51           0.76\n","...            ...            ...\n","2019-12-27    0.77           0.91\n","2019-12-28    0.00           2.59\n","2019-12-29    0.00           0.00\n","2019-12-30    0.63           1.31\n","2019-12-31    0.00           1.83\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610971194874,"user_tz":-330,"elapsed":61450,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"058672ce-1603-4393-b907-2fc100f7f56c"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610971239232,"user_tz":-330,"elapsed":1865,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"ad0a503a-d19d-4763-fb7c-b8845bec1e51"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.0635</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.2586</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.0635\n","negative tone_y    0.2586           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj","executionInfo":{"status":"ok","timestamp":1610971906373,"user_tz":-330,"elapsed":2020,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as : negative tone causes return (10% significance) and but return do not causes negative tone significantly.\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971278415,"user_tz":-330,"elapsed":1841,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4b145878-cafe-4307-9c5d-ac8824e72992"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":5,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI","executionInfo":{"status":"ok","timestamp":1610971281320,"user_tz":-330,"elapsed":1394,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971284469,"user_tz":-330,"elapsed":1753,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"82d56a32-df9f-4940-ee08-cc7f6cd5e42f"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":7,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -26.4095\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -5.2366\n"," No. Lags Chosen       = 10\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971300869,"user_tz":-330,"elapsed":2720,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"611b41e4-f457-43d6-a0fc-7dc392232ebe"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":8,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.5786420067194394\n","BIC :  0.616719777956776\n","FPE :  1.7836148192815091\n","HQIC:  0.5933402195147867 \n","\n","Lag Order = 2\n","AIC :  0.577579696062981\n","BIC :  0.6411114455398874\n","FPE :  1.7817216941883733\n","HQIC:  0.6021048520670329 \n","\n","Lag Order = 3\n","AIC :  0.5707313876018226\n","BIC :  0.6597723833909079\n","FPE :  1.7695629814267004\n","HQIC:  0.6051060908744036 \n","\n","Lag Order = 4\n","AIC :  0.5832461901972419\n","BIC :  0.69785189873546\n","FPE :  1.7918503580091165\n","HQIC:  0.627493127821441 \n","\n","Lag Order = 5\n","AIC :  0.5872940420218868\n","BIC :  0.7275201290957879\n","FPE :  1.799122124277311\n","HQIC:  0.641435984520995 \n","\n","Lag Order = 6\n","AIC :  0.5869516172780997\n","BIC :  0.7528539490153245\n","FPE :  1.7985118374798261\n","HQIC:  0.651011419035201 \n","\n","Lag Order = 7\n","AIC :  0.5905579991359536\n","BIC :  0.7821926430030198\n","FPE :  1.8050174546147528\n","HQIC:  0.6645585988161907 \n","\n","Lag Order = 8\n","AIC :  0.5940805011035697\n","BIC :  0.8115037269099981\n","FPE :  1.8113971043668207\n","HQIC:  0.6780449220791052 \n","\n","Lag Order = 9\n","AIC :  0.6058205855374892\n","BIC :  0.8490888664463185\n","FPE :  1.832801592691515\n","HQIC:  0.6997719363151822 \n","\n","Lag Order = 10\n","AIC :  0.6189948165418608\n","BIC :  0.888164830086602\n","FPE :  1.8571237145896917\n","HQIC:  0.7229562911936815 \n","\n","Lag Order = 11\n","AIC :  0.6124184637738624\n","BIC :  0.9075470928819396\n","FPE :  1.8449707745710768\n","HQIC:  0.7264133423700643 \n","\n","Lag Order = 12\n","AIC :  0.6167323055199079\n","BIC :  0.9378766395426393\n","FPE :  1.8529710269643165\n","HQIC:  0.7407839545649795 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    0.09           0.82\n","2019-12-24    3.07           3.20\n","2019-12-25    0.00           8.30\n","2019-12-26   -1.04           0.00\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610971304276,"user_tz":-330,"elapsed":1451,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b534d623-2cdd-441c-88bb-b0fe375eadd4"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.6187</td>  <td>    0.6315*</td> <td>     1.856</td>  <td>    0.6236</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.5996</td>  <td>    0.6382</td>  <td>     1.821</td>  <td>    0.6145*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.5971</td>  <td>    0.6613</td>  <td>     1.817</td>  <td>    0.6219</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.5894*</td> <td>    0.6793</td>  <td>     1.803*</td> <td>    0.6241</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.5993</td>  <td>    0.7149</td>  <td>     1.821</td>  <td>    0.6440</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.6008</td>  <td>    0.7421</td>  <td>     1.824</td>  <td>    0.6554</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.5984</td>  <td>    0.7654</td>  <td>     1.819</td>  <td>    0.6629</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.6005</td>  <td>    0.7932</td>  <td>     1.823</td>  <td>    0.6750</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.6016</td>  <td>    0.8200</td>  <td>     1.825</td>  <td>    0.6860</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.6108</td>  <td>    0.8549</td>  <td>     1.842</td>  <td>    0.7051</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.6212</td>  <td>    0.8910</td>  <td>     1.861</td>  <td>    0.7254</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.6117</td>  <td>    0.9072</td>  <td>     1.844</td>  <td>    0.7258</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.6167</td>  <td>    0.9379</td>  <td>     1.853</td>  <td>    0.7408</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610971314234,"user_tz":-330,"elapsed":1843,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"f7918fab-8e59-4da4-fe3c-ad8e643c0c7c"},"source":["model_fitted = model.fit(3)\r\n","model_fitted.summary()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Mon, 18, Jan, 2021\n","Time:                     12:01:50\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.659772\n","Nobs:                     720.000    HQIC:                  0.605106\n","Log likelihood:          -2234.73    FPE:                    1.76956\n","AIC:                     0.570731    Det(Omega_mle):         1.73565\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.009415         0.106429            0.088           0.930\n","L1.return                0.014203         0.037384            0.380           0.704\n","L1.negative tone        -0.063800         0.057967           -1.101           0.271\n","L2.return               -0.007802         0.037395           -0.209           0.835\n","L2.negative tone         0.027052         0.060771            0.445           0.656\n","L3.return               -0.052803         0.037569           -1.406           0.160\n","L3.negative tone        -0.000357         0.060510           -0.006           0.995\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.679590         0.068518            9.918           0.000\n","L1.return               -0.028394         0.024067           -1.180           0.238\n","L1.negative tone         0.123914         0.037319            3.320           0.001\n","L2.return               -0.011290         0.024074           -0.469           0.639\n","L2.negative tone         0.101453         0.039124            2.593           0.010\n","L3.return                0.012077         0.024187            0.499           0.618\n","L3.negative tone         0.133125         0.038956            3.417           0.001\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.014863\n","negative tone   -0.014863       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971317462,"user_tz":-330,"elapsed":2102,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"951ffd5e-fdf8-4e39-a19d-b6fffe5c9b80"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971320461,"user_tz":-330,"elapsed":2185,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"59c4b38c-d87d-49f7-b3de-7df2034bc9fd"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":12,"outputs":[{"output_type":"stream","text":["3\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[ 3.07,  3.2 ],\n","       [ 0.  ,  8.3 ],\n","       [-1.04,  0.  ]])"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610971322845,"user_tz":-330,"elapsed":1598,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"7a095c2b-463a-4950-aba5-ed735441d6c5"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.055927</td>\n","      <td>2.014255</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.113153</td>\n","      <td>2.044274</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.013649</td>\n","      <td>1.127278</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.010188</td>\n","      <td>1.297161</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>-0.037643</td>\n","      <td>1.225912</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.055927       2.014255\n","2019-12-28 -0.113153       2.044274\n","2019-12-29 -0.013649       1.127278\n","2019-12-30 -0.010188       1.297161\n","2019-12-31 -0.037643       1.225912"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610971327377,"user_tz":-330,"elapsed":2012,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"09f8dff1-ae3f-4075-d3fa-21633fed43ba"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.3037\n","mae :  0.3037\n","mpe :  -inf\n","rmse :  0.4322\n","corr :  0.7424\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.2138\n","mae :  0.6788\n","mpe :  inf\n","rmse :  0.7941\n","corr :  0.4767\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}