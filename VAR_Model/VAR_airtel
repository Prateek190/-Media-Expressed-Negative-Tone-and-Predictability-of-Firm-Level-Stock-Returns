{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_airtel","provenance":[{"file_id":"1JyhHyr6VXUT9WRJpq47RknOPQCZ3MuV6","timestamp":1609619744263},{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609619203614},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1_oyB9Egec5xpaQlpCBmPMYFTPeHcvTsr","authorship_tag":"ABX9TyMKmn6Ze3ujrwsytGMt12It"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620293756,"user_tz":-330,"elapsed":2394,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"41e782e0-b095-459d-c47b-4b07fa08c026"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609620299712,"user_tz":-330,"elapsed":4911,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"0d2b5cde-b351-44cf-a6e1-ef2622465c1c"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_BHARTIARTL.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_airtel.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-2.15</td>\n","      <td>1.25</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>0.32</td>\n","      <td>2.28</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.93</td>\n","      <td>1.89</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>3.25</td>\n","      <td>1.38</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>4.29</td>\n","      <td>0.70</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.91</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.38</td>\n","      <td>1.32</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.97</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.00\n","2018-01-02   -2.15           1.25\n","2018-01-03    0.32           2.28\n","2018-01-04    0.93           1.89\n","2018-01-05    3.25           1.38\n","...            ...            ...\n","2019-12-27    4.29           0.70\n","2019-12-28    0.00           0.71\n","2019-12-29    0.00           0.91\n","2019-12-30   -0.38           1.32\n","2019-12-31    0.00           0.97\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609620360012,"user_tz":-330,"elapsed":59145,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a4a27e94-f576-41fb-81a7-6cd90339a73d"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609620461390,"user_tz":-330,"elapsed":1665,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b701ed5b-94c6-4f84-a3c3-8b397a80d04b"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.000</td>\n","      <td>0.3906</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.381</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y            1.000           0.3906\n","negative tone_y     0.381           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vmAuQ_5Qzpdn"},"source":["# Results from Granger Casuality test can be read as : negative tone do not causes return and return also do not causes negative tone significantly.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620506994,"user_tz":-330,"elapsed":2031,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"82b78bc6-2769-48c9-b75f-ef59e5253b93"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620517010,"user_tz":-330,"elapsed":1695,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"8042041b-174d-4ca4-8cf7-917ed196d781"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -27.5058\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -23.2709\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620521571,"user_tz":-330,"elapsed":2819,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e4ae41ee-3d27-464c-b7c3-e173deabeba9"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.8818576907190864\n","BIC :  0.919935461956423\n","FPE :  2.415382806065877\n","HQIC:  0.8965559035144336 \n","\n","Lag Order = 2\n","AIC :  0.8928045718056594\n","BIC :  0.9563363212825658\n","FPE :  2.441969819032867\n","HQIC:  0.9173297278097113 \n","\n","Lag Order = 3\n","AIC :  0.9002144542687437\n","BIC :  0.989255450057829\n","FPE :  2.4601336546287875\n","HQIC:  0.9345891575413247 \n","\n","Lag Order = 4\n","AIC :  0.9110812592936836\n","BIC :  1.0256869678319016\n","FPE :  2.487016687243673\n","HQIC:  0.9553281969178826 \n","\n","Lag Order = 5\n","AIC :  0.9191201047200029\n","BIC :  1.059346191793904\n","FPE :  2.507095470184479\n","HQIC:  0.9732620472191111 \n","\n","Lag Order = 6\n","AIC :  0.9296549230631181\n","BIC :  1.095557254800343\n","FPE :  2.533654867063068\n","HQIC:  0.9937147248202194 \n","\n","Lag Order = 7\n","AIC :  0.9326986334199413\n","BIC :  1.1243332772870076\n","FPE :  2.5413892902591595\n","HQIC:  1.0066992331001785 \n","\n","Lag Order = 8\n","AIC :  0.9334705520801755\n","BIC :  1.150893777886604\n","FPE :  2.5433662003935678\n","HQIC:  1.0174349730557108 \n","\n","Lag Order = 9\n","AIC :  0.9434446103575654\n","BIC :  1.186712891266395\n","FPE :  2.568879331362017\n","HQIC:  1.0373959611352586 \n","\n","Lag Order = 10\n","AIC :  0.9423763063418306\n","BIC :  1.2115463198865717\n","FPE :  2.5661594162417107\n","HQIC:  1.0463377809936514 \n","\n","Lag Order = 11\n","AIC :  0.9501376801477828\n","BIC :  1.24526630925586\n","FPE :  2.5861819911119093\n","HQIC:  1.0641325587439847 \n","\n","Lag Order = 12\n","AIC :  0.9570730940592863\n","BIC :  1.2782174280820178\n","FPE :  2.604214514973019\n","HQIC:  1.081124743104358 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23   -0.93           0.82\n","2019-12-24   -2.47           0.90\n","2019-12-25    0.00           1.95\n","2019-12-26   -1.39           1.15\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609620524413,"user_tz":-330,"elapsed":1264,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5db1b786-a035-489d-9723-41a88d1ef28d"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.8995</td>  <td>    0.9124*</td> <td>     2.458</td>  <td>    0.9045</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.8887*</td> <td>    0.9273</td>  <td>     2.432*</td> <td>    0.9036*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.8990</td>  <td>    0.9632</td>  <td>     2.457</td>  <td>    0.9238</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.9065</td>  <td>    0.9964</td>  <td>     2.476</td>  <td>    0.9412</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.9147</td>  <td>     1.030</td>  <td>     2.496</td>  <td>    0.9593</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.9246</td>  <td>     1.066</td>  <td>     2.521</td>  <td>    0.9791</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.9319</td>  <td>     1.099</td>  <td>     2.539</td>  <td>    0.9964</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.9350</td>  <td>     1.128</td>  <td>     2.547</td>  <td>     1.009</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.9417</td>  <td>     1.160</td>  <td>     2.564</td>  <td>     1.026</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.9500</td>  <td>     1.194</td>  <td>     2.586</td>  <td>     1.044</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.9462</td>  <td>     1.216</td>  <td>     2.576</td>  <td>     1.050</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.9528</td>  <td>     1.248</td>  <td>     2.593</td>  <td>     1.067</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.9571</td>  <td>     1.278</td>  <td>     2.604</td>  <td>     1.081</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609620539707,"user_tz":-330,"elapsed":1731,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"98ded516-4e71-49fb-ebb3-85c12e824553"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     20:48:59\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.919935\n","Nobs:                     722.000    HQIC:                  0.896556\n","Log likelihood:          -2361.30    FPE:                    2.41538\n","AIC:                     0.881858    Det(Omega_mle):         2.39543\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.053586         0.117321            0.457           0.648\n","L1.return               -0.025396         0.037293           -0.681           0.496\n","L1.negative tone        -0.038966         0.078170           -0.498           0.618\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    1.054560         0.055315           19.065           0.000\n","L1.return               -0.007681         0.017583           -0.437           0.662\n","L1.negative tone         0.142682         0.036856            3.871           0.000\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.009490\n","negative tone   -0.009490       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620543562,"user_tz":-330,"elapsed":1840,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"01a41476-2aac-4c5b-aafa-8aa7d074b55b"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 1.99\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620546549,"user_tz":-330,"elapsed":1812,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9e3a91cc-2314-4414-e03f-692e85f1d204"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-1.39,  1.15]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609620549274,"user_tz":-330,"elapsed":1665,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"70b47ba0-1574-4aaf-8a65-bbc756298011"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.044075</td>\n","      <td>1.229321</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.004565</td>\n","      <td>1.229624</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.005556</td>\n","      <td>1.229970</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.005517</td>\n","      <td>1.230012</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.005517</td>\n","      <td>1.230018</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.044075       1.229321\n","2019-12-28  0.004565       1.229624\n","2019-12-29  0.005556       1.229970\n","2019-12-30  0.005517       1.230012\n","2019-12-31  0.005517       1.230018"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609620552146,"user_tz":-330,"elapsed":1330,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6c49230a-6a59-49f0-c14c-4f5570832c09"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.769\n","mae :  0.9294\n","mpe :  inf\n","rmse :  1.9067\n","corr :  0.9956\n","\n","Forecast Accuracy of: negative tone\n","mape :  0.4352\n","me :  0.3078\n","mae :  0.3438\n","mpe :  0.4079\n","rmse :  0.3816\n","corr :  0.7583\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}