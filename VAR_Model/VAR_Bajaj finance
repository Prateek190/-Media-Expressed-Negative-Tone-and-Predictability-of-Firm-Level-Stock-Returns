{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_Bajaj finance","provenance":[{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609619203614},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1JyhHyr6VXUT9WRJpq47RknOPQCZ3MuV6","authorship_tag":"ABX9TyNKeM7Tq7HJ+Ssu8Id9e1rm"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619339113,"user_tz":-330,"elapsed":2980,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d8ab3130-7fb8-42a0-8f93-7aadd70bbbb3"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609619360854,"user_tz":-330,"elapsed":3823,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b0b63015-b3ea-4ddb-e3d3-2612125bf02a"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_BAJFINANCE.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_finance.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>2.25</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.06</td>\n","      <td>1.55</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.54</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>2.26</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>3.45</td>\n","      <td>0.48</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>2.38</td>\n","      <td>0.95</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.77</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.40</td>\n","      <td>0.31</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.66</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           2.25\n","2018-01-02   -0.06           1.55\n","2018-01-03   -0.54           0.00\n","2018-01-04    2.26           0.00\n","2018-01-05    3.45           0.48\n","...            ...            ...\n","2019-12-27    2.38           0.95\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.77\n","2019-12-30   -0.40           0.31\n","2019-12-31    0.00           0.66\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609619419051,"user_tz":-330,"elapsed":57038,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2fed521d-d2e9-49a4-e995-0b44f6ce22eb"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609619473842,"user_tz":-330,"elapsed":1796,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4032e8cf-4e19-4711-fcc5-f5f2c6b16012"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.000</td>\n","      <td>0.3213</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.134</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y            1.000           0.3213\n","negative tone_y     0.134           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vmAuQ_5Qzpdn"},"source":["# Results from Granger Casuality test can be read as : negative tone do not causes return and return also do not causes negative tone.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619669972,"user_tz":-330,"elapsed":1574,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6e4ad1cd-2bcf-42e9-acd3-191ac776ff8b"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619675348,"user_tz":-330,"elapsed":1656,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"748c8aef-486b-4cb5-c2f3-675de2fddd90"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -13.3714\n"," No. Lags Chosen       = 3\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -7.6959\n"," No. Lags Chosen       = 6\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619678588,"user_tz":-330,"elapsed":1025,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2db03a59-7eb6-4a4a-8e48-358af57ec12c"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.9725665130119785\n","BIC :  1.010644284249315\n","FPE :  2.644723726600913\n","HQIC:  0.9872647258073257 \n","\n","Lag Order = 2\n","AIC :  0.9762201173334032\n","BIC :  1.0397518668103096\n","FPE :  2.654405100613511\n","HQIC:  1.000745273337455 \n","\n","Lag Order = 3\n","AIC :  0.9743468672573694\n","BIC :  1.0633878630464548\n","FPE :  2.649439458705925\n","HQIC:  1.0087215705299504 \n","\n","Lag Order = 4\n","AIC :  0.9787778440793383\n","BIC :  1.0933835526175564\n","FPE :  2.6612088098830804\n","HQIC:  1.0230247817035374 \n","\n","Lag Order = 5\n","AIC :  0.9841584993040268\n","BIC :  1.1243845863779278\n","FPE :  2.6755722815128076\n","HQIC:  1.038300441803135 \n","\n","Lag Order = 6\n","AIC :  0.9848928574618222\n","BIC :  1.1507951891990469\n","FPE :  2.6775462751997074\n","HQIC:  1.0489526592189236 \n","\n","Lag Order = 7\n","AIC :  0.9875453672955288\n","BIC :  1.179180011162595\n","FPE :  2.684669502436431\n","HQIC:  1.0615459669757659 \n","\n","Lag Order = 8\n","AIC :  1.0002000809596125\n","BIC :  1.2176233067660407\n","FPE :  2.718874500931927\n","HQIC:  1.0841645019351478 \n","\n","Lag Order = 9\n","AIC :  1.0130760429546115\n","BIC :  1.2563443238634409\n","FPE :  2.7541288303441513\n","HQIC:  1.1070273937323045 \n","\n","Lag Order = 10\n","AIC :  1.0256864308651215\n","BIC :  1.2948564444098625\n","FPE :  2.789104328686416\n","HQIC:  1.1296479055169422 \n","\n","Lag Order = 11\n","AIC :  1.035475650163843\n","BIC :  1.33060427927192\n","FPE :  2.8165722274309464\n","HQIC:  1.1494705287600449 \n","\n","Lag Order = 12\n","AIC :  1.0401243886648441\n","BIC :  1.3612687226875757\n","FPE :  2.8297330952666693\n","HQIC:  1.164176037709916 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    0.50           0.00\n","2019-12-24    0.36           1.43\n","2019-12-25    0.00           1.81\n","2019-12-26   -0.80           0.39\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609619681452,"user_tz":-330,"elapsed":1416,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"505d5300-e231-4b28-9ceb-1f24ea56c34b"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.9903</td>  <td>     1.003*</td> <td>     2.692</td>  <td>    0.9952*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.9834</td>  <td>     1.022</td>  <td>     2.673</td>  <td>    0.9983</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.9843</td>  <td>     1.049</td>  <td>     2.676</td>  <td>     1.009</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.9819*</td> <td>     1.072</td>  <td>     2.670*</td> <td>     1.017</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.9874</td>  <td>     1.103</td>  <td>     2.684</td>  <td>     1.032</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.9949</td>  <td>     1.136</td>  <td>     2.704</td>  <td>     1.049</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.9929</td>  <td>     1.160</td>  <td>     2.699</td>  <td>     1.057</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.9936</td>  <td>     1.186</td>  <td>     2.701</td>  <td>     1.068</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>     1.004</td>  <td>     1.223</td>  <td>     2.730</td>  <td>     1.089</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>     1.015</td>  <td>     1.259</td>  <td>     2.760</td>  <td>     1.109</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>     1.025</td>  <td>     1.295</td>  <td>     2.787</td>  <td>     1.129</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>     1.034</td>  <td>     1.329</td>  <td>     2.811</td>  <td>     1.148</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>     1.040</td>  <td>     1.361</td>  <td>     2.830</td>  <td>     1.164</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609619711272,"user_tz":-330,"elapsed":1607,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"dabf7370-a861-48fc-8956-b6a62107634b"},"source":["model_fitted = model.fit(3)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     20:35:11\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                    1.06339\n","Nobs:                     720.000    HQIC:                   1.00872\n","Log likelihood:          -2380.04    FPE:                    2.64944\n","AIC:                     0.974347    Det(Omega_mle):         2.59866\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.079601         0.111606            0.713           0.476\n","L1.return               -0.066225         0.037264           -1.777           0.076\n","L1.negative tone         0.030224         0.071347            0.424           0.672\n","L2.return                0.004069         0.037384            0.109           0.913\n","L2.negative tone        -0.052840         0.071408           -0.740           0.459\n","L3.return                0.092613         0.037298            2.483           0.013\n","L3.negative tone         0.083079         0.071231            1.166           0.243\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.624388         0.058466           10.680           0.000\n","L1.return               -0.028041         0.019521           -1.436           0.151\n","L1.negative tone         0.091921         0.037376            2.459           0.014\n","L2.return                0.003776         0.019584            0.193           0.847\n","L2.negative tone         0.091757         0.037407            2.453           0.014\n","L3.return                0.017020         0.019539            0.871           0.384\n","L3.negative tone         0.046864         0.037315            1.256           0.209\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000       0.018154\n","negative tone    0.018154       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619716481,"user_tz":-330,"elapsed":1695,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"89abbf57-d218-45fa-adf1-bdd6ce53a8f3"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 1.99\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619719058,"user_tz":-330,"elapsed":1147,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2cd8fdb9-a605-4118-978e-52490da7eade"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["3\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[ 0.36,  1.43],\n","       [ 0.  ,  1.81],\n","       [-0.8 ,  0.39]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609619724960,"user_tz":-330,"elapsed":1663,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"82909a9c-71db-4f6c-c060-7863f1679724"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.200872</td>\n","      <td>0.921894</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.220672</td>\n","      <td>0.821086</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.000218</td>\n","      <td>0.783685</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.155977</td>\n","      <td>0.819215</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.141274</td>\n","      <td>0.809462</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.200872       0.921894\n","2019-12-28  0.220672       0.821086\n","2019-12-29  0.000218       0.783685\n","2019-12-30  0.155977       0.819215\n","2019-12-31  0.141274       0.809462"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609619728271,"user_tz":-330,"elapsed":1470,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"806ce8bb-5bc2-47a6-c0bd-aeb65ed9ca4c"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.2522\n","mae :  0.6195\n","mpe :  inf\n","rmse :  1.0126\n","corr :  0.3371\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.2931\n","mae :  0.3043\n","mpe :  inf\n","rmse :  0.4374\n","corr :  0.3954\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}