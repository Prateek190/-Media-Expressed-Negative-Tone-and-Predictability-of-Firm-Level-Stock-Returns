{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_Grasim","provenance":[{"file_id":"1GyTEhpqznBiD-raPPyZLWOwlOKPxUtCO","timestamp":1609622940291},{"file_id":"1pUiM9tW9TFJRP1OYgN70yjgjOqrHZXni","timestamp":1609621491864},{"file_id":"1Jrk01wRDu2zRJjdoaEhwD3uix_8qhLrA","timestamp":1609620869825},{"file_id":"1Ph7hHF7qdnMhnykYIFGrqCRof9ROi1tw","timestamp":1609620694974},{"file_id":"1_oyB9Egec5xpaQlpCBmPMYFTPeHcvTsr","timestamp":1609620348596},{"file_id":"1JyhHyr6VXUT9WRJpq47RknOPQCZ3MuV6","timestamp":1609619744263},{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609619203614},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"16lumPupxeYLLzJya3Fet-WYR6z8NolZO","authorship_tag":"ABX9TyMyD1WWI2wxxYF1wYgnsViJ"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623048462,"user_tz":-330,"elapsed":2133,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"64ca51b6-4744-4dd6-e24c-09b4a28dd690"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609623053230,"user_tz":-330,"elapsed":4140,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"f54db5c2-d56b-45dc-b087-1b6db1db0122"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_GRASIM.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_grasim.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>1.70</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.38</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-1.08</td>\n","      <td>1.62</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>3.82</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>3.75</td>\n","      <td>1.77</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.75</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-1.90</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           1.70\n","2018-01-02   -0.38           0.00\n","2018-01-03   -1.08           1.62\n","2018-01-04    3.82           0.00\n","2018-01-05    3.75           1.77\n","...            ...            ...\n","2019-12-27    0.75           0.00\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30   -1.90           0.00\n","2019-12-31    0.00           0.00\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609623115006,"user_tz":-330,"elapsed":58961,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9c61568b-bd28-4b49-9170-4dddf3080a7f"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609623193402,"user_tz":-330,"elapsed":1510,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6682cb4f-5774-41b0-a4b4-247ebc950b00"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.3478</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0023</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.3478\n","negative tone_y    0.0023           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vmAuQ_5Qzpdn"},"source":["# Results from Granger Casuality test can be read as : negative tone do not causes return significantly but return causes negative tone (10% significance).\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623293235,"user_tz":-330,"elapsed":1473,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"bfac7a90-e66f-4732-a46b-b27a8f9c6eb1"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623298688,"user_tz":-330,"elapsed":1438,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"afa963ff-53f8-4853-a5dc-6e48f8e01716"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -27.4096\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -26.9822\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623301246,"user_tz":-330,"elapsed":1205,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4494e0dd-efe3-4113-d5ac-329f950c7a0c"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.4576837378741419\n","BIC :  0.4957615091114784\n","FPE :  1.5804092516433865\n","HQIC:  0.4723819506694891 \n","\n","Lag Order = 2\n","AIC :  0.4605649423225415\n","BIC :  0.524096691799448\n","FPE :  1.5849698530816847\n","HQIC:  0.4850900983265934 \n","\n","Lag Order = 3\n","AIC :  0.4688004048253953\n","BIC :  0.5578414006144806\n","FPE :  1.5980779568651933\n","HQIC:  0.5031751080979763 \n","\n","Lag Order = 4\n","AIC :  0.46069690173705014\n","BIC :  0.5753026102752683\n","FPE :  1.5851824593776997\n","HQIC:  0.5049438393612492 \n","\n","Lag Order = 5\n","AIC :  0.4576836389382825\n","BIC :  0.5979097260121835\n","FPE :  1.5804165224729927\n","HQIC:  0.5118255814373907 \n","\n","Lag Order = 6\n","AIC :  0.4691845331853798\n","BIC :  0.6350868649226046\n","FPE :  1.5987026904753068\n","HQIC:  0.5332443349424811 \n","\n","Lag Order = 7\n","AIC :  0.46319333142135816\n","BIC :  0.6548279752884243\n","FPE :  1.5891600308701237\n","HQIC:  0.5371939311015952 \n","\n","Lag Order = 8\n","AIC :  0.4746139577836436\n","BIC :  0.6920371835900719\n","FPE :  1.607422372399198\n","HQIC:  0.558578378759179 \n","\n","Lag Order = 9\n","AIC :  0.47994015866171663\n","BIC :  0.723208439570546\n","FPE :  1.6160183161317616\n","HQIC:  0.5738915094394096 \n","\n","Lag Order = 10\n","AIC :  0.4864327639079721\n","BIC :  0.7556027774527132\n","FPE :  1.6265591751947035\n","HQIC:  0.5903942385597928 \n","\n","Lag Order = 11\n","AIC :  0.4975344690741885\n","BIC :  0.7926630981822657\n","FPE :  1.6447352718930313\n","HQIC:  0.6115293476703904 \n","\n","Lag Order = 12\n","AIC :  0.5025542424272245\n","BIC :  0.8236985764499558\n","FPE :  1.653033770315571\n","HQIC:  0.6266058914722961 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    0.89            0.0\n","2019-12-24    1.05            0.0\n","2019-12-25    0.00            0.0\n","2019-12-26   -2.45            0.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609623303534,"user_tz":-330,"elapsed":1019,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"59476be8-ba09-4801-f2b3-95f12b049a48"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.4467*</td> <td>    0.4595*</td> <td>     1.563*</td> <td>    0.4517*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.4541</td>  <td>    0.4926</td>  <td>     1.575</td>  <td>    0.4690</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.4545</td>  <td>    0.5188</td>  <td>     1.575</td>  <td>    0.4793</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.4638</td>  <td>    0.5537</td>  <td>     1.590</td>  <td>    0.4986</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.4622</td>  <td>    0.5778</td>  <td>     1.588</td>  <td>    0.5068</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.4683</td>  <td>    0.6096</td>  <td>     1.597</td>  <td>    0.5229</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.4772</td>  <td>    0.6442</td>  <td>     1.612</td>  <td>    0.5417</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.4691</td>  <td>    0.6618</td>  <td>     1.599</td>  <td>    0.5436</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.4785</td>  <td>    0.6968</td>  <td>     1.614</td>  <td>    0.5628</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.4852</td>  <td>    0.7293</td>  <td>     1.625</td>  <td>    0.5795</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.4893</td>  <td>    0.7591</td>  <td>     1.631</td>  <td>    0.5935</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.4981</td>  <td>    0.7936</td>  <td>     1.646</td>  <td>    0.6123</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.5026</td>  <td>    0.8237</td>  <td>     1.653</td>  <td>    0.6266</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609623355377,"user_tz":-330,"elapsed":1428,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"3f4bc06c-6427-45f9-b424-927860972fda"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     21:35:55\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.495762\n","Nobs:                     722.000    HQIC:                  0.472382\n","Log likelihood:          -2208.17    FPE:                    1.58041\n","AIC:                     0.457684    Det(Omega_mle):         1.56736\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                   -0.067154         0.066068           -1.016           0.309\n","L1.return               -0.023131         0.037321           -0.620           0.535\n","L1.negative tone         0.072515         0.078414            0.925           0.355\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.336689         0.031332           10.746           0.000\n","L1.return               -0.019945         0.017699           -1.127           0.260\n","L1.negative tone        -0.003111         0.037187           -0.084           0.933\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000       0.009767\n","negative tone    0.009767       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623357821,"user_tz":-330,"elapsed":1471,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a4d5fac9-b08c-4f7e-8df7-c40795bf1ab8"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 1.99\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623360452,"user_tz":-330,"elapsed":1673,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2bb7c2ce-8510-4606-c829-0b9ba191471f"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-2.45,  0.  ]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609623363025,"user_tz":-330,"elapsed":1622,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"ad2a09d0-57a1-4730-dc90-92ff52e4e67b"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.010483</td>\n","      <td>0.385553</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.038954</td>\n","      <td>0.335698</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.041910</td>\n","      <td>0.336421</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.041789</td>\n","      <td>0.336478</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>-0.041788</td>\n","      <td>0.336475</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.010483       0.385553\n","2019-12-28 -0.038954       0.335698\n","2019-12-29 -0.041910       0.336421\n","2019-12-30 -0.041789       0.336478\n","2019-12-31 -0.041788       0.336475"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609623365862,"user_tz":-330,"elapsed":1652,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d369c55d-99fe-4b57-ba1b-e07a4231a085"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  0.195\n","mae :  0.5483\n","mpe :  -inf\n","rmse :  0.8985\n","corr :  0.5757\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.3461\n","mae :  0.3461\n","mpe :  inf\n","rmse :  0.3467\n","corr :  nan\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py:2559: RuntimeWarning: invalid value encountered in true_divide\n","  c /= stddev[:, None]\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py:2560: RuntimeWarning: invalid value encountered in true_divide\n","  c /= stddev[None, :]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}