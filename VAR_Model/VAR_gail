{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_gail","provenance":[{"file_id":"1GyTEhpqznBiD-raPPyZLWOwlOKPxUtCO","timestamp":1609622856763},{"file_id":"1pUiM9tW9TFJRP1OYgN70yjgjOqrHZXni","timestamp":1609621491864},{"file_id":"1Jrk01wRDu2zRJjdoaEhwD3uix_8qhLrA","timestamp":1609620869825},{"file_id":"1Ph7hHF7qdnMhnykYIFGrqCRof9ROi1tw","timestamp":1609620694974},{"file_id":"1_oyB9Egec5xpaQlpCBmPMYFTPeHcvTsr","timestamp":1609620348596},{"file_id":"1JyhHyr6VXUT9WRJpq47RknOPQCZ3MuV6","timestamp":1609619744263},{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609619203614},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1nipjSNmNAf8NSqeTnn2D2szwu9dGzE_Y","authorship_tag":"ABX9TyMCSVJQrrEaQJzzCVNcM48t"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623015841,"user_tz":-330,"elapsed":2489,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"3c129644-fe3f-4397-f7ca-0139a6e74523"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609623020243,"user_tz":-330,"elapsed":3698,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"41bf07dd-4b24-4c66-8cac-ffd0b66af2ea"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_GAIL.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_gail.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.86</td>\n","      <td>0.48</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.86</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>1.35</td>\n","      <td>0.50</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>-0.46</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-1.16</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.59</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-2.05</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.00\n","2018-01-02   -0.86           0.48\n","2018-01-03   -0.86           0.00\n","2018-01-04    1.35           0.50\n","2018-01-05   -0.46           0.74\n","...            ...            ...\n","2019-12-27   -1.16           0.00\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.59\n","2019-12-30   -2.05           0.00\n","2019-12-31    0.00           0.00\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609623083139,"user_tz":-330,"elapsed":61508,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e1a88e44-b5c0-4292-a38f-b8905155925a"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609623093573,"user_tz":-330,"elapsed":1908,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5c940e5b-f2a9-4176-8905-debee5ba94c8"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.0944</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.1119</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.0944\n","negative tone_y    0.1119           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vmAuQ_5Qzpdn"},"source":["# Results from Granger Casuality test can be read as : negative tone causes return(10% significance), return do not causes negative tone significantly.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623152025,"user_tz":-330,"elapsed":928,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4f5e07e8-67b6-4f03-9560-7b97f4205867"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623157467,"user_tz":-330,"elapsed":1628,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"076eadd0-06b0-45a0-adeb-d1657f4eeff7"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -27.0153\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -23.5859\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623161057,"user_tz":-330,"elapsed":1673,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c26d6d3f-b271-40c3-9ce5-19dde86ca316"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.5177963654903258\n","BIC :  0.5558741367276624\n","FPE :  1.6783253170286259\n","HQIC:  0.532494578285673 \n","\n","Lag Order = 2\n","AIC :  0.529197146299743\n","BIC :  0.5927288957766494\n","FPE :  1.6975696168142422\n","HQIC:  0.5537223023037949 \n","\n","Lag Order = 3\n","AIC :  0.5374164999754566\n","BIC :  0.6264574957645419\n","FPE :  1.7115813774902093\n","HQIC:  0.5717912032480376 \n","\n","Lag Order = 4\n","AIC :  0.5425987066817459\n","BIC :  0.6572044152199641\n","FPE :  1.7204765595855789\n","HQIC:  0.5868456443059451 \n","\n","Lag Order = 5\n","AIC :  0.5546053767045017\n","BIC :  0.6948314637784028\n","FPE :  1.7412620595377988\n","HQIC:  0.6087473192036099 \n","\n","Lag Order = 6\n","AIC :  0.5621991799492659\n","BIC :  0.7281015116864907\n","FPE :  1.754540727022341\n","HQIC:  0.6262589817063673 \n","\n","Lag Order = 7\n","AIC :  0.563631201994472\n","BIC :  0.7552658458615382\n","FPE :  1.7570626478977016\n","HQIC:  0.6376318016747091 \n","\n","Lag Order = 8\n","AIC :  0.5590905012898675\n","BIC :  0.7765137270962958\n","FPE :  1.7491123463317346\n","HQIC:  0.6430549222654028 \n","\n","Lag Order = 9\n","AIC :  0.565318526945341\n","BIC :  0.8085868078541705\n","FPE :  1.760052542958701\n","HQIC:  0.659269877723034 \n","\n","Lag Order = 10\n","AIC :  0.5741746756571124\n","BIC :  0.8433446892018537\n","FPE :  1.7757249461980225\n","HQIC:  0.6781361503089333 \n","\n","Lag Order = 11\n","AIC :  0.5830065380204468\n","BIC :  0.8781351671285238\n","FPE :  1.7914968711656536\n","HQIC:  0.6970014166166486 \n","\n","Lag Order = 12\n","AIC :  0.5861265653619128\n","BIC :  0.9072708993846442\n","FPE :  1.797118540276818\n","HQIC:  0.7101782144069844 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    1.41           1.52\n","2019-12-24    0.71           0.62\n","2019-12-25    0.00           0.00\n","2019-12-26    1.17           0.44\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609623163322,"user_tz":-330,"elapsed":994,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"57fc35ff-b897-403b-c68f-a2a515e96089"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.5486</td>  <td>    0.5614*</td> <td>     1.731</td>  <td>    0.5535*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.5387*</td> <td>    0.5772</td>  <td>     1.714*</td> <td>    0.5536</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.5479</td>  <td>    0.6121</td>  <td>     1.730</td>  <td>    0.5727</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.5546</td>  <td>    0.6446</td>  <td>     1.741</td>  <td>    0.5894</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.5580</td>  <td>    0.6736</td>  <td>     1.747</td>  <td>    0.6026</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.5675</td>  <td>    0.7088</td>  <td>     1.764</td>  <td>    0.6221</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.5731</td>  <td>    0.7401</td>  <td>     1.774</td>  <td>    0.6376</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.5726</td>  <td>    0.7653</td>  <td>     1.773</td>  <td>    0.6471</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.5655</td>  <td>    0.7839</td>  <td>     1.760</td>  <td>    0.6499</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.5693</td>  <td>    0.8133</td>  <td>     1.767</td>  <td>    0.6635</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.5757</td>  <td>    0.8455</td>  <td>     1.779</td>  <td>    0.6799</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.5835</td>  <td>    0.8789</td>  <td>     1.792</td>  <td>    0.6976</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.5861</td>  <td>    0.9073</td>  <td>     1.797</td>  <td>    0.7102</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609623173565,"user_tz":-330,"elapsed":1610,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"8fcca08f-db7d-4883-c910-707c0506aff8"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     21:32:53\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.555874\n","Nobs:                     722.000    HQIC:                  0.532495\n","Log likelihood:          -2229.87    FPE:                    1.67833\n","AIC:                     0.517796    Det(Omega_mle):         1.66446\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                   -0.077082         0.074767           -1.031           0.303\n","L1.return               -0.006746         0.037300           -0.181           0.856\n","L1.negative tone         0.051650         0.072085            0.717           0.474\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.553631         0.038281           14.462           0.000\n","L1.return               -0.030831         0.019097           -1.614           0.106\n","L1.negative tone         0.127667         0.036908            3.459           0.001\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.020666\n","negative tone   -0.020666       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623175811,"user_tz":-330,"elapsed":996,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"96a3bdfc-df4e-43fc-8c61-8ac7ae985992"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623179442,"user_tz":-330,"elapsed":1663,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2cefff46-48ff-4696-f414-0cb386d8f9da"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[1.17, 0.44]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609623181694,"user_tz":-330,"elapsed":1042,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"073dabaa-d8f9-495e-c2f1-32e0604d5e16"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.062248</td>\n","      <td>0.573733</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.047029</td>\n","      <td>0.628797</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.044287</td>\n","      <td>0.635358</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.043967</td>\n","      <td>0.636111</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>-0.043930</td>\n","      <td>0.636197</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.062248       0.573733\n","2019-12-28 -0.047029       0.628797\n","2019-12-29 -0.044287       0.635358\n","2019-12-30 -0.043967       0.636111\n","2019-12-31 -0.043930       0.636197"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609623184320,"user_tz":-330,"elapsed":1180,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4bf6faf8-647c-44bb-c2b4-24da43678a31"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  0.5937\n","mae :  0.6478\n","mpe :  -inf\n","rmse :  1.0233\n","corr :  0.2479\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.504\n","mae :  0.504\n","mpe :  inf\n","rmse :  0.5543\n","corr :  0.2739\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}