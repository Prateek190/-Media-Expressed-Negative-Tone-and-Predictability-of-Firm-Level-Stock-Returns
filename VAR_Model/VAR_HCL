{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_HCL","provenance":[{"file_id":"1GyTEhpqznBiD-raPPyZLWOwlOKPxUtCO","timestamp":1609623067280},{"file_id":"1pUiM9tW9TFJRP1OYgN70yjgjOqrHZXni","timestamp":1609621491864},{"file_id":"1Jrk01wRDu2zRJjdoaEhwD3uix_8qhLrA","timestamp":1609620869825},{"file_id":"1Ph7hHF7qdnMhnykYIFGrqCRof9ROi1tw","timestamp":1609620694974},{"file_id":"1_oyB9Egec5xpaQlpCBmPMYFTPeHcvTsr","timestamp":1609620348596},{"file_id":"1JyhHyr6VXUT9WRJpq47RknOPQCZ3MuV6","timestamp":1609619744263},{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609619203614},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1VAD2qb6MU76jI0Eydu9Wh9_A7PfpSu0E","authorship_tag":"ABX9TyNW+uudU3WnJ1GSy/KFZgIu"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623614830,"user_tz":-330,"elapsed":3972,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4742c899-0414-4607-b458-990fa6441aa4"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609623620925,"user_tz":-330,"elapsed":5149,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"7695f888-db9c-43d8-e3da-c80ee32905b1"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_HCLTECH.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_hcl.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>1.37</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>1.60</td>\n","      <td>1.99</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>0.50</td>\n","      <td>0.68</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>-0.47</td>\n","      <td>1.75</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.78</td>\n","      <td>1.07</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>1.01</td>\n","      <td>3.28</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>1.25</td>\n","      <td>2.05</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.34</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           1.37\n","2018-01-02    1.60           1.99\n","2018-01-03    0.50           0.68\n","2018-01-04   -0.47           1.75\n","2018-01-05    0.78           1.07\n","...            ...            ...\n","2019-12-27    1.01           3.28\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30    1.25           2.05\n","2019-12-31    0.00           0.34\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609623683065,"user_tz":-330,"elapsed":60052,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b2336310-839d-45db-9eac-9aeb68cd5ae9"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609623703226,"user_tz":-330,"elapsed":1532,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"328b06ef-8042-4be5-d807-e630a8d5a751"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.0107</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0231</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.0107\n","negative tone_y    0.0231           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vmAuQ_5Qzpdn"},"source":["# Results from Granger Casuality test can be read as : Both negative tone causes return and return  causes negative tone at 5% significance.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623752558,"user_tz":-330,"elapsed":2620,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d7be6858-d618-4704-96f4-6c82928667b2"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623760349,"user_tz":-330,"elapsed":1423,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d5ae66a1-ea0e-4021-c6d1-37f69e054979"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -20.3218\n"," No. Lags Chosen       = 1\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -9.4045\n"," No. Lags Chosen       = 6\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623763729,"user_tz":-330,"elapsed":1380,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"019fffca-9e6b-4457-8be0-d42b3a4b7134"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.17434576241810068\n","BIC :  0.21242353365543717\n","FPE :  1.1904672273261476\n","HQIC:  0.1890439752134479 \n","\n","Lag Order = 2\n","AIC :  0.17775278191782895\n","BIC :  0.24128453139473532\n","FPE :  1.1945305065126435\n","HQIC:  0.2022779379218808 \n","\n","Lag Order = 3\n","AIC :  0.19022717354022353\n","BIC :  0.27926816932930887\n","FPE :  1.2095258204661155\n","HQIC:  0.22460187681280444 \n","\n","Lag Order = 4\n","AIC :  0.19189157796846057\n","BIC :  0.30649728650667873\n","FPE :  1.2115423208419787\n","HQIC:  0.23613851559265964 \n","\n","Lag Order = 5\n","AIC :  0.19388242682076953\n","BIC :  0.33410851389467056\n","FPE :  1.2139593673233846\n","HQIC:  0.24802436931987773 \n","\n","Lag Order = 6\n","AIC :  0.1898570522787498\n","BIC :  0.3557593840159745\n","FPE :  1.209086361183518\n","HQIC:  0.25391685403585107 \n","\n","Lag Order = 7\n","AIC :  0.17667845733020027\n","BIC :  0.3683131011972664\n","FPE :  1.1932619840789194\n","HQIC:  0.25067905701043736 \n","\n","Lag Order = 8\n","AIC :  0.18268765458504493\n","BIC :  0.40011088039147324\n","FPE :  1.200460918597375\n","HQIC:  0.26665207556058035 \n","\n","Lag Order = 9\n","AIC :  0.1860258080458636\n","BIC :  0.429294088954693\n","FPE :  1.2044836196171962\n","HQIC:  0.27997715882355656 \n","\n","Lag Order = 10\n","AIC :  0.18967126296970876\n","BIC :  0.4588412765144499\n","FPE :  1.2088933414291876\n","HQIC:  0.2936327376215295 \n","\n","Lag Order = 11\n","AIC :  0.19671263870354383\n","BIC :  0.49184126781162096\n","FPE :  1.2174489098791221\n","HQIC:  0.31070751729974566 \n","\n","Lag Order = 12\n","AIC :  0.2003280085870139\n","BIC :  0.5214723426097454\n","FPE :  1.2218743283494125\n","HQIC:  0.32437965763208554 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23   -1.37           0.00\n","2019-12-24    1.27           0.98\n","2019-12-25    0.00           0.00\n","2019-12-26    1.67           1.65\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609623766205,"user_tz":-330,"elapsed":1012,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2c012377-f4dc-49fc-996d-736671e28e59"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.1777</td>  <td>    0.1905*</td> <td>     1.194</td>  <td>    0.1826*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.1747*</td> <td>    0.2132</td>  <td>     1.191*</td> <td>    0.1896</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.1806</td>  <td>    0.2448</td>  <td>     1.198</td>  <td>    0.2054</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.1907</td>  <td>    0.2806</td>  <td>     1.210</td>  <td>    0.2255</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.1916</td>  <td>    0.3072</td>  <td>     1.211</td>  <td>    0.2363</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.1892</td>  <td>    0.3305</td>  <td>     1.208</td>  <td>    0.2438</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.1826</td>  <td>    0.3496</td>  <td>     1.200</td>  <td>    0.2471</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.1794</td>  <td>    0.3721</td>  <td>     1.197</td>  <td>    0.2539</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.1832</td>  <td>    0.4015</td>  <td>     1.201</td>  <td>    0.2675</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.1860</td>  <td>    0.4300</td>  <td>     1.204</td>  <td>    0.2802</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.1933</td>  <td>    0.4631</td>  <td>     1.213</td>  <td>    0.2975</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.1987</td>  <td>    0.4942</td>  <td>     1.220</td>  <td>    0.3128</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.2003</td>  <td>    0.5215</td>  <td>     1.222</td>  <td>    0.3244</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609623772271,"user_tz":-330,"elapsed":1535,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"ebece8e8-34d9-4d4b-d4a6-32ca12c139ad"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     21:42:52\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.212424\n","Nobs:                     722.000    HQIC:                  0.189044\n","Log likelihood:          -2105.89    FPE:                    1.19047\n","AIC:                     0.174346    Det(Omega_mle):         1.18064\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.099583         0.064607            1.541           0.123\n","L1.return               -0.014155         0.037285           -0.380           0.704\n","L1.negative tone        -0.079986         0.059021           -1.355           0.175\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.677510         0.040621           16.679           0.000\n","L1.return               -0.055768         0.023443           -2.379           0.017\n","L1.negative tone         0.054983         0.037109            1.482           0.138\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.008482\n","negative tone   -0.008482       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623774816,"user_tz":-330,"elapsed":1572,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"aa976547-4baf-4d4c-d490-5b315d2d5b65"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609623777411,"user_tz":-330,"elapsed":1544,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"7e2ee8be-3497-44f8-f48c-760b23bcdfdb"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[1.67, 1.65]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609623779986,"user_tz":-330,"elapsed":1752,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"156d1b50-4fb4-4d8b-a90a-2aaf0b8f1499"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.056033</td>\n","      <td>0.675101</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.046377</td>\n","      <td>0.717754</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.041516</td>\n","      <td>0.714388</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.041854</td>\n","      <td>0.714474</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.041842</td>\n","      <td>0.714460</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.056033       0.675101\n","2019-12-28  0.046377       0.717754\n","2019-12-29  0.041516       0.714388\n","2019-12-30  0.041854       0.714474\n","2019-12-31  0.041842       0.714460"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609623782447,"user_tz":-330,"elapsed":1069,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"704ef4ce-3938-42a2-880c-b5d7b68242af"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.4289\n","mae :  0.4808\n","mpe :  inf\n","rmse :  0.7213\n","corr :  -0.5106\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  -0.4268\n","mae :  1.1494\n","mpe :  inf\n","rmse :  1.3953\n","corr :  -0.8313\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}