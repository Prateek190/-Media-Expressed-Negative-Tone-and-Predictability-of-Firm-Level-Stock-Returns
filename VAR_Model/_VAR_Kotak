{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" VAR_Kotak","provenance":[{"file_id":"1h9SvZXO5XCLw7d-G_y9XQoMeAn0ybyhl","timestamp":1610970141979},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554880495},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1qBsVh5mQCYuTyvpkvLeqNjwvqiLI4Drn","authorship_tag":"ABX9TyOzYfW7Kq8hNMbTTCexBdLa"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970323550,"user_tz":-330,"elapsed":3187,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"297d35e6-13c7-42ec-b5f7-0161cd81e042"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610970329432,"user_tz":-330,"elapsed":5036,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"25658dad-ba32-4653-a973-9eadc0a76bf9"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_KOTAKBANK.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_kotak.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>1.59</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>0.33</td>\n","      <td>1.73</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.31</td>\n","      <td>0.29</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.03</td>\n","      <td>0.26</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.26</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.55</td>\n","      <td>0.91</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>1.60</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.64</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>2.31</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           1.59\n","2018-01-02    0.33           1.73\n","2018-01-03   -0.31           0.29\n","2018-01-04    0.03           0.26\n","2018-01-05    0.26           0.00\n","...            ...            ...\n","2019-12-27    0.55           0.91\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           1.60\n","2019-12-30    0.64           0.00\n","2019-12-31    0.00           2.31\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610970390361,"user_tz":-330,"elapsed":59985,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"31fee438-673b-45b1-f673-4da45fcf661a"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610970486438,"user_tz":-330,"elapsed":1748,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a78d5d56-7695-4449-baba-64e9253b851d"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.000</td>\n","      <td>0.4153</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.192</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y            1.000           0.4153\n","negative tone_y     0.192           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"gaNZFZYmb-DQ","executionInfo":{"status":"ok","timestamp":1610972759724,"user_tz":-330,"elapsed":2332,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as : Both negative tone do not causes return and return do not causes negative tone significantly.\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970492170,"user_tz":-330,"elapsed":1135,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4486f991-000e-4af2-c297-59a9e137233a"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970498548,"user_tz":-330,"elapsed":2332,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d9dd47fb-7d8f-490f-d82f-1a7afc175933"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -30.9264\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -5.5541\n"," No. Lags Chosen       = 14\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970502784,"user_tz":-330,"elapsed":3294,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b6f6d04d-1a94-47c5-8f7b-bee23db69021"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.3064166002470661\n","BIC :  0.34449437148440254\n","FPE :  1.3585482901197665\n","HQIC:  0.3211148130424133 \n","\n","Lag Order = 2\n","AIC :  0.307936090302977\n","BIC :  0.37146783977988335\n","FPE :  1.3606146347769796\n","HQIC:  0.33246124630702883 \n","\n","Lag Order = 3\n","AIC :  0.3154586691905099\n","BIC :  0.4044996649795952\n","FPE :  1.3708896306617686\n","HQIC:  0.3498333724630909 \n","\n","Lag Order = 4\n","AIC :  0.31621861402765783\n","BIC :  0.430824322565876\n","FPE :  1.3719337340242177\n","HQIC:  0.3604655516518569 \n","\n","Lag Order = 5\n","AIC :  0.326996273321535\n","BIC :  0.467222360395436\n","FPE :  1.3868029589761866\n","HQIC:  0.3811382158206432 \n","\n","Lag Order = 6\n","AIC :  0.3274179093108266\n","BIC :  0.4933202410480514\n","FPE :  1.3873921834910419\n","HQIC:  0.3914777110679279 \n","\n","Lag Order = 7\n","AIC :  0.31530559247757123\n","BIC :  0.5069402363446374\n","FPE :  1.3706949242678015\n","HQIC:  0.3893061921578083 \n","\n","Lag Order = 8\n","AIC :  0.32133754108411583\n","BIC :  0.5387607668905441\n","FPE :  1.3789956831381796\n","HQIC:  0.4053019620596512 \n","\n","Lag Order = 9\n","AIC :  0.33080036776745947\n","BIC :  0.5740686486762889\n","FPE :  1.3921168514279199\n","HQIC:  0.4247517185451525 \n","\n","Lag Order = 10\n","AIC :  0.33834070364236574\n","BIC :  0.6075107171871068\n","FPE :  1.402666107223949\n","HQIC:  0.4423021782941865 \n","\n","Lag Order = 11\n","AIC :  0.34347194256626146\n","BIC :  0.6386005716743386\n","FPE :  1.4098973718492709\n","HQIC:  0.4574668211624633 \n","\n","Lag Order = 12\n","AIC :  0.3538816558381557\n","BIC :  0.6750259898608871\n","FPE :  1.424669221844637\n","HQIC:  0.4779333048832273 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    1.72           0.00\n","2019-12-24   -1.33           0.00\n","2019-12-25    0.00           0.00\n","2019-12-26    0.66           0.11\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610970502787,"user_tz":-330,"elapsed":3009,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"ca748f45-bee8-4c83-95d8-01db0b198d72"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.3273</td>  <td>    0.3402*</td> <td>     1.387</td>  <td>    0.3323</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.3172</td>  <td>    0.3558</td>  <td>     1.373</td>  <td>    0.3321*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.3162*</td> <td>    0.3804</td>  <td>     1.372*</td> <td>    0.3410</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.3225</td>  <td>    0.4124</td>  <td>     1.381</td>  <td>    0.3572</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.3219</td>  <td>    0.4375</td>  <td>     1.380</td>  <td>    0.3665</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.3319</td>  <td>    0.4732</td>  <td>     1.394</td>  <td>    0.3864</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.3363</td>  <td>    0.5033</td>  <td>     1.400</td>  <td>    0.4008</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.3222</td>  <td>    0.5149</td>  <td>     1.380</td>  <td>    0.3967</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.3258</td>  <td>    0.5442</td>  <td>     1.385</td>  <td>    0.4102</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.3324</td>  <td>    0.5764</td>  <td>     1.394</td>  <td>    0.4266</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.3401</td>  <td>    0.6099</td>  <td>     1.405</td>  <td>    0.4443</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.3442</td>  <td>    0.6397</td>  <td>     1.411</td>  <td>    0.4584</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.3539</td>  <td>    0.6750</td>  <td>     1.425</td>  <td>    0.4779</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610970515315,"user_tz":-330,"elapsed":1847,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5312259e-7f32-462a-fe85-c48c54bc087c"},"source":["model_fitted = model.fit(2)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Mon, 18, Jan, 2021\n","Time:                     11:48:31\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.371468\n","Nobs:                     721.000    HQIC:                  0.332461\n","Log likelihood:          -2147.12    FPE:                    1.36061\n","AIC:                     0.307936    Det(Omega_mle):         1.34194\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.162401         0.091023            1.784           0.074\n","L1.return               -0.146287         0.037367           -3.915           0.000\n","L1.negative tone        -0.029231         0.047392           -0.617           0.537\n","L2.return               -0.029586         0.037373           -0.792           0.429\n","L2.negative tone        -0.027195         0.047427           -0.573           0.566\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    1.082056         0.071475           15.139           0.000\n","L1.return               -0.024236         0.029342           -0.826           0.409\n","L1.negative tone        -0.008193         0.037214           -0.220           0.826\n","L2.return               -0.045455         0.029347           -1.549           0.121\n","L2.negative tone         0.082969         0.037242            2.228           0.026\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.029841\n","negative tone   -0.029841       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970520921,"user_tz":-330,"elapsed":1238,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d3a753e5-0ae4-42d0-b084-57c31a6c14c6"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970524471,"user_tz":-330,"elapsed":1875,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"16074270-c626-41c3-9b6b-6683129b0240"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[0.  , 0.  ],\n","       [0.66, 0.11]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610970527957,"user_tz":-330,"elapsed":1713,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d5210d7a-7700-4ccb-e07c-9bdebad28130"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.062636</td>\n","      <td>1.065160</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.099585</td>\n","      <td>1.050938</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.086293</td>\n","      <td>1.156560</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.084444</td>\n","      <td>1.153158</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.082335</td>\n","      <td>1.162598</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.062636       1.065160\n","2019-12-28  0.099585       1.050938\n","2019-12-29  0.086293       1.156560\n","2019-12-30  0.084444       1.153158\n","2019-12-31  0.082335       1.162598"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610970531216,"user_tz":-330,"elapsed":1338,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"3e6ac01f-5c85-44b5-a409-4bfdb0e82960"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.1549\n","mae :  0.2622\n","mpe :  inf\n","rmse :  0.3377\n","corr :  -0.5958\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.1537\n","mae :  0.79\n","mpe :  inf\n","rmse :  0.8912\n","corr :  0.5342\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}