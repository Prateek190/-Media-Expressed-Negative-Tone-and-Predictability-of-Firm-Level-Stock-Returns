{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_ITC","provenance":[{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554880495},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1h9SvZXO5XCLw7d-G_y9XQoMeAn0ybyhl","authorship_tag":"ABX9TyPHgVILUV0L3+Lxdbaul2vr"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555398968,"user_tz":-330,"elapsed":2465,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"f2dca22b-6ee2-47b6-981e-8a1fc8cb8347"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610555406130,"user_tz":-330,"elapsed":6540,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"27464f07-642e-42e4-9dac-7325d33d5d0f"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_ITC.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_itc.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.94</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.59</td>\n","      <td>1.63</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>0.15</td>\n","      <td>1.88</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.15</td>\n","      <td>0.28</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.52</td>\n","      <td>0.48</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>1.75</td>\n","      <td>0.10</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.98</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>1.60</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>1.70</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.90</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.94\n","2018-01-02   -0.59           1.63\n","2018-01-03    0.15           1.88\n","2018-01-04    0.15           0.28\n","2018-01-05    0.52           0.48\n","...            ...            ...\n","2019-12-27    1.75           0.10\n","2019-12-28    0.00           0.98\n","2019-12-29    0.00           1.60\n","2019-12-30    1.70           0.71\n","2019-12-31    0.00           0.90\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610555467310,"user_tz":-330,"elapsed":60155,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"182dcc35-65d2-4494-d421-06feb19b0fd1"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610555473125,"user_tz":-330,"elapsed":2231,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4206051a-6d68-40a5-cfe1-bc1cc8ee5e4c"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.1352</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.1336</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.1352\n","negative tone_y    0.1336           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj","executionInfo":{"status":"ok","timestamp":1610971973293,"user_tz":-330,"elapsed":2689,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as :Both negative tone do not causes return and return do not causes negative tone significantly.\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555484030,"user_tz":-330,"elapsed":3054,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"ec3ab684-6efd-478d-e236-b91b9ca56d17"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555489337,"user_tz":-330,"elapsed":1812,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a0263392-7094-4d17-8287-c18333e31c5b"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -27.7851\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -25.2677\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555492022,"user_tz":-330,"elapsed":1333,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c479dae5-cf4a-4cba-cbf2-06eb17598879"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  -0.04916065607803507\n","BIC :  -0.011082884840698567\n","FPE :  0.9520282593637326\n","HQIC:  -0.034462443282687855 \n","\n","Lag Order = 2\n","AIC :  -0.036791868757944574\n","BIC :  0.0267398807189618\n","FPE :  0.9638771559586338\n","HQIC:  -0.012266712753892711 \n","\n","Lag Order = 3\n","AIC :  -0.034091235298402564\n","BIC :  0.054949760490682745\n","FPE :  0.9664845075011821\n","HQIC:  0.0002834679741783447 \n","\n","Lag Order = 4\n","AIC :  -0.028713497934416077\n","BIC :  0.08589221060380207\n","FPE :  0.9716973584330303\n","HQIC:  0.015533439689783005 \n","\n","Lag Order = 5\n","AIC :  -0.019271653550740432\n","BIC :  0.12095443352316058\n","FPE :  0.9809175612471184\n","HQIC:  0.03487028894836776 \n","\n","Lag Order = 6\n","AIC :  -0.010487034326841421\n","BIC :  0.15541529741038332\n","FPE :  0.9895756287216201\n","HQIC:  0.05357276743025985 \n","\n","Lag Order = 7\n","AIC :  -0.021670095039945075\n","BIC :  0.1699645488271211\n","FPE :  0.978575014543259\n","HQIC:  0.052330504640292 \n","\n","Lag Order = 8\n","AIC :  -0.013379924754572947\n","BIC :  0.20404330105185536\n","FPE :  0.9867268777360507\n","HQIC:  0.07058449622096245 \n","\n","Lag Order = 9\n","AIC :  -0.01207049159690056\n","BIC :  0.23119778931192886\n","FPE :  0.988026898913435\n","HQIC:  0.08188085918079244 \n","\n","Lag Order = 10\n","AIC :  -0.00942897510096613\n","BIC :  0.259741038443775\n","FPE :  0.9906491032873211\n","HQIC:  0.0945324995508546 \n","\n","Lag Order = 11\n","AIC :  0.001887451444904431\n","BIC :  0.29701608055298157\n","FPE :  1.0019342930330775\n","HQIC:  0.11588233004110629 \n","\n","Lag Order = 12\n","AIC :  0.01207872650011027\n","BIC :  0.3332230605228417\n","FPE :  1.0122106814165386\n","HQIC:  0.1361303755451819 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    0.40           1.56\n","2019-12-24    1.28           1.12\n","2019-12-25    0.00           1.02\n","2019-12-26   -1.95           0.47\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610555494811,"user_tz":-330,"elapsed":1769,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"0e61f516-388c-4997-876e-32e8774fce46"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>  -0.04197*</td> <td>  -0.02912*</td> <td>    0.9589*</td> <td>  -0.03701*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>  -0.03702</td>  <td>  0.001513</td>  <td>    0.9637</td>  <td>  -0.02214</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>  -0.02643</td>  <td>   0.03779</td>  <td>    0.9739</td>  <td> -0.001624</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>  -0.02514</td>  <td>   0.06478</td>  <td>    0.9752</td>  <td>  0.009594</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>  -0.02111</td>  <td>   0.09450</td>  <td>    0.9791</td>  <td>   0.02355</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>  -0.01360</td>  <td>    0.1277</td>  <td>    0.9865</td>  <td>   0.04098</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td> -0.005268</td>  <td>    0.1617</td>  <td>    0.9948</td>  <td>   0.05924</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>  -0.01912</td>  <td>    0.1736</td>  <td>    0.9811</td>  <td>   0.05531</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>  -0.01194</td>  <td>    0.2064</td>  <td>    0.9882</td>  <td>   0.07242</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td> -0.008926</td>  <td>    0.2351</td>  <td>    0.9911</td>  <td>   0.08535</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td> -0.006955</td>  <td>    0.2628</td>  <td>    0.9931</td>  <td>   0.09725</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>  0.003259</td>  <td>    0.2987</td>  <td>     1.003</td>  <td>    0.1174</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>   0.01208</td>  <td>    0.3332</td>  <td>     1.012</td>  <td>    0.1361</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609617749718,"user_tz":-330,"elapsed":1758,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"1deca234-4c3b-4814-a6b5-23fd144c4017"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     20:02:29\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.378568\n","Nobs:                     722.000    HQIC:                  0.355188\n","Log likelihood:          -2165.86    FPE:                    1.40564\n","AIC:                     0.340490    Det(Omega_mle):         1.39403\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.090400         0.054126            1.670           0.095\n","L1.return               -0.063224         0.037221           -1.699           0.089\n","L1.negative tone        -0.028743         0.043380           -0.663           0.508\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.674675         0.046369           14.550           0.000\n","L1.return               -0.015057         0.031886           -0.472           0.637\n","L1.negative tone         0.082046         0.037163            2.208           0.027\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.005586\n","negative tone   -0.005586       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609617752604,"user_tz":-330,"elapsed":2086,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4aaf4ac2-1070-44cf-fb30-bf68141d1455"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.01\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609617755200,"user_tz":-330,"elapsed":1617,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"679b9dc7-25c5-4d4a-8bc4-0e04aa973b2b"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-0.72,  0.  ]])"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609617758055,"user_tz":-330,"elapsed":1847,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"242dd688-a219-459e-8804-fcc67a667fbd"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.135921</td>\n","      <td>0.685516</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.062102</td>\n","      <td>0.728872</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.065523</td>\n","      <td>0.733541</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.065173</td>\n","      <td>0.733872</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.065185</td>\n","      <td>0.733905</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.135921       0.685516\n","2019-12-28  0.062102       0.728872\n","2019-12-29  0.065523       0.733541\n","2019-12-30  0.065173       0.733872\n","2019-12-31  0.065185       0.733905"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609617786525,"user_tz":-330,"elapsed":1822,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"38cf157d-d418-485b-80f9-30177488cf9c"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.4612\n","mae :  0.5383\n","mpe :  inf\n","rmse :  0.8714\n","corr :  0.1932\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.7231\n","mae :  0.7231\n","mpe :  inf\n","rmse :  0.7234\n","corr :  nan\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py:2559: RuntimeWarning: invalid value encountered in true_divide\n","  c /= stddev[:, None]\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py:2560: RuntimeWarning: invalid value encountered in true_divide\n","  c /= stddev[None, :]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}