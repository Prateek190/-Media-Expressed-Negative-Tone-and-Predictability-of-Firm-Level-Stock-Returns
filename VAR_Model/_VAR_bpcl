{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" VAR_bpcl","provenance":[{"file_id":"1_oyB9Egec5xpaQlpCBmPMYFTPeHcvTsr","timestamp":1609620348596},{"file_id":"1JyhHyr6VXUT9WRJpq47RknOPQCZ3MuV6","timestamp":1609619744263},{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609619203614},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1Ph7hHF7qdnMhnykYIFGrqCRof9ROi1tw","authorship_tag":"ABX9TyPgAZ4rpeRGn/INkpBd+fEr"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620431558,"user_tz":-330,"elapsed":2506,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"72957eda-0c62-4e64-aedf-39062120241a"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609620449330,"user_tz":-330,"elapsed":2437,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"61b91adc-f6ac-4723-a46d-1565045657d6"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_BPCL.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_bpcl.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>1.76</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-1.73</td>\n","      <td>1.04</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.98</td>\n","      <td>1.20</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>-0.69</td>\n","      <td>0.43</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>-0.77</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.82</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>1.66</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>1.29</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-1.37</td>\n","      <td>0.34</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.17</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           1.76\n","2018-01-02   -1.73           1.04\n","2018-01-03   -0.98           1.20\n","2018-01-04   -0.69           0.43\n","2018-01-05   -0.77           0.00\n","...            ...            ...\n","2019-12-27    0.82           0.71\n","2019-12-28    0.00           1.66\n","2019-12-29    0.00           1.29\n","2019-12-30   -1.37           0.34\n","2019-12-31    0.00           0.17\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609620511063,"user_tz":-330,"elapsed":59469,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"ed1c2837-fc07-498a-bcb1-f7e61128e9ce"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609620563083,"user_tz":-330,"elapsed":1471,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"60337565-117b-4874-ab75-24fc3d8e2da3"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.000</td>\n","      <td>0.1504</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.063</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y            1.000           0.1504\n","negative tone_y     0.063           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vmAuQ_5Qzpdn"},"source":["# Results from Granger Casuality test can be read as : negative tone do not causes return significantly , return causes negative tone(10% significance).\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620647554,"user_tz":-330,"elapsed":1199,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"10389dca-98c9-47b7-b47f-7a7e0943d6a8"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620652271,"user_tz":-330,"elapsed":955,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"89d51ff4-ea5a-488a-cf02-3f6853c197e5"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -24.336\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -5.9244\n"," No. Lags Chosen       = 9\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620654914,"user_tz":-330,"elapsed":1018,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"df7a2ffd-8a4f-41c0-9775-c861b2031fef"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  1.5780448287918987\n","BIC :  1.616122600029235\n","FPE :  4.845473278360932\n","HQIC:  1.592743041587246 \n","\n","Lag Order = 2\n","AIC :  1.582405908640145\n","BIC :  1.6459376581170513\n","FPE :  4.8666526179928855\n","HQIC:  1.6069310646441968 \n","\n","Lag Order = 3\n","AIC :  1.5950462898633482\n","BIC :  1.6840872856524334\n","FPE :  4.928563248287679\n","HQIC:  1.629420993135929 \n","\n","Lag Order = 4\n","AIC :  1.601807145429474\n","BIC :  1.7164128539676922\n","FPE :  4.962004344001212\n","HQIC:  1.6460540830536732 \n","\n","Lag Order = 5\n","AIC :  1.611290753387902\n","BIC :  1.751516840461803\n","FPE :  5.00929681302752\n","HQIC:  1.6654326958870103 \n","\n","Lag Order = 6\n","AIC :  1.6142970680841067\n","BIC :  1.7801993998213315\n","FPE :  5.024394839790575\n","HQIC:  1.678356869841208 \n","\n","Lag Order = 7\n","AIC :  1.6012802010960565\n","BIC :  1.7929148449631227\n","FPE :  4.959438178437144\n","HQIC:  1.6752808007762936 \n","\n","Lag Order = 8\n","AIC :  1.6077134760394072\n","BIC :  1.8251367018458353\n","FPE :  4.991474730785125\n","HQIC:  1.6916778970149424 \n","\n","Lag Order = 9\n","AIC :  1.6146263707337836\n","BIC :  1.857894651642613\n","FPE :  5.026136041715432\n","HQIC:  1.7085777215114766 \n","\n","Lag Order = 10\n","AIC :  1.6221549386508438\n","BIC :  1.891324952195585\n","FPE :  5.064163762743639\n","HQIC:  1.7261164133026647 \n","\n","Lag Order = 11\n","AIC :  1.631928208317913\n","BIC :  1.9270568374259902\n","FPE :  5.113955532435302\n","HQIC:  1.745923086914115 \n","\n","Lag Order = 12\n","AIC :  1.6353151271207205\n","BIC :  1.956459461143452\n","FPE :  5.131372324393339\n","HQIC:  1.759366776165792 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    1.89           2.37\n","2019-12-24    1.02           0.00\n","2019-12-25    0.00           0.00\n","2019-12-26   -0.96           1.44\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609620657140,"user_tz":-330,"elapsed":1303,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2f45d109-b634-4507-d11d-69a6072c7f6c"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>     1.612</td>  <td>     1.625*</td> <td>     5.015</td>  <td>     1.617</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>     1.599*</td> <td>     1.637</td>  <td>     4.946*</td> <td>     1.614*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>     1.601</td>  <td>     1.666</td>  <td>     4.959</td>  <td>     1.626</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>     1.611</td>  <td>     1.701</td>  <td>     5.010</td>  <td>     1.646</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>     1.616</td>  <td>     1.732</td>  <td>     5.034</td>  <td>     1.661</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>     1.625</td>  <td>     1.767</td>  <td>     5.081</td>  <td>     1.680</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>     1.626</td>  <td>     1.793</td>  <td>     5.084</td>  <td>     1.691</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>     1.612</td>  <td>     1.804</td>  <td>     5.011</td>  <td>     1.686</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>     1.617</td>  <td>     1.835</td>  <td>     5.037</td>  <td>     1.701</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>     1.621</td>  <td>     1.865</td>  <td>     5.057</td>  <td>     1.715</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>     1.626</td>  <td>     1.896</td>  <td>     5.084</td>  <td>     1.730</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>     1.634</td>  <td>     1.930</td>  <td>     5.127</td>  <td>     1.749</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>     1.635</td>  <td>     1.956</td>  <td>     5.131</td>  <td>     1.759</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609620667841,"user_tz":-330,"elapsed":1413,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"00c2a6fb-340f-4ae5-dbc1-645cca361548"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     20:51:07\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                    1.61612\n","Nobs:                     722.000    HQIC:                   1.59274\n","Log likelihood:          -2612.62    FPE:                    4.84547\n","AIC:                      1.57804    Det(Omega_mle):         4.80546\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.159101         0.120888            1.316           0.188\n","L1.return                0.093389         0.037180            2.512           0.012\n","L1.negative tone        -0.099605         0.073059           -1.363           0.173\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    1.147872         0.061437           18.684           0.000\n","L1.return               -0.031739         0.018896           -1.680           0.093\n","L1.negative tone         0.096593         0.037130            2.602           0.009\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.064489\n","negative tone   -0.064489       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620671297,"user_tz":-330,"elapsed":2001,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9611fa1d-4e1a-4b62-dc27-9ad25b7b2edc"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 1.99\n","negative tone : 2.02\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620673939,"user_tz":-330,"elapsed":1028,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c9991071-a012-4ce3-b83f-ef98da6d6691"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-0.96,  1.44]])"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609620676256,"user_tz":-330,"elapsed":980,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"03deb181-5ec7-4208-c127-a49202b92f76"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.073985</td>\n","      <td>1.317436</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.020968</td>\n","      <td>1.277475</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.033816</td>\n","      <td>1.270602</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.035700</td>\n","      <td>1.269530</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.035983</td>\n","      <td>1.269367</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.073985       1.317436\n","2019-12-28  0.020968       1.277475\n","2019-12-29  0.033816       1.270602\n","2019-12-30  0.035700       1.269530\n","2019-12-31  0.035983       1.269367"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609620683076,"user_tz":-330,"elapsed":5222,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"96c452db-c5f3-4928-bb4b-1f1c411f8a31"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  0.1205\n","mae :  0.4781\n","mpe :  inf\n","rmse :  0.7454\n","corr :  -0.6907\n","\n","Forecast Accuracy of: negative tone\n","mape :  2.0604\n","me :  0.4469\n","mae :  0.6077\n","mpe :  1.9622\n","rmse :  0.7195\n","corr :  0.0234\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}