{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_britannia","provenance":[{"file_id":"1Ph7hHF7qdnMhnykYIFGrqCRof9ROi1tw","timestamp":1609620694974},{"file_id":"1_oyB9Egec5xpaQlpCBmPMYFTPeHcvTsr","timestamp":1609620348596},{"file_id":"1JyhHyr6VXUT9WRJpq47RknOPQCZ3MuV6","timestamp":1609619744263},{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609619203614},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1Jrk01wRDu2zRJjdoaEhwD3uix_8qhLrA","authorship_tag":"ABX9TyPpObLLanj66yQSRrEhCWFC"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609620821590,"user_tz":-330,"elapsed":3259,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"f2d665c8-0a0b-4a65-f224-97037bc03774"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609620831551,"user_tz":-330,"elapsed":4840,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"993a6725-9731-4bb9-b343-7b8f85b8824b"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_BRITANNIA.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_britannia.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.53</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-1.73</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>0.54</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>-1.17</td>\n","      <td>0.44</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.38</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.69</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.89</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.53\n","2018-01-02   -1.73           0.00\n","2018-01-03    0.54           0.00\n","2018-01-04   -1.17           0.44\n","2018-01-05    0.38           0.00\n","...            ...            ...\n","2019-12-27    0.69           0.00\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30    0.89           0.00\n","2019-12-31    0.00           0.00\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609620893774,"user_tz":-330,"elapsed":59600,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c4870e90-c33d-411c-9255-9a554227d079"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609620953170,"user_tz":-330,"elapsed":2515,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c65bd7b3-5942-46c6-d693-091db265cf8e"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.0798</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0238</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.0798\n","negative tone_y    0.0238           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vmAuQ_5Qzpdn"},"source":["# Results from Granger Casuality test can be read as : negative  causes return(10% significant) , return causes negative tone(5% significance).\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621001454,"user_tz":-330,"elapsed":1987,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e10cf605-69e0-4bc9-a0bd-cc174694672e"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621007252,"user_tz":-330,"elapsed":2234,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"de3aab5c-e86b-4773-823a-a801017e7c2b"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -26.3663\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -6.7704\n"," No. Lags Chosen       = 7\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621011034,"user_tz":-330,"elapsed":1808,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"151b3626-1a7a-4b77-8521-1eb6935583f7"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.1368989538407867\n","BIC :  0.1749767250781232\n","FPE :  1.1467123814809288\n","HQIC:  0.15159716663613393 \n","\n","Lag Order = 2\n","AIC :  0.13204110431035626\n","BIC :  0.19557285378726263\n","FPE :  1.141155732159979\n","HQIC:  0.15656626031440812 \n","\n","Lag Order = 3\n","AIC :  0.1400633654540249\n","BIC :  0.2291043612431102\n","FPE :  1.1503480983657421\n","HQIC:  0.1744380687266058 \n","\n","Lag Order = 4\n","AIC :  0.149719924342892\n","BIC :  0.2643256328811101\n","FPE :  1.1615119244941117\n","HQIC:  0.19396686196709106 \n","\n","Lag Order = 5\n","AIC :  0.15275062235010825\n","BIC :  0.2929767094240093\n","FPE :  1.1650399957298225\n","HQIC:  0.20689256484921645 \n","\n","Lag Order = 6\n","AIC :  0.15535987531145892\n","BIC :  0.3212622070486837\n","FPE :  1.1680875327580242\n","HQIC:  0.2194196770685602 \n","\n","Lag Order = 7\n","AIC :  0.14898216084592358\n","BIC :  0.3406168047129897\n","FPE :  1.160666516844165\n","HQIC:  0.22298276052616064 \n","\n","Lag Order = 8\n","AIC :  0.15394696016594095\n","BIC :  0.37137018597236926\n","FPE :  1.1664499290383317\n","HQIC:  0.23791138114147634 \n","\n","Lag Order = 9\n","AIC :  0.15965076692399932\n","BIC :  0.4029190478328287\n","FPE :  1.173130600721252\n","HQIC:  0.2536021177016923 \n","\n","Lag Order = 10\n","AIC :  0.17126357573051715\n","BIC :  0.4404335892752583\n","FPE :  1.1868439724412791\n","HQIC:  0.2752250503823379 \n","\n","Lag Order = 11\n","AIC :  0.1776117263835006\n","BIC :  0.4727403554915777\n","FPE :  1.1944152076669492\n","HQIC:  0.2916066049797025 \n","\n","Lag Order = 12\n","AIC :  0.1811368099477572\n","BIC :  0.5022811439704886\n","FPE :  1.19864867232479\n","HQIC:  0.3051884589928288 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    1.07           0.44\n","2019-12-24   -0.62           0.93\n","2019-12-25    0.00           0.00\n","2019-12-26   -0.11           0.45\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609621017459,"user_tz":-330,"elapsed":2135,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"efd00ed8-0e74-497d-8ec4-0182c3880301"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.1595</td>  <td>    0.1723*</td> <td>     1.173</td>  <td>    0.1644*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.1538</td>  <td>    0.1923</td>  <td>     1.166</td>  <td>    0.1687</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.1500*</td> <td>    0.2142</td>  <td>     1.162*</td> <td>    0.1748</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.1563</td>  <td>    0.2463</td>  <td>     1.169</td>  <td>    0.1911</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.1649</td>  <td>    0.2805</td>  <td>     1.179</td>  <td>    0.2095</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.1660</td>  <td>    0.3073</td>  <td>     1.181</td>  <td>    0.2206</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.1662</td>  <td>    0.3332</td>  <td>     1.181</td>  <td>    0.2307</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.1572</td>  <td>    0.3499</td>  <td>     1.170</td>  <td>    0.2316</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.1604</td>  <td>    0.3788</td>  <td>     1.174</td>  <td>    0.2448</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.1653</td>  <td>    0.4094</td>  <td>     1.180</td>  <td>    0.2596</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.1748</td>  <td>    0.4445</td>  <td>     1.191</td>  <td>    0.2790</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.1789</td>  <td>    0.4744</td>  <td>     1.196</td>  <td>    0.2931</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.1811</td>  <td>    0.5023</td>  <td>     1.199</td>  <td>    0.3052</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609621031851,"user_tz":-330,"elapsed":1892,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c9898214-1999-49db-9308-2bee83227abd"},"source":["model_fitted = model.fit(2)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     20:57:11\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.195573\n","Nobs:                     721.000    HQIC:                  0.156566\n","Log likelihood:          -2083.71    FPE:                    1.14116\n","AIC:                     0.132041    Det(Omega_mle):         1.12549\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.040568         0.061725            0.657           0.511\n","L1.return                0.016726         0.037383            0.447           0.655\n","L1.negative tone        -0.022982         0.052239           -0.440           0.660\n","L2.return               -0.002419         0.037482           -0.065           0.949\n","L2.negative tone         0.027432         0.052100            0.527           0.599\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.490656         0.043917           11.172           0.000\n","L1.return               -0.051168         0.026598           -1.924           0.054\n","L1.negative tone         0.086010         0.037168            2.314           0.021\n","L2.return               -0.050221         0.026668           -1.883           0.060\n","L2.negative tone         0.092099         0.037069            2.484           0.013\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.066689\n","negative tone   -0.066689       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621037539,"user_tz":-330,"elapsed":2034,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a3c89dba-e4b7-4a91-c3b9-a03377ab7b43"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621040202,"user_tz":-330,"elapsed":1437,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"7a0aa6f2-3dd6-4a85-e90f-b59764f7aea9"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[ 0.  ,  0.  ],\n","       [-0.11,  0.45]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609621043109,"user_tz":-330,"elapsed":1556,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c9b9fee6-92ce-40cf-f15a-88d00e085d7b"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.028387</td>\n","      <td>0.534989</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.041359</td>\n","      <td>0.582186</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.042488</td>\n","      <td>0.586459</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.043672</td>\n","      <td>0.590465</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.043714</td>\n","      <td>0.591085</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.028387       0.534989\n","2019-12-28  0.041359       0.582186\n","2019-12-29  0.042488       0.586459\n","2019-12-30  0.043672       0.590465\n","2019-12-31  0.043714       0.591085"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609621047443,"user_tz":-330,"elapsed":2057,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"32635fa6-6ec0-4022-fe84-a7403384cdf4"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.2761\n","mae :  0.3271\n","mpe :  inf\n","rmse :  0.4815\n","corr :  -0.4043\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.577\n","mae :  0.577\n","mpe :  inf\n","rmse :  0.5774\n","corr :  nan\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py:2559: RuntimeWarning: invalid value encountered in true_divide\n","  c /= stddev[:, None]\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py:2560: RuntimeWarning: invalid value encountered in true_divide\n","  c /= stddev[None, :]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}