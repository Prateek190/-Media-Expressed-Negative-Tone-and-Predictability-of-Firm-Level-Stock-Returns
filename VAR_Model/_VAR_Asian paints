{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" VAR_Asian paints","provenance":[{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"mount_file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","authorship_tag":"ABX9TyONwAsYIPZh05yVLmNLtRIx"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609617102780,"user_tz":-330,"elapsed":3557,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"094365e8-bfcb-4185-e782-8bfb5425655e"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609617108085,"user_tz":-330,"elapsed":4035,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"85a1aa17-ee80-4335-e426-0a3be1652e09"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_ASIANPAINT.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_asian paints.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.08</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.07</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>2.64</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>1.13</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.81</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>1.89</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00            0.0\n","2018-01-02   -0.08            0.0\n","2018-01-03   -0.07            0.0\n","2018-01-04    2.64            0.0\n","2018-01-05    1.13            0.0\n","...            ...            ...\n","2019-12-27    0.81            0.0\n","2019-12-28    0.00            0.0\n","2019-12-29    0.00            0.0\n","2019-12-30    1.89            0.0\n","2019-12-31    0.00            0.0\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609617872830,"user_tz":-330,"elapsed":64241,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d00863c6-a825-4f23-c615-a01770af74e3"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609617232246,"user_tz":-330,"elapsed":1843,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9f38ba20-eee6-4757-e6cd-6655e9edadc8"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.0462</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0944</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.0462\n","negative tone_y    0.0944           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj"},"source":["# Results from Granger Casuality test can be read as : negative tone causes return (5% significance) and return causes negative tone (10% significance).\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609617732425,"user_tz":-330,"elapsed":1834,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"79a5fc70-2296-4f38-a6ba-dab4e70312ec"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609617737891,"user_tz":-330,"elapsed":1525,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"f7a814be-6e5c-4f50-a1e3-2306f1c07c9d"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -28.5727\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -24.7115\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609617740812,"user_tz":-330,"elapsed":2049,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"0ad8a8fb-78b0-4787-88e9-e0143424a07f"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.340489815876164\n","BIC :  0.37856758711350047\n","FPE :  1.4056360592156898\n","HQIC:  0.3551880286715112 \n","\n","Lag Order = 2\n","AIC :  0.3427912539290938\n","BIC :  0.4063230034060002\n","FPE :  1.4088752606941222\n","HQIC:  0.3673164099331457 \n","\n","Lag Order = 3\n","AIC :  0.3545417014747392\n","BIC :  0.4435826972638245\n","FPE :  1.4255289343139053\n","HQIC:  0.38891640474732003 \n","\n","Lag Order = 4\n","AIC :  0.3587129897928672\n","BIC :  0.4733186983310853\n","FPE :  1.431489635305114\n","HQIC:  0.40295992741706627 \n","\n","Lag Order = 5\n","AIC :  0.3684763193828057\n","BIC :  0.5087024064567067\n","FPE :  1.4455373407616792\n","HQIC:  0.42261826188191387 \n","\n","Lag Order = 6\n","AIC :  0.36779526493551795\n","BIC :  0.5336975966727427\n","FPE :  1.4445577417592217\n","HQIC:  0.43185506669261925 \n","\n","Lag Order = 7\n","AIC :  0.37357569176733224\n","BIC :  0.5652103356343984\n","FPE :  1.4529383504132898\n","HQIC:  0.4475762914475693 \n","\n","Lag Order = 8\n","AIC :  0.36934156390612977\n","BIC :  0.5867647897125581\n","FPE :  1.446807624805556\n","HQIC:  0.4533059848816652 \n","\n","Lag Order = 9\n","AIC :  0.3801739775834249\n","BIC :  0.6234422584922543\n","FPE :  1.4625757785816118\n","HQIC:  0.47412532836111787 \n","\n","Lag Order = 10\n","AIC :  0.38285829768290197\n","BIC :  0.652028311227643\n","FPE :  1.4665201975545437\n","HQIC:  0.48681977233472273 \n","\n","Lag Order = 11\n","AIC :  0.38914019707277414\n","BIC :  0.6842688261808513\n","FPE :  1.475777796288105\n","HQIC:  0.503135075668976 \n","\n","Lag Order = 12\n","AIC :  0.39735166514349285\n","BIC :  0.7184959991662243\n","FPE :  1.487965381559765\n","HQIC:  0.5214033141885644 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    0.72           0.00\n","2019-12-24   -0.38           0.63\n","2019-12-25    0.00           1.08\n","2019-12-26   -0.72           0.00\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609617744004,"user_tz":-330,"elapsed":1715,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"dd59d5c2-7280-44b8-93c7-a66fac2f93ef"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.3520</td>  <td>    0.3649*</td> <td>     1.422</td>  <td>    0.3570*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.3519*</td> <td>    0.3904</td>  <td>     1.422*</td> <td>    0.3667</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.3529</td>  <td>    0.4171</td>  <td>     1.423</td>  <td>    0.3777</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.3627</td>  <td>    0.4526</td>  <td>     1.437</td>  <td>    0.3974</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.3709</td>  <td>    0.4865</td>  <td>     1.449</td>  <td>    0.4156</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.3799</td>  <td>    0.5212</td>  <td>     1.462</td>  <td>    0.4345</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.3760</td>  <td>    0.5430</td>  <td>     1.456</td>  <td>    0.4405</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.3792</td>  <td>    0.5719</td>  <td>     1.461</td>  <td>    0.4536</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.3731</td>  <td>    0.5915</td>  <td>     1.452</td>  <td>    0.4575</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.3820</td>  <td>    0.6261</td>  <td>     1.465</td>  <td>    0.4763</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.3864</td>  <td>    0.6562</td>  <td>     1.472</td>  <td>    0.4906</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.3911</td>  <td>    0.6866</td>  <td>     1.479</td>  <td>    0.5052</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.3974</td>  <td>    0.7185</td>  <td>     1.488</td>  <td>    0.5214</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609617749718,"user_tz":-330,"elapsed":1758,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"1deca234-4c3b-4814-a6b5-23fd144c4017"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     20:02:29\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.378568\n","Nobs:                     722.000    HQIC:                  0.355188\n","Log likelihood:          -2165.86    FPE:                    1.40564\n","AIC:                     0.340490    Det(Omega_mle):         1.39403\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.090400         0.054126            1.670           0.095\n","L1.return               -0.063224         0.037221           -1.699           0.089\n","L1.negative tone        -0.028743         0.043380           -0.663           0.508\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.674675         0.046369           14.550           0.000\n","L1.return               -0.015057         0.031886           -0.472           0.637\n","L1.negative tone         0.082046         0.037163            2.208           0.027\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.005586\n","negative tone   -0.005586       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609617752604,"user_tz":-330,"elapsed":2086,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4aaf4ac2-1070-44cf-fb30-bf68141d1455"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.01\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609617755200,"user_tz":-330,"elapsed":1617,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"679b9dc7-25c5-4d4a-8bc4-0e04aa973b2b"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-0.72,  0.  ]])"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609617758055,"user_tz":-330,"elapsed":1847,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"242dd688-a219-459e-8804-fcc67a667fbd"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.135921</td>\n","      <td>0.685516</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.062102</td>\n","      <td>0.728872</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.065523</td>\n","      <td>0.733541</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.065173</td>\n","      <td>0.733872</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.065185</td>\n","      <td>0.733905</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.135921       0.685516\n","2019-12-28  0.062102       0.728872\n","2019-12-29  0.065523       0.733541\n","2019-12-30  0.065173       0.733872\n","2019-12-31  0.065185       0.733905"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609617786525,"user_tz":-330,"elapsed":1822,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"38cf157d-d418-485b-80f9-30177488cf9c"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.4612\n","mae :  0.5383\n","mpe :  inf\n","rmse :  0.8714\n","corr :  0.1932\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.7231\n","mae :  0.7231\n","mpe :  inf\n","rmse :  0.7234\n","corr :  nan\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py:2559: RuntimeWarning: invalid value encountered in true_divide\n","  c /= stddev[:, None]\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py:2560: RuntimeWarning: invalid value encountered in true_divide\n","  c /= stddev[None, :]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}