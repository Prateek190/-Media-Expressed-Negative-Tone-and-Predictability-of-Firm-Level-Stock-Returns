{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_Coal india","provenance":[{"file_id":"1pUiM9tW9TFJRP1OYgN70yjgjOqrHZXni","timestamp":1609621202750},{"file_id":"1Jrk01wRDu2zRJjdoaEhwD3uix_8qhLrA","timestamp":1609620869825},{"file_id":"1Ph7hHF7qdnMhnykYIFGrqCRof9ROi1tw","timestamp":1609620694974},{"file_id":"1_oyB9Egec5xpaQlpCBmPMYFTPeHcvTsr","timestamp":1609620348596},{"file_id":"1JyhHyr6VXUT9WRJpq47RknOPQCZ3MuV6","timestamp":1609619744263},{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609619203614},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1Fk7oLv-hjI_KiIZUU5UERCgeqwXHWg7I","authorship_tag":"ABX9TyPqY7pBdgOEf+oeXYRDsHOu"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621880060,"user_tz":-330,"elapsed":2195,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"f6c226a3-eedf-402a-cafc-919cd4f87148"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609621883670,"user_tz":-330,"elapsed":3327,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"da259555-50d8-41aa-a7ec-66eaa39fa28d"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_COALINDIA.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_coal.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.46</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>1.28</td>\n","      <td>2.20</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>0.67</td>\n","      <td>1.38</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>2.19</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.34</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>1.87</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>2.11</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.79</td>\n","      <td>0.62</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.76</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.46\n","2018-01-02    1.28           2.20\n","2018-01-03    0.67           1.38\n","2018-01-04    2.19           0.00\n","2018-01-05    0.34           0.00\n","...            ...            ...\n","2019-12-27    1.87           0.00\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           2.11\n","2019-12-30    0.79           0.62\n","2019-12-31    0.00           0.76\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609621943587,"user_tz":-330,"elapsed":58942,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2b4cde07-7d5e-41e7-caa3-4bebc6c62e99"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609621963042,"user_tz":-330,"elapsed":1485,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9d8fbdfb-7120-4e48-f3bc-14c6d6210be8"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.3875</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.2485</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.3875\n","negative tone_y    0.2485           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"r6qG0cCa8mdh"},"source":["# Results from Granger Casuality test can be read as : negative tone do not causes return and return also do not causes negative tone significantly.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609622006699,"user_tz":-330,"elapsed":1061,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c50296d8-9f42-424b-953b-2c5bd998f088"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609622011156,"user_tz":-330,"elapsed":1309,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"fa95cbc3-15ef-49c1-dd3b-ae87ec0186b5"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -26.7253\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -25.1872\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609622013848,"user_tz":-330,"elapsed":1333,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d3740df5-d656-4cb8-8c39-eea77912f5e0"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.7330857771388976\n","BIC :  0.7711635483762341\n","FPE :  2.0814939327242183\n","HQIC:  0.7477839899342448 \n","\n","Lag Order = 2\n","AIC :  0.7417688759513684\n","BIC :  0.8053006254282749\n","FPE :  2.0996471790531865\n","HQIC:  0.7662940319554203 \n","\n","Lag Order = 3\n","AIC :  0.7478744725586808\n","BIC :  0.8369154683477661\n","FPE :  2.1125076423185596\n","HQIC:  0.7822491758312617 \n","\n","Lag Order = 4\n","AIC :  0.7553637671511201\n","BIC :  0.8699694756893382\n","FPE :  2.128391185684878\n","HQIC:  0.7996107047753191 \n","\n","Lag Order = 5\n","AIC :  0.7635082691314382\n","BIC :  0.9037343562053393\n","FPE :  2.1458013327305\n","HQIC:  0.8176502116305464 \n","\n","Lag Order = 6\n","AIC :  0.7746276425042689\n","BIC :  0.9405299742414936\n","FPE :  2.169801288458876\n","HQIC:  0.8386874442613701 \n","\n","Lag Order = 7\n","AIC :  0.7727704755324065\n","BIC :  0.9644051193994727\n","FPE :  2.1657846879977343\n","HQIC:  0.8467710752126436 \n","\n","Lag Order = 8\n","AIC :  0.7690295783979105\n","BIC :  0.9864528042043389\n","FPE :  2.1577100681272086\n","HQIC:  0.852993999373446 \n","\n","Lag Order = 9\n","AIC :  0.7563154784218691\n","BIC :  0.9995837593306985\n","FPE :  2.130465741999367\n","HQIC:  0.8502668291995621 \n","\n","Lag Order = 10\n","AIC :  0.7596312434690082\n","BIC :  1.0288012570137495\n","FPE :  2.1375607185224537\n","HQIC:  0.8635927181208289 \n","\n","Lag Order = 11\n","AIC :  0.7686413731099397\n","BIC :  1.0637700022180168\n","FPE :  2.1569309317122114\n","HQIC:  0.8826362517061416 \n","\n","Lag Order = 12\n","AIC :  0.7780311601168916\n","BIC :  1.099175494139623\n","FPE :  2.177307814249496\n","HQIC:  0.9020828091619632 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    1.60           0.26\n","2019-12-24    3.21           0.00\n","2019-12-25    0.00           0.94\n","2019-12-26   -1.86           1.16\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609622016782,"user_tz":-330,"elapsed":1786,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"7b54601b-0807-45f2-d1f2-4917805780f4"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.7102*</td> <td>    0.7231*</td> <td>     2.034*</td> <td>    0.7152*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.7152</td>  <td>    0.7537</td>  <td>     2.045</td>  <td>    0.7301</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.7232</td>  <td>    0.7874</td>  <td>     2.061</td>  <td>    0.7480</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.7266</td>  <td>    0.8165</td>  <td>     2.068</td>  <td>    0.7613</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.7360</td>  <td>    0.8516</td>  <td>     2.088</td>  <td>    0.7806</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.7428</td>  <td>    0.8841</td>  <td>     2.102</td>  <td>    0.7974</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.7515</td>  <td>    0.9185</td>  <td>     2.120</td>  <td>    0.8160</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.7501</td>  <td>    0.9427</td>  <td>     2.117</td>  <td>    0.8245</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.7511</td>  <td>    0.9695</td>  <td>     2.119</td>  <td>    0.8355</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.7598</td>  <td>     1.004</td>  <td>     2.138</td>  <td>    0.8541</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.7626</td>  <td>     1.032</td>  <td>     2.144</td>  <td>    0.8668</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.7690</td>  <td>     1.064</td>  <td>     2.158</td>  <td>    0.8831</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.7780</td>  <td>     1.099</td>  <td>     2.177</td>  <td>    0.9021</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609622035994,"user_tz":-330,"elapsed":1438,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"56bd82e4-9d16-4a9a-b07b-73722ff60ca4"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     21:13:56\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.771164\n","Nobs:                     722.000    HQIC:                  0.747784\n","Log likelihood:          -2307.59    FPE:                    2.08149\n","AIC:                     0.733086    Det(Omega_mle):         2.06430\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                   -0.045545         0.070301           -0.648           0.517\n","L1.return                0.002864         0.037335            0.077           0.939\n","L1.negative tone         0.023128         0.048981            0.472           0.637\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.922624         0.053379           17.284           0.000\n","L1.return                0.026722         0.028348            0.943           0.346\n","L1.negative tone         0.063543         0.037191            1.709           0.088\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.006804\n","negative tone   -0.006804       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609622038223,"user_tz":-330,"elapsed":1237,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6b91912a-4b2d-4930-b395-0c45581f4969"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609622040471,"user_tz":-330,"elapsed":985,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"1654941e-d06a-4f08-f421-c834d52388e0"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-1.86,  1.16]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609622043450,"user_tz":-330,"elapsed":2103,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"8b1ed3cb-2985-437c-b01e-684089232ab4"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.024043</td>\n","      <td>0.946632</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.023719</td>\n","      <td>0.982134</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.022897</td>\n","      <td>0.984398</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.022843</td>\n","      <td>0.984564</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>-0.022839</td>\n","      <td>0.984576</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.024043       0.946632\n","2019-12-28 -0.023719       0.982134\n","2019-12-29 -0.022897       0.984398\n","2019-12-30 -0.022843       0.984564\n","2019-12-31 -0.022839       0.984576"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609620683076,"user_tz":-330,"elapsed":5222,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"96c452db-c5f3-4928-bb4b-1f1c411f8a31"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  0.1205\n","mae :  0.4781\n","mpe :  inf\n","rmse :  0.7454\n","corr :  -0.6907\n","\n","Forecast Accuracy of: negative tone\n","mape :  2.0604\n","me :  0.4469\n","mae :  0.6077\n","mpe :  1.9622\n","rmse :  0.7195\n","corr :  0.0234\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}