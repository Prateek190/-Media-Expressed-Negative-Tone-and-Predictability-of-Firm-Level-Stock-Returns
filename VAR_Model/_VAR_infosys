{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" VAR_infosys","provenance":[{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554645665},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1fYNHuhEdiUsUW66fKD6x5Jlx_r50pYcH","authorship_tag":"ABX9TyMNp21n7Naq/p+Hj7GFdvQI"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554853506,"user_tz":-330,"elapsed":2071,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"655e9494-e5dc-4699-aad4-1e944b7819ab"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610554859276,"user_tz":-330,"elapsed":4602,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c7c19be5-9a24-4277-9662-9b57786c349d"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_INFY.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_infosys.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>1.45</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.37</td>\n","      <td>0.97</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.82</td>\n","      <td>2.59</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>-0.58</td>\n","      <td>1.05</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>-0.33</td>\n","      <td>0.68</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>2.20</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>1.46</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.38</td>\n","      <td>1.27</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>1.90</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           1.45\n","2018-01-02   -0.37           0.97\n","2018-01-03   -0.82           2.59\n","2018-01-04   -0.58           1.05\n","2018-01-05   -0.33           0.68\n","...            ...            ...\n","2019-12-27    2.20           0.00\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           1.46\n","2019-12-30    0.38           1.27\n","2019-12-31    0.00           1.90\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610554920106,"user_tz":-330,"elapsed":59943,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5e28bf73-f0f0-4f63-a45e-e660b278472f"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610554949155,"user_tz":-330,"elapsed":1596,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4db4ccf5-6c64-4525-8112-c02ed5e7c30e"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.1174</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.5503</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.1174\n","negative tone_y    0.5503           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj","executionInfo":{"status":"ok","timestamp":1610972317762,"user_tz":-330,"elapsed":4235,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as : Both negative tone do not causes return and return do not causes negative tone significantly.\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554955204,"user_tz":-330,"elapsed":1715,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"f0525696-2dca-4f9f-8a4a-b17e65aebdf2"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554960952,"user_tz":-330,"elapsed":2044,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5509852f-26df-4761-c400-f6a1c3ee036d"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -27.4648\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -7.4583\n"," No. Lags Chosen       = 6\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610554964470,"user_tz":-330,"elapsed":2290,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e9a5a892-99ab-4fea-d031-880186dfe92b"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.605475256521152\n","BIC :  0.6435530277584885\n","FPE :  1.8321229055307775\n","HQIC:  0.6201734693164992 \n","\n","Lag Order = 2\n","AIC :  0.6087889475870655\n","BIC :  0.6723206970639719\n","FPE :  1.8382047064106461\n","HQIC:  0.6333141035911174 \n","\n","Lag Order = 3\n","AIC :  0.6061388504245929\n","BIC :  0.6951798462136782\n","FPE :  1.833341165723762\n","HQIC:  0.6405135536971739 \n","\n","Lag Order = 4\n","AIC :  0.6178864170440456\n","BIC :  0.7324921255822637\n","FPE :  1.855008043813296\n","HQIC:  0.6621333546682446 \n","\n","Lag Order = 5\n","AIC :  0.6175322753943535\n","BIC :  0.7577583624682546\n","FPE :  1.8543552667886785\n","HQIC:  0.6716742178934617 \n","\n","Lag Order = 6\n","AIC :  0.6218931045870443\n","BIC :  0.7877954363242691\n","FPE :  1.862465324357051\n","HQIC:  0.6859529063441456 \n","\n","Lag Order = 7\n","AIC :  0.622204535959104\n","BIC :  0.8138391798261702\n","FPE :  1.863053482073464\n","HQIC:  0.696205135639341 \n","\n","Lag Order = 8\n","AIC :  0.6302475666753211\n","BIC :  0.8476707924817495\n","FPE :  1.878109139727431\n","HQIC:  0.7142119876508566 \n","\n","Lag Order = 9\n","AIC :  0.6381377340459663\n","BIC :  0.8814060149547958\n","FPE :  1.8929999951381837\n","HQIC:  0.7320890848236593 \n","\n","Lag Order = 10\n","AIC :  0.6378821646823238\n","BIC :  0.907052178227065\n","FPE :  1.8925331997288297\n","HQIC:  0.7418436393341445 \n","\n","Lag Order = 11\n","AIC :  0.6457033548611579\n","BIC :  0.9408319839692351\n","FPE :  1.9074138667545075\n","HQIC:  0.7596982334573598 \n","\n","Lag Order = 12\n","AIC :  0.6572796905237693\n","BIC :  0.9784240245465008\n","FPE :  1.9296481805697352\n","HQIC:  0.7813313395688409 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23   -2.63           0.26\n","2019-12-24    1.31           2.43\n","2019-12-25    0.00           2.51\n","2019-12-26    0.38           0.00\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610554966873,"user_tz":-330,"elapsed":1727,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"581a255c-72fc-4492-aec9-7b02d4141a88"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.6175*</td> <td>    0.6304*</td> <td>     1.854*</td> <td>    0.6225*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.6194</td>  <td>    0.6579</td>  <td>     1.858</td>  <td>    0.6343</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.6198</td>  <td>    0.6840</td>  <td>     1.859</td>  <td>    0.6446</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.6176</td>  <td>    0.7075</td>  <td>     1.854</td>  <td>    0.6523</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.6273</td>  <td>    0.7429</td>  <td>     1.872</td>  <td>    0.6719</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.6251</td>  <td>    0.7664</td>  <td>     1.868</td>  <td>    0.6797</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.6295</td>  <td>    0.7965</td>  <td>     1.877</td>  <td>    0.6940</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.6269</td>  <td>    0.8195</td>  <td>     1.872</td>  <td>    0.7013</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.6356</td>  <td>    0.8540</td>  <td>     1.888</td>  <td>    0.7199</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.6412</td>  <td>    0.8852</td>  <td>     1.899</td>  <td>    0.7354</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.6393</td>  <td>    0.9090</td>  <td>     1.895</td>  <td>    0.7435</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.6485</td>  <td>    0.9440</td>  <td>     1.913</td>  <td>    0.7626</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.6573</td>  <td>    0.9784</td>  <td>     1.930</td>  <td>    0.7813</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610555035429,"user_tz":-330,"elapsed":1758,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b74741f2-756d-423a-bdf1-a8513d0ed788"},"source":["model_fitted = model.fit(3)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Wed, 13, Jan, 2021\n","Time:                     16:23:52\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.695180\n","Nobs:                     720.000    HQIC:                  0.640514\n","Log likelihood:          -2247.48    FPE:                    1.83334\n","AIC:                     0.606139    Det(Omega_mle):         1.79821\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.242855         0.117713            2.063           0.039\n","L1.return               -0.026697         0.037283           -0.716           0.474\n","L1.negative tone         0.000367         0.049500            0.007           0.994\n","L2.return               -0.041950         0.037258           -1.126           0.260\n","L2.negative tone        -0.009685         0.049499           -0.196           0.845\n","L3.return               -0.014988         0.037328           -0.402           0.688\n","L3.negative tone        -0.120687         0.049538           -2.436           0.015\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    1.053384         0.088866           11.854           0.000\n","L1.return                0.009113         0.028147            0.324           0.746\n","L1.negative tone         0.077394         0.037369            2.071           0.038\n","L2.return               -0.029580         0.028127           -1.052           0.293\n","L2.negative tone         0.075326         0.037368            2.016           0.044\n","L3.return                0.006153         0.028180            0.218           0.827\n","L3.negative tone         0.072800         0.037398            1.947           0.052\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.000842\n","negative tone   -0.000842       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555038955,"user_tz":-330,"elapsed":2648,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"081e938a-3a51-46a9-98c5-2a24e828c779"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 1.99\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555041645,"user_tz":-330,"elapsed":1719,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"302113be-358c-4fbf-f420-6d1a4f9b9966"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["3\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[1.31, 2.43],\n","       [0.  , 2.51],\n","       [0.38, 0.  ]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610555044375,"user_tz":-330,"elapsed":1223,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"61e2332c-0518-45f2-87d0-f7f753f73662"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.104502</td>\n","      <td>1.430879</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.072694</td>\n","      <td>1.334660</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.230117</td>\n","      <td>1.269226</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.056180</td>\n","      <td>1.359920</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.059923</td>\n","      <td>1.344659</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.104502       1.430879\n","2019-12-28 -0.072694       1.334660\n","2019-12-29  0.230117       1.269226\n","2019-12-30  0.056180       1.359920\n","2019-12-31  0.059923       1.344659"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610555046870,"user_tz":-330,"elapsed":1363,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"483e0e12-06ec-4c05-ff23-a554ee269fac"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.4822\n","mae :  0.5982\n","mpe :  nan\n","rmse :  1.0467\n","corr :  -0.5841\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.4219\n","mae :  0.7203\n","mpe :  inf\n","rmse :  0.9145\n","corr :  -0.5208\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}