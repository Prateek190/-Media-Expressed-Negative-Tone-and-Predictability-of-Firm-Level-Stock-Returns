{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_IOC","provenance":[{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554743620},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1bL2VQrFS13otTmN4Mlfyxer6DmqBcT40","authorship_tag":"ABX9TyPxHo3Nbrc3Q+NhvJ3gKWBU"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555070493,"user_tz":-330,"elapsed":2094,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"1e137db0-d84a-403f-c455-9843162c5811"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610555074932,"user_tz":-330,"elapsed":3690,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4492c403-8bd6-44dd-e34f-30c004612d91"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_IOC.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_ioc.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.91</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.03</td>\n","      <td>1.55</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.26</td>\n","      <td>2.79</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>-0.89</td>\n","      <td>1.01</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.40</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.32</td>\n","      <td>0.16</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.00\n","2018-01-02   -0.91           0.00\n","2018-01-03   -0.03           1.55\n","2018-01-04    0.26           2.79\n","2018-01-05   -0.89           1.01\n","...            ...            ...\n","2019-12-27   -0.40           0.00\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30    0.32           0.16\n","2019-12-31    0.00           0.00\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610555148643,"user_tz":-330,"elapsed":73058,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e800b93e-1c16-41d9-d806-82ecc569fb2e"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610555317030,"user_tz":-330,"elapsed":1304,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"08f099f5-0860-4e1f-9f91-789ace93bc54"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.2865</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0309</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.2865\n","negative tone_y    0.0309           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj"},"source":["# Results from Granger Casuality test can be read as : negative tone do not causes return significantly and return causes negative tone (5% significance).\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555321763,"user_tz":-330,"elapsed":1031,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2aa1c47b-941b-457c-bdfb-e5cb0a7cff3d"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555328451,"user_tz":-330,"elapsed":1555,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"99758995-f7d5-4f6e-cc9d-529d6fa88633"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -19.9007\n"," No. Lags Chosen       = 1\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -23.6104\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555331073,"user_tz":-330,"elapsed":1280,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"88fb48f3-e32d-4f42-a0a5-c744eabe366f"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.8892410891587852\n","BIC :  0.9273188603961218\n","FPE :  2.4332825388206225\n","HQIC:  0.9039393019541324 \n","\n","Lag Order = 2\n","AIC :  0.896962620640358\n","BIC :  0.9604943701172645\n","FPE :  2.4521447881425944\n","HQIC:  0.92148777664441 \n","\n","Lag Order = 3\n","AIC :  0.9085960148728742\n","BIC :  0.9976370106619595\n","FPE :  2.4808400687621757\n","HQIC:  0.9429707181454552 \n","\n","Lag Order = 4\n","AIC :  0.911853630311725\n","BIC :  1.026459338849943\n","FPE :  2.4889383288689038\n","HQIC:  0.956100567935924 \n","\n","Lag Order = 5\n","AIC :  0.9208770943057767\n","BIC :  1.0611031813796776\n","FPE :  2.511504282800888\n","HQIC:  0.9750190368048849 \n","\n","Lag Order = 6\n","AIC :  0.9163939994540836\n","BIC :  1.0822963311913083\n","FPE :  2.5002780562025957\n","HQIC:  0.980453801211185 \n","\n","Lag Order = 7\n","AIC :  0.9229789458689642\n","BIC :  1.1146135897360305\n","FPE :  2.516807437899713\n","HQIC:  0.9969795455492013 \n","\n","Lag Order = 8\n","AIC :  0.9300207454503407\n","BIC :  1.1474439712567692\n","FPE :  2.5346071959360383\n","HQIC:  1.013985166425876 \n","\n","Lag Order = 9\n","AIC :  0.9391742242067719\n","BIC :  1.1824425051156013\n","FPE :  2.557932614631606\n","HQIC:  1.033125574984465 \n","\n","Lag Order = 10\n","AIC :  0.9435032903541293\n","BIC :  1.2126733038988704\n","FPE :  2.5690530671196967\n","HQIC:  1.04746476500595 \n","\n","Lag Order = 11\n","AIC :  0.9445325720335569\n","BIC :  1.239661201141634\n","FPE :  2.5717267109979867\n","HQIC:  1.0585274506297588 \n","\n","Lag Order = 12\n","AIC :  0.9565293682689583\n","BIC :  1.2776737022916898\n","FPE :  2.6027989212599625\n","HQIC:  1.0805810173140298 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    2.03           1.69\n","2019-12-24    0.12           0.00\n","2019-12-25    0.00           0.00\n","2019-12-26   -1.64           0.49\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610555333896,"user_tz":-330,"elapsed":1609,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"3186c306-8e39-4b1e-91ca-4e7c8112d4fc"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.9165</td>  <td>    0.9293*</td> <td>     2.500</td>  <td>    0.9214</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.9050*</td> <td>    0.9435</td>  <td>     2.472*</td> <td>    0.9198*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.9111</td>  <td>    0.9754</td>  <td>     2.487</td>  <td>    0.9359</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.9213</td>  <td>     1.011</td>  <td>     2.513</td>  <td>    0.9561</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.9291</td>  <td>     1.045</td>  <td>     2.532</td>  <td>    0.9737</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.9363</td>  <td>     1.078</td>  <td>     2.551</td>  <td>    0.9909</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.9309</td>  <td>     1.098</td>  <td>     2.537</td>  <td>    0.9954</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.9355</td>  <td>     1.128</td>  <td>     2.549</td>  <td>     1.010</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.9404</td>  <td>     1.159</td>  <td>     2.561</td>  <td>     1.025</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.9476</td>  <td>     1.192</td>  <td>     2.580</td>  <td>     1.042</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.9492</td>  <td>     1.219</td>  <td>     2.584</td>  <td>     1.053</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.9475</td>  <td>     1.243</td>  <td>     2.579</td>  <td>     1.062</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.9565</td>  <td>     1.278</td>  <td>     2.603</td>  <td>     1.081</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610555338823,"user_tz":-330,"elapsed":1326,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"27e6fe08-b1ec-42da-c464-35e16c9623c5"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Wed, 13, Jan, 2021\n","Time:                     16:28:56\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.927319\n","Nobs:                     722.000    HQIC:                  0.903939\n","Log likelihood:          -2363.96    FPE:                    2.43328\n","AIC:                     0.889241    Det(Omega_mle):         2.41319\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                   -0.024540         0.090514           -0.271           0.786\n","L1.return                0.017886         0.037355            0.479           0.632\n","L1.negative tone        -0.004723         0.079049           -0.060           0.952\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.663218         0.042247           15.699           0.000\n","L1.return               -0.038081         0.017435           -2.184           0.029\n","L1.negative tone         0.123661         0.036895            3.352           0.001\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.048615\n","negative tone   -0.048615       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555341055,"user_tz":-330,"elapsed":1573,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e771df09-f458-47d7-f8dc-ccc6b24d62e9"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610555343093,"user_tz":-330,"elapsed":1360,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5c9b7178-bb39-4d36-fe8e-6d92d527452b"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-1.64,  0.49]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610555344994,"user_tz":-330,"elapsed":1096,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4ad11ee8-26bf-444b-bfde-f6e7d9498ed1"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.056187</td>\n","      <td>0.786264</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.029259</td>\n","      <td>0.762588</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.028665</td>\n","      <td>0.758635</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.028636</td>\n","      <td>0.758123</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>-0.028633</td>\n","      <td>0.758059</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.056187       0.786264\n","2019-12-28 -0.029259       0.762588\n","2019-12-29 -0.028665       0.758635\n","2019-12-30 -0.028636       0.758123\n","2019-12-31 -0.028633       0.758059"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610555347555,"user_tz":-330,"elapsed":1592,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c24068ee-d47e-45f5-fcaf-284f100b37e1"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.0183\n","mae :  0.1558\n","mpe :  -inf\n","rmse :  0.2201\n","corr :  0.8441\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.7327\n","mae :  0.7327\n","mpe :  inf\n","rmse :  0.7359\n","corr :  -0.3033\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}