{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_M&M","provenance":[{"file_id":"1h9SvZXO5XCLw7d-G_y9XQoMeAn0ybyhl","timestamp":1610970592637},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554880495},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1hEq-Ec56OLU-YexLNxLXOtmlKaV91Soj","authorship_tag":"ABX9TyPZ2O7WsmXrflIORGnM4gaP"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970718069,"user_tz":-330,"elapsed":2850,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"1f24b7b0-6e8c-4a1a-8176-3d0a71fedd9a"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610970722867,"user_tz":-330,"elapsed":4301,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"ba367c29-7772-4ab9-bdf2-e27024496fff"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_M&M.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_mahindra.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>1.84</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>1.11</td>\n","      <td>0.25</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>0.27</td>\n","      <td>0.44</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.15</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.05</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.59</td>\n","      <td>0.90</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>3.32</td>\n","      <td>0.60</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.74</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           1.84\n","2018-01-02    1.11           0.25\n","2018-01-03    0.27           0.44\n","2018-01-04    0.15           0.00\n","2018-01-05    0.05           0.00\n","...            ...            ...\n","2019-12-27   -0.59           0.90\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30    3.32           0.60\n","2019-12-31    0.00           0.74\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610970882773,"user_tz":-330,"elapsed":61672,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"06db5d37-4d02-4a2d-e62b-d4ee90b2a5f5"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610970942788,"user_tz":-330,"elapsed":2467,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4a50e237-f726-4fae-a775-2715703a2d36"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.05</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0074</td>\n","      <td>1.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000             0.05\n","negative tone_y    0.0074             1.00"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj"},"source":["# Results from Granger Casuality test can be read as : Both negative tone causes return and return causes negative tone (5% significance).\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970979344,"user_tz":-330,"elapsed":2516,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"fed54b02-879b-4fed-bd49-4bf0eb0e69f7"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970998315,"user_tz":-330,"elapsed":1793,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"68deda08-092b-450e-8bba-81ac5ffd2b8b"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -16.6238\n"," No. Lags Chosen       = 2\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -9.3066\n"," No. Lags Chosen       = 4\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971006996,"user_tz":-330,"elapsed":1941,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"61770a54-af83-4019-b264-a45964574c4b"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.6294002114389485\n","BIC :  0.6674779826762851\n","FPE :  1.876484927071111\n","HQIC:  0.6440984242342958 \n","\n","Lag Order = 2\n","AIC :  0.6300015853204465\n","BIC :  0.6935333347973529\n","FPE :  1.8776143908336953\n","HQIC:  0.6545267413244984 \n","\n","Lag Order = 3\n","AIC :  0.6227999022422287\n","BIC :  0.711840898031314\n","FPE :  1.8641424361579124\n","HQIC:  0.6571746055148097 \n","\n","Lag Order = 4\n","AIC :  0.6238500409170141\n","BIC :  0.7384557494552323\n","FPE :  1.8661036662428774\n","HQIC:  0.6680969785412132 \n","\n","Lag Order = 5\n","AIC :  0.6189714828907027\n","BIC :  0.7591975699646037\n","FPE :  1.857025990191113\n","HQIC:  0.6731134253898109 \n","\n","Lag Order = 6\n","AIC :  0.6289360406375943\n","BIC :  0.7948383723748191\n","FPE :  1.8756288490517528\n","HQIC:  0.6929958423946956 \n","\n","Lag Order = 7\n","AIC :  0.6360521911583338\n","BIC :  0.8276868350254\n","FPE :  1.889031858986161\n","HQIC:  0.7100527908385709 \n","\n","Lag Order = 8\n","AIC :  0.640348295074731\n","BIC :  0.8577715208811594\n","FPE :  1.8971755402153123\n","HQIC:  0.7243127160502665 \n","\n","Lag Order = 9\n","AIC :  0.6521968783158032\n","BIC :  0.8954651592246327\n","FPE :  1.9198019197652711\n","HQIC:  0.7461482290934962 \n","\n","Lag Order = 10\n","AIC :  0.6594959405248849\n","BIC :  0.928665954069626\n","FPE :  1.9338832436440025\n","HQIC:  0.7634574151767056 \n","\n","Lag Order = 11\n","AIC :  0.6615605226001068\n","BIC :  0.9566891517081839\n","FPE :  1.9379011303819127\n","HQIC:  0.7755554011963086 \n","\n","Lag Order = 12\n","AIC :  0.6747955697138709\n","BIC :  0.9959399037366023\n","FPE :  1.9637454147318656\n","HQIC:  0.7988472187589425 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    0.82           0.11\n","2019-12-24    0.84           0.70\n","2019-12-25    0.00           3.57\n","2019-12-26   -1.42           0.39\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610971009784,"user_tz":-330,"elapsed":1928,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9dd6c4b7-9a89-4afa-fb96-dc55e982034b"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.6522</td>  <td>    0.6651*</td> <td>     1.920</td>  <td>    0.6572*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.6496</td>  <td>    0.6882</td>  <td>     1.915</td>  <td>    0.6645</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.6504</td>  <td>    0.7147</td>  <td>     1.916</td>  <td>    0.6753</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.6417</td>  <td>    0.7316</td>  <td>     1.900</td>  <td>    0.6765</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.6416</td>  <td>    0.7572</td>  <td>     1.899</td>  <td>    0.6862</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.6353*</td> <td>    0.7767</td>  <td>     1.888*</td> <td>    0.6899</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.6438</td>  <td>    0.8108</td>  <td>     1.904</td>  <td>    0.7083</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.6482</td>  <td>    0.8409</td>  <td>     1.912</td>  <td>    0.7227</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.6500</td>  <td>    0.8684</td>  <td>     1.916</td>  <td>    0.7344</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.6599</td>  <td>    0.9040</td>  <td>     1.935</td>  <td>    0.7542</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.6646</td>  <td>    0.9343</td>  <td>     1.944</td>  <td>    0.7688</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.6645</td>  <td>    0.9599</td>  <td>     1.944</td>  <td>    0.7786</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.6748</td>  <td>    0.9959</td>  <td>     1.964</td>  <td>    0.7988</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610971020185,"user_tz":-330,"elapsed":1814,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"04d8ef0b-0380-42ed-cd1e-a199d2f18265"},"source":["model_fitted = model.fit(5)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Mon, 18, Jan, 2021\n","Time:                     11:56:56\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.759198\n","Nobs:                     718.000    HQIC:                  0.673113\n","Log likelihood:          -2237.81    FPE:                    1.85703\n","AIC:                     0.618971    Det(Omega_mle):         1.80141\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.269827         0.124853            2.161           0.031\n","L1.return               -0.071461         0.037448           -1.908           0.056\n","L1.negative tone        -0.018127         0.057421           -0.316           0.752\n","L2.return                0.021599         0.037565            0.575           0.565\n","L2.negative tone        -0.080453         0.057521           -1.399           0.162\n","L3.return               -0.084094         0.037478           -2.244           0.025\n","L3.negative tone        -0.046162         0.057344           -0.805           0.421\n","L4.return                0.011826         0.037696            0.314           0.754\n","L4.negative tone        -0.023227         0.057324           -0.405           0.685\n","L5.return                0.012978         0.037638            0.345           0.730\n","L5.negative tone        -0.151420         0.057431           -2.637           0.008\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.690977         0.081433            8.485           0.000\n","L1.return               -0.028692         0.024425           -1.175           0.240\n","L1.negative tone         0.045486         0.037451            1.215           0.225\n","L2.return               -0.019037         0.024501           -0.777           0.437\n","L2.negative tone         0.058948         0.037517            1.571           0.116\n","L3.return               -0.059392         0.024445           -2.430           0.015\n","L3.negative tone         0.046572         0.037401            1.245           0.213\n","L4.return                0.026315         0.024586            1.070           0.284\n","L4.negative tone         0.098172         0.037388            2.626           0.009\n","L5.return                0.032053         0.024548            1.306           0.192\n","L5.negative tone         0.073181         0.037458            1.954           0.051\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.005079\n","negative tone   -0.005079       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971027928,"user_tz":-330,"elapsed":2500,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"35e3c461-189e-4516-a3ba-a5c4f0ada4a9"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971030919,"user_tz":-330,"elapsed":1154,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"47952763-5b7b-4207-d321-554e8835728c"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["5\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[ 0.  ,  0.  ],\n","       [ 0.82,  0.11],\n","       [ 0.84,  0.7 ],\n","       [ 0.  ,  3.57],\n","       [-1.42,  0.39]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610971035534,"user_tz":-330,"elapsed":1944,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"7fb85214-5b52-48b2-b740-3bcfe91fac5f"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.018796</td>\n","      <td>0.974993</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.014312</td>\n","      <td>1.077307</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.093825</td>\n","      <td>1.328524</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.457171</td>\n","      <td>1.120647</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.026040</td>\n","      <td>0.959166</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.018796       0.974993\n","2019-12-28  0.014312       1.077307\n","2019-12-29  0.093825       1.328524\n","2019-12-30 -0.457171       1.120647\n","2019-12-31  0.026040       0.959166"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610971038888,"user_tz":-330,"elapsed":1513,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"cf084c12-39d2-461e-d4fa-e62fa993682b"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.6144\n","mae :  0.8965\n","mpe :  inf\n","rmse :  1.709\n","corr :  -0.9494\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.6441\n","mae :  0.6441\n","mpe :  inf\n","rmse :  0.8063\n","corr :  -0.7435\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}