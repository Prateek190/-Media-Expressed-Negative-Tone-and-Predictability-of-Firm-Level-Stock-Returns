{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_Bajaj auto","provenance":[{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","authorship_tag":"ABX9TyMx4+fyCrabPGrJl1tNbHP7"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609618484724,"user_tz":-330,"elapsed":2592,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"2ec74a09-40bd-4754-9c85-e9568ed41239"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609618500061,"user_tz":-330,"elapsed":2354,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e38b2b8c-63df-498d-b86b-6e0192c60fb0"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_BAJAJ-AUTO.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_auto.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.34</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>0.17</td>\n","      <td>0.92</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-1.63</td>\n","      <td>0.35</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.72</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.47</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.66</td>\n","      <td>1.31</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.36</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.45</td>\n","      <td>1.19</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>1.90</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.34\n","2018-01-02    0.17           0.92\n","2018-01-03   -1.63           0.35\n","2018-01-04    0.72           0.00\n","2018-01-05    0.47           0.00\n","...            ...            ...\n","2019-12-27   -0.66           1.31\n","2019-12-28    0.00           0.36\n","2019-12-29    0.00           0.00\n","2019-12-30    0.45           1.19\n","2019-12-31    0.00           1.90\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609618561258,"user_tz":-330,"elapsed":59240,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"7f79befc-7aab-46d4-b53d-fa97fe8283d9"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609618593937,"user_tz":-330,"elapsed":1636,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"0a314d29-ee21-45a0-a5f6-2030aa3362e4"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.3252</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.2836</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.3252\n","negative tone_y    0.2836           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj"},"source":["# Results from Granger Casuality test can be read as : negative tone do not causes return and return also do not causes negative tone.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609618652049,"user_tz":-330,"elapsed":1830,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"1a5df43e-db1e-4be6-bf32-2ea664eb4c63"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609618658402,"user_tz":-330,"elapsed":2332,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"ca3adbf8-0cd0-4852-c561-02b0c76fc5eb"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -27.3268\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -4.7221\n"," No. Lags Chosen       = 13\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0001. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609618663692,"user_tz":-330,"elapsed":2923,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"fb972c61-7905-4e0f-ab9b-9528afcfb699"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.2389510762065696\n","BIC :  0.2770288474439061\n","FPE :  1.2699165274065252\n","HQIC:  0.2536492890019168 \n","\n","Lag Order = 2\n","AIC :  0.2503727518945787\n","BIC :  0.31390450137148507\n","FPE :  1.2845047000131817\n","HQIC:  0.27489790789863056 \n","\n","Lag Order = 3\n","AIC :  0.2538267488986392\n","BIC :  0.3428677446877245\n","FPE :  1.288950052593018\n","HQIC:  0.2882014521712201 \n","\n","Lag Order = 4\n","AIC :  0.2640253473210096\n","BIC :  0.37863105585922774\n","FPE :  1.3021646077186912\n","HQIC:  0.30827228494520864 \n","\n","Lag Order = 5\n","AIC :  0.2711147327260457\n","BIC :  0.4113408197999467\n","FPE :  1.311431813711241\n","HQIC:  0.3252566752251539 \n","\n","Lag Order = 6\n","AIC :  0.2789323247062455\n","BIC :  0.44483465644347026\n","FPE :  1.32172839919847\n","HQIC:  0.34299212646334676 \n","\n","Lag Order = 7\n","AIC :  0.2781325158599541\n","BIC :  0.4697671597270202\n","FPE :  1.3206773892035444\n","HQIC:  0.35213311554019117 \n","\n","Lag Order = 8\n","AIC :  0.2784898279143705\n","BIC :  0.4959130537207988\n","FPE :  1.3211568512015863\n","HQIC:  0.36245424888990585 \n","\n","Lag Order = 9\n","AIC :  0.28667338339661186\n","BIC :  0.5299416643054413\n","FPE :  1.3320225734505138\n","HQIC:  0.38062473417430487 \n","\n","Lag Order = 10\n","AIC :  0.29097839278142956\n","BIC :  0.5601484063261707\n","FPE :  1.337781275428552\n","HQIC:  0.39493986743325027 \n","\n","Lag Order = 11\n","AIC :  0.30168388696665754\n","BIC :  0.5968125160747346\n","FPE :  1.352194543268091\n","HQIC:  0.41567876556285943 \n","\n","Lag Order = 12\n","AIC :  0.30859876728871194\n","BIC :  0.6297431013114434\n","FPE :  1.361594954420419\n","HQIC:  0.4326504163337836 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23   -0.22            0.6\n","2019-12-24   -0.88            0.0\n","2019-12-25    0.00            0.0\n","2019-12-26   -0.39            0.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609618680792,"user_tz":-330,"elapsed":1847,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"344e1225-2bdc-42ae-c00a-6c691ee394c0"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.2554*</td> <td>    0.2682*</td> <td>     1.291*</td> <td>    0.2603*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.2576</td>  <td>    0.2961</td>  <td>     1.294</td>  <td>    0.2725</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.2661</td>  <td>    0.3303</td>  <td>     1.305</td>  <td>    0.2909</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.2701</td>  <td>    0.3601</td>  <td>     1.310</td>  <td>    0.3049</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.2791</td>  <td>    0.3947</td>  <td>     1.322</td>  <td>    0.3237</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.2843</td>  <td>    0.4256</td>  <td>     1.329</td>  <td>    0.3389</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.2900</td>  <td>    0.4570</td>  <td>     1.336</td>  <td>    0.3545</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.2871</td>  <td>    0.4798</td>  <td>     1.333</td>  <td>    0.3615</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.2851</td>  <td>    0.5035</td>  <td>     1.330</td>  <td>    0.3694</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.2915</td>  <td>    0.5356</td>  <td>     1.339</td>  <td>    0.3858</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.2941</td>  <td>    0.5638</td>  <td>     1.342</td>  <td>    0.3983</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.3023</td>  <td>    0.5977</td>  <td>     1.353</td>  <td>    0.4164</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.3086</td>  <td>    0.6297</td>  <td>     1.362</td>  <td>    0.4327</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609618726013,"user_tz":-330,"elapsed":1868,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b049fa2c-0f6a-4b54-b1f8-8623c982301a"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     20:18:45\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.277029\n","Nobs:                     722.000    HQIC:                  0.253649\n","Log likelihood:          -2129.21    FPE:                    1.26992\n","AIC:                     0.238951    Det(Omega_mle):         1.25943\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                   -0.029992         0.061179           -0.490           0.624\n","L1.return               -0.016242         0.037326           -0.435           0.663\n","L1.negative tone         0.050336         0.051676            0.974           0.330\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.701995         0.044072           15.928           0.000\n","L1.return                0.000125         0.026889            0.005           0.996\n","L1.negative tone         0.086637         0.037227            2.327           0.020\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.059967\n","negative tone   -0.059967       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609618731002,"user_tz":-330,"elapsed":1741,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"1cb1b3a3-d0c0-4209-8e74-b6189a04b11e"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 1.99\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609618735072,"user_tz":-330,"elapsed":2115,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"10d4ebbe-4907-4a73-d842-5b1afc1ee943"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-0.39,  0.  ]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609618737844,"user_tz":-330,"elapsed":1667,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5848dc66-68f3-4549-baaf-be0fbf008c6a"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.023657</td>\n","      <td>0.701946</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.005725</td>\n","      <td>0.762807</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.008312</td>\n","      <td>0.768083</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.008535</td>\n","      <td>0.768541</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.008555</td>\n","      <td>0.768580</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.023657       0.701946\n","2019-12-28  0.005725       0.762807\n","2019-12-29  0.008312       0.768083\n","2019-12-30  0.008535       0.768541\n","2019-12-31  0.008555       0.768580"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609618741347,"user_tz":-330,"elapsed":1664,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"16d12aae-c391-4585-a66f-653050f4ff81"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  0.0435\n","mae :  0.2201\n","mpe :  inf\n","rmse :  0.3464\n","corr :  0.883\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  -0.198\n","mae :  0.6664\n","mpe :  inf\n","rmse :  0.7183\n","corr :  -0.2236\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}