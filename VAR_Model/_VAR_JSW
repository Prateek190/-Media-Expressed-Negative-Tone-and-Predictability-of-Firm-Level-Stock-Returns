{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" VAR_JSW","provenance":[{"file_id":"1h9SvZXO5XCLw7d-G_y9XQoMeAn0ybyhl","timestamp":1610970093970},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554880495},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"12aH1FNUk4XINaEvvX-9h2rJIiZPgoLwI","authorship_tag":"ABX9TyMzbZH6JhU0TJge6SAtr5aU"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970300420,"user_tz":-330,"elapsed":2984,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a4ad866b-15b9-4f61-82f8-b291886f8fc1"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610970309507,"user_tz":-330,"elapsed":8292,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"083288de-8166-4568-f9cf-1884dd570c85"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_JSWSTEEL.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_jsw.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>1.38</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.47</td>\n","      <td>3.24</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>1.57</td>\n","      <td>0.90</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>3.14</td>\n","      <td>1.41</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>2.87</td>\n","      <td>1.20</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>2.31</td>\n","      <td>0.56</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>2.10</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>1.14</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           1.38\n","2018-01-02   -0.47           3.24\n","2018-01-03    1.57           0.90\n","2018-01-04    3.14           1.41\n","2018-01-05    2.87           1.20\n","...            ...            ...\n","2019-12-27    2.31           0.56\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30    2.10           0.00\n","2019-12-31    0.00           1.14\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610970372895,"user_tz":-330,"elapsed":62452,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"15890e30-65b1-49ca-9df2-c9cbb1211e40"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610970432752,"user_tz":-330,"elapsed":1463,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4313db09-e864-406f-a002-54c5ac41707d"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.6532</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0301</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.6532\n","negative tone_y    0.0301           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj","executionInfo":{"status":"ok","timestamp":1610972609900,"user_tz":-330,"elapsed":2465,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as : negative tone do not causes return significantly and return causes negative tone (5% significance).\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970440847,"user_tz":-330,"elapsed":1454,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"d885146a-27c7-470b-a3b6-c79d383ed5a1"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970446690,"user_tz":-330,"elapsed":2420,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9e10a362-aa70-4d0d-8eea-1594a7d2acf7"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -29.1511\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -23.7327\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970449362,"user_tz":-330,"elapsed":1320,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6ff63012-35c8-4fa3-a44f-cfa87b2e2e69"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  1.3283015875184427\n","BIC :  1.366379358755779\n","FPE :  3.7746274276599743\n","HQIC:  1.34299980031379 \n","\n","Lag Order = 2\n","AIC :  1.3329421141581927\n","BIC :  1.396473863635099\n","FPE :  3.7921857156752825\n","HQIC:  1.3574672701622446 \n","\n","Lag Order = 3\n","AIC :  1.3405906190186616\n","BIC :  1.4296316148077468\n","FPE :  3.8213044537557597\n","HQIC:  1.3749653222912424 \n","\n","Lag Order = 4\n","AIC :  1.347575421638177\n","BIC :  1.4621811301763952\n","FPE :  3.8480942930404374\n","HQIC:  1.3918223592623762 \n","\n","Lag Order = 5\n","AIC :  1.3563173958220887\n","BIC :  1.4965434828959898\n","FPE :  3.881890165224428\n","HQIC:  1.410459338321197 \n","\n","Lag Order = 6\n","AIC :  1.3641413790663044\n","BIC :  1.5300437108035292\n","FPE :  3.9123934715731292\n","HQIC:  1.4282011808234056 \n","\n","Lag Order = 7\n","AIC :  1.3706503505910541\n","BIC :  1.5622849944581203\n","FPE :  3.9379591754497207\n","HQIC:  1.4446509502712912 \n","\n","Lag Order = 8\n","AIC :  1.3827018198327132\n","BIC :  1.6001250456391416\n","FPE :  3.9857270693302054\n","HQIC:  1.4666662408082485 \n","\n","Lag Order = 9\n","AIC :  1.3948079500755124\n","BIC :  1.6380762309843417\n","FPE :  4.034301133834014\n","HQIC:  1.4887593008532054 \n","\n","Lag Order = 10\n","AIC :  1.4034186114741583\n","BIC :  1.6725886250188995\n","FPE :  4.069225537644089\n","HQIC:  1.5073800861259792 \n","\n","Lag Order = 11\n","AIC :  1.4106679728749028\n","BIC :  1.7057966019829798\n","FPE :  4.098876640832139\n","HQIC:  1.5246628514711047 \n","\n","Lag Order = 12\n","AIC :  1.419875103420715\n","BIC :  1.7410194374434467\n","FPE :  4.136843714776202\n","HQIC:  1.543926752465787 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    2.26           0.00\n","2019-12-24    0.78           2.29\n","2019-12-25    0.00           4.05\n","2019-12-26   -1.75           0.81\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610970451799,"user_tz":-330,"elapsed":1539,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"26bd88fd-6ee4-4c93-e39f-85ad92913620"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>     1.354</td>  <td>     1.367*</td> <td>     3.873</td>  <td>     1.359</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>     1.336*</td> <td>     1.374</td>  <td>     3.803*</td> <td>     1.351*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>     1.343</td>  <td>     1.407</td>  <td>     3.829</td>  <td>     1.367</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>     1.350</td>  <td>     1.439</td>  <td>     3.856</td>  <td>     1.384</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>     1.359</td>  <td>     1.475</td>  <td>     3.893</td>  <td>     1.404</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>     1.370</td>  <td>     1.511</td>  <td>     3.935</td>  <td>     1.425</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>     1.375</td>  <td>     1.542</td>  <td>     3.955</td>  <td>     1.439</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>     1.380</td>  <td>     1.573</td>  <td>     3.976</td>  <td>     1.455</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>     1.391</td>  <td>     1.609</td>  <td>     4.017</td>  <td>     1.475</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>     1.400</td>  <td>     1.644</td>  <td>     4.056</td>  <td>     1.494</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>     1.408</td>  <td>     1.678</td>  <td>     4.087</td>  <td>     1.512</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>     1.412</td>  <td>     1.708</td>  <td>     4.106</td>  <td>     1.527</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>     1.420</td>  <td>     1.741</td>  <td>     4.137</td>  <td>     1.544</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610970458535,"user_tz":-330,"elapsed":1661,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"33342fe7-a9a0-455e-ed0f-6c79b0666b58"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Mon, 18, Jan, 2021\n","Time:                     11:47:34\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                    1.36638\n","Nobs:                     722.000    HQIC:                   1.34300\n","Log likelihood:          -2522.46    FPE:                    3.77463\n","AIC:                      1.32830    Det(Omega_mle):         3.74345\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.029341         0.088844            0.330           0.741\n","L1.return               -0.083677         0.037194           -2.250           0.024\n","L1.negative tone        -0.022024         0.056689           -0.388           0.698\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.948567         0.057828           16.403           0.000\n","L1.return                0.052930         0.024209            2.186           0.029\n","L1.negative tone         0.123734         0.036899            3.353           0.001\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.010940\n","negative tone   -0.010940       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970461275,"user_tz":-330,"elapsed":1916,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4ac7e1d6-446f-4d31-db57-dbcd5a3bc959"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 1.98\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970463944,"user_tz":-330,"elapsed":1867,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"84719b19-841b-4179-88c6-0976a32e58e4"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-1.75,  0.81]])"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610970466807,"user_tz":-330,"elapsed":2108,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5d8185c3-50d2-44b3-922a-d93e210467b4"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.157937</td>\n","      <td>0.956163</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.004933</td>\n","      <td>1.075236</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.006074</td>\n","      <td>1.081348</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.005018</td>\n","      <td>1.082687</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.005077</td>\n","      <td>1.082797</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.157937       0.956163\n","2019-12-28 -0.004933       1.075236\n","2019-12-29  0.006074       1.081348\n","2019-12-30  0.005018       1.082687\n","2019-12-31  0.005077       1.082797"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610970469405,"user_tz":-330,"elapsed":1186,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"20e01fc9-1087-4cac-8583-65ccbf76a931"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.8482\n","mae :  0.8526\n","mpe :  nan\n","rmse :  1.3432\n","corr :  0.6721\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.7156\n","mae :  0.7385\n","mpe :  inf\n","rmse :  0.8553\n","corr :  -0.2184\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}