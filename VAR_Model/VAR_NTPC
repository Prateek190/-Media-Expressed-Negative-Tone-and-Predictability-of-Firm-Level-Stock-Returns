{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_NTPC","provenance":[{"file_id":"1h9SvZXO5XCLw7d-G_y9XQoMeAn0ybyhl","timestamp":1610971405193},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554880495},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1Il53XZZgnMQwW1HP_g6bWmCPElgS9vRP","authorship_tag":"ABX9TyMPmwfmlYz3J/zX8U//YCqb"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971512134,"user_tz":-330,"elapsed":2816,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"812dc85a-cd2e-45a4-e86a-880d54e1a04f"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":1,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610971558312,"user_tz":-330,"elapsed":5848,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b1ca711b-5c80-4af7-e529-94db832f60c9"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_NTPC.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_ntpc.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.85</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>1.33</td>\n","      <td>1.08</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-1.03</td>\n","      <td>0.59</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.03</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.23</td>\n","      <td>0.16</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.52</td>\n","      <td>0.66</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-1.21</td>\n","      <td>0.68</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>1.01</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.85\n","2018-01-02    1.33           1.08\n","2018-01-03   -1.03           0.59\n","2018-01-04    0.03           0.00\n","2018-01-05    0.23           0.16\n","...            ...            ...\n","2019-12-27    0.52           0.66\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30   -1.21           0.68\n","2019-12-31    0.00           1.01\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610971619587,"user_tz":-330,"elapsed":60215,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"bc7ddeda-7db9-417e-b75b-6844a6910a4a"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610971674195,"user_tz":-330,"elapsed":7796,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"476c5008-5ba5-4c39-cdcd-1370cad6ab48"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.0327</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0226</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.0327\n","negative tone_y    0.0226           1.0000"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj","executionInfo":{"status":"ok","timestamp":1610972006563,"user_tz":-330,"elapsed":2007,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as : Both negative tone causes return and return causes negative tone (5% significance)  .\n"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971700123,"user_tz":-330,"elapsed":3100,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"a962787b-7a80-425d-ab40-ab89e174e154"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI","executionInfo":{"status":"ok","timestamp":1610971705555,"user_tz":-330,"elapsed":3399,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971711273,"user_tz":-330,"elapsed":3606,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"72068d2f-d4e3-44a5-c476-595be2a3fe85"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":9,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -29.7312\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -8.0825\n"," No. Lags Chosen       = 6\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971714617,"user_tz":-330,"elapsed":1609,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"ab4f4d13-54fb-4017-db36-bd2e68ff9586"},"source":["\r\n","model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":10,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.10967968511217763\n","BIC :  0.14775745634951412\n","FPE :  1.1159206739741843\n","HQIC:  0.12437789790752483 \n","\n","Lag Order = 2\n","AIC :  0.11818243095110649\n","BIC :  0.18171418042801285\n","FPE :  1.1254499099206456\n","HQIC:  0.14270758695515834 \n","\n","Lag Order = 3\n","AIC :  0.12212572041512978\n","BIC :  0.2111667162042151\n","FPE :  1.1298975283821855\n","HQIC:  0.1565004236877107 \n","\n","Lag Order = 4\n","AIC :  0.1097861731681332\n","BIC :  0.22439188170635135\n","FPE :  1.116042324547305\n","HQIC:  0.15403311079233228 \n","\n","Lag Order = 5\n","AIC :  0.12188568836851227\n","BIC :  0.26211177544241326\n","FPE :  1.1296303818912474\n","HQIC:  0.17602763086762047 \n","\n","Lag Order = 6\n","AIC :  0.13111281302448977\n","BIC :  0.29701514476171453\n","FPE :  1.1401054541183973\n","HQIC:  0.19517261478159104 \n","\n","Lag Order = 7\n","AIC :  0.12735264636741694\n","BIC :  0.3189872902344831\n","FPE :  1.135831417406499\n","HQIC:  0.201353246047654 \n","\n","Lag Order = 8\n","AIC :  0.13738890336779486\n","BIC :  0.35481212917422317\n","FPE :  1.1472948082931747\n","HQIC:  0.22135332434333024 \n","\n","Lag Order = 9\n","AIC :  0.1457865377392798\n","BIC :  0.3890548186481092\n","FPE :  1.1569782776916455\n","HQIC:  0.2397378885169728 \n","\n","Lag Order = 10\n","AIC :  0.15287767691809853\n","BIC :  0.42204769046283963\n","FPE :  1.1652221566023406\n","HQIC:  0.25683915156991927 \n","\n","Lag Order = 11\n","AIC :  0.1538165644052092\n","BIC :  0.4489451935132863\n","FPE :  1.1663293828991097\n","HQIC:  0.267811443001411 \n","\n","Lag Order = 12\n","AIC :  0.16201709565943706\n","BIC :  0.48316142968216846\n","FPE :  1.175948553593733\n","HQIC:  0.2860687447045087 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    1.28           0.00\n","2019-12-24    1.05           0.43\n","2019-12-25    0.00           0.00\n","2019-12-26   -0.61           1.34\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610971717433,"user_tz":-330,"elapsed":1610,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"bc4d1e29-1cf4-48e4-8de5-21cd63609b1b"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.1534</td>  <td>    0.1662</td>  <td>     1.166</td>  <td>    0.1584</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.1216</td>  <td>    0.1601*</td> <td>     1.129</td>  <td>    0.1365*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.1294</td>  <td>    0.1936</td>  <td>     1.138</td>  <td>    0.1542</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.1313</td>  <td>    0.2212</td>  <td>     1.140</td>  <td>    0.1660</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.1177*</td> <td>    0.2333</td>  <td>     1.125*</td> <td>    0.1623</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.1277</td>  <td>    0.2690</td>  <td>     1.136</td>  <td>    0.1823</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.1351</td>  <td>    0.3021</td>  <td>     1.145</td>  <td>    0.1996</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.1298</td>  <td>    0.3225</td>  <td>     1.139</td>  <td>    0.2042</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.1380</td>  <td>    0.3564</td>  <td>     1.148</td>  <td>    0.2224</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.1455</td>  <td>    0.3895</td>  <td>     1.157</td>  <td>    0.2397</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.1527</td>  <td>    0.4224</td>  <td>     1.165</td>  <td>    0.2569</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.1550</td>  <td>    0.4504</td>  <td>     1.168</td>  <td>    0.2691</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.1620</td>  <td>    0.4832</td>  <td>     1.176</td>  <td>    0.2861</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610971729477,"user_tz":-330,"elapsed":2529,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"38d6ed9d-e2c3-4e58-e080-f19ae5b7889b"},"source":["model_fitted = model.fit(4)\r\n","model_fitted.summary()"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Mon, 18, Jan, 2021\n","Time:                     12:08:44\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.224392\n","Nobs:                     719.000    HQIC:                  0.154033\n","Log likelihood:          -2061.90    FPE:                    1.11604\n","AIC:                     0.109786    Det(Omega_mle):         1.08862\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                   -0.055798         0.077636           -0.719           0.472\n","L1.return               -0.100410         0.037259           -2.695           0.007\n","L1.negative tone        -0.051129         0.045852           -1.115           0.265\n","L2.return               -0.013549         0.037447           -0.362           0.717\n","L2.negative tone        -0.012752         0.046296           -0.275           0.783\n","L3.return               -0.012354         0.037505           -0.329           0.742\n","L3.negative tone        -0.036046         0.046255           -0.779           0.436\n","L4.return                0.045485         0.037346            1.218           0.223\n","L4.negative tone         0.141880         0.045793            3.098           0.002\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.654684         0.063238           10.353           0.000\n","L1.return                0.025155         0.030349            0.829           0.407\n","L1.negative tone         0.154602         0.037348            4.139           0.000\n","L2.return                0.051164         0.030502            1.677           0.093\n","L2.negative tone         0.002738         0.037710            0.073           0.942\n","L3.return                0.050871         0.030549            1.665           0.096\n","L3.negative tone         0.074570         0.037676            1.979           0.048\n","L4.return                0.079907         0.030420            2.627           0.009\n","L4.negative tone        -0.009561         0.037300           -0.256           0.798\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000       0.022358\n","negative tone    0.022358       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971737724,"user_tz":-330,"elapsed":3331,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"120b4b37-8e35-43c4-ab10-78d5c68299df"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":13,"outputs":[{"output_type":"stream","text":["return : 1.99\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610971748059,"user_tz":-330,"elapsed":1696,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e59469cf-f4c6-4cab-d731-55a07058eef1"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":14,"outputs":[{"output_type":"stream","text":["4\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[ 1.28,  0.  ],\n","       [ 1.05,  0.43],\n","       [ 0.  ,  0.  ],\n","       [-0.61,  1.34]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610971752182,"user_tz":-330,"elapsed":2674,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"3df93129-c68e-4db9-ca0b-320feb25db7e"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.033310</td>\n","      <td>1.034267</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.005389</td>\n","      <td>0.865995</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.153038</td>\n","      <td>0.858452</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.030210</td>\n","      <td>0.799523</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.005494</td>\n","      <td>0.825324</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.033310       1.034267\n","2019-12-28 -0.005389       0.865995\n","2019-12-29 -0.153038       0.858452\n","2019-12-30  0.030210       0.799523\n","2019-12-31  0.005494       0.825324"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610971760607,"user_tz":-330,"elapsed":2151,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c534c9e7-5a23-44eb-95b9-4df80515f1f0"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  0.1068\n","mae :  0.3915\n","mpe :  nan\n","rmse :  0.6112\n","corr :  -0.41\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.4067\n","mae :  0.4806\n","mpe :  inf\n","rmse :  0.5789\n","corr :  -0.0024\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}