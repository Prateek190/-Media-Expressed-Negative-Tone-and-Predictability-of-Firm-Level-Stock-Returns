{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_reddy","provenance":[{"file_id":"1pUiM9tW9TFJRP1OYgN70yjgjOqrHZXni","timestamp":1609621491864},{"file_id":"1Jrk01wRDu2zRJjdoaEhwD3uix_8qhLrA","timestamp":1609620869825},{"file_id":"1Ph7hHF7qdnMhnykYIFGrqCRof9ROi1tw","timestamp":1609620694974},{"file_id":"1_oyB9Egec5xpaQlpCBmPMYFTPeHcvTsr","timestamp":1609620348596},{"file_id":"1JyhHyr6VXUT9WRJpq47RknOPQCZ3MuV6","timestamp":1609619744263},{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609619203614},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1GyTEhpqznBiD-raPPyZLWOwlOKPxUtCO","authorship_tag":"ABX9TyNK/vdds7BGXX6w8Lx/3Ysm"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621835963,"user_tz":-330,"elapsed":2164,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"e80655b3-3ce0-45cf-dc41-dce57f25b76b"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609621840290,"user_tz":-330,"elapsed":3601,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"dd0430e7-8384-4b28-be7f-c89b994ed286"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_DRREDDY.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_reddy.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>0.21</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-2.91</td>\n","      <td>0.85</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>3.07</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>2.60</td>\n","      <td>1.19</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.37</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>1.65</td>\n","      <td>1.52</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.00\n","2018-01-02    0.21           0.00\n","2018-01-03   -2.91           0.85\n","2018-01-04    3.07           0.00\n","2018-01-05    2.60           1.19\n","...            ...            ...\n","2019-12-27    0.37           0.00\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30    1.65           1.52\n","2019-12-31    0.00           0.00\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609621902332,"user_tz":-330,"elapsed":58909,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"f9a6c47d-8e76-47ea-996a-bb95cf0b6187"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609621908024,"user_tz":-330,"elapsed":1757,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4496a057-cfb3-4fac-8ae9-81a8b134967f"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.1679</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.3684</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.1679\n","negative tone_y    0.3684           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vmAuQ_5Qzpdn"},"source":["# Results from Granger Casuality test can be read as : negative tone do not causes return and return also do not causes negative tone significantly.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621923041,"user_tz":-330,"elapsed":1628,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"607d1cea-632e-424a-dade-618f29d86175"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621930142,"user_tz":-330,"elapsed":4233,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"88b48d41-91d7-4382-d515-2aa8b3d806b4"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -27.609\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -13.1601\n"," No. Lags Chosen       = 2\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621934504,"user_tz":-330,"elapsed":1926,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4c082de9-2245-4b7a-92d6-a4217dcb54c6"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.8842119125601232\n","BIC :  0.9222896837974598\n","FPE :  2.421075851739206\n","HQIC:  0.8989101253554704 \n","\n","Lag Order = 2\n","AIC :  0.8872598603736344\n","BIC :  0.9507916098505408\n","FPE :  2.4284672695242437\n","HQIC:  0.9117850163776863 \n","\n","Lag Order = 3\n","AIC :  0.8892053408316171\n","BIC :  0.9782463366207024\n","FPE :  2.433198303371016\n","HQIC:  0.923580044104198 \n","\n","Lag Order = 4\n","AIC :  0.8962493413611456\n","BIC :  1.0108550498993638\n","FPE :  2.450401666562105\n","HQIC:  0.9404962789853447 \n","\n","Lag Order = 5\n","AIC :  0.9036191385876045\n","BIC :  1.0438452256615056\n","FPE :  2.468532720301956\n","HQIC:  0.9577610810867127 \n","\n","Lag Order = 6\n","AIC :  0.9046529870699409\n","BIC :  1.0705553188071657\n","FPE :  2.4710939214798344\n","HQIC:  0.9687127888270421 \n","\n","Lag Order = 7\n","AIC :  0.9119620981284552\n","BIC :  1.1035967419955215\n","FPE :  2.489232327859403\n","HQIC:  0.9859626978086923 \n","\n","Lag Order = 8\n","AIC :  0.917790234014232\n","BIC :  1.1352134598206605\n","FPE :  2.5037964532791492\n","HQIC:  1.0017546549897673 \n","\n","Lag Order = 9\n","AIC :  0.93045272621786\n","BIC :  1.1737210071266895\n","FPE :  2.5357206122396962\n","HQIC:  1.0244040769955531 \n","\n","Lag Order = 10\n","AIC :  0.9053663480284534\n","BIC :  1.1745363615731945\n","FPE :  2.4729219626789156\n","HQIC:  1.0093278226802742 \n","\n","Lag Order = 11\n","AIC :  0.9106898878147903\n","BIC :  1.2058185169228675\n","FPE :  2.486148836249918\n","HQIC:  1.0246847664109922 \n","\n","Lag Order = 12\n","AIC :  0.9062599608487633\n","BIC :  1.2274042948714947\n","FPE :  2.475191995038095\n","HQIC:  1.0303116098938347 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    0.62            0.0\n","2019-12-24   -2.90            0.0\n","2019-12-25    0.00            0.0\n","2019-12-26   -0.18            0.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609621937448,"user_tz":-330,"elapsed":1847,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"edebf1a3-bc35-4e2c-9f29-33c7716c034f"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.8679</td>  <td>    0.8807*</td> <td>     2.382</td>  <td>    0.8728</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.8551*</td> <td>    0.8936</td>  <td>     2.352*</td> <td>    0.8700*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.8572</td>  <td>    0.9214</td>  <td>     2.357</td>  <td>    0.8820</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.8624</td>  <td>    0.9524</td>  <td>     2.369</td>  <td>    0.8972</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.8732</td>  <td>    0.9888</td>  <td>     2.395</td>  <td>    0.9179</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.8843</td>  <td>     1.026</td>  <td>     2.421</td>  <td>    0.9389</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.8814</td>  <td>     1.048</td>  <td>     2.414</td>  <td>    0.9459</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.8877</td>  <td>     1.080</td>  <td>     2.429</td>  <td>    0.9621</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.8911</td>  <td>     1.109</td>  <td>     2.438</td>  <td>    0.9754</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.9018</td>  <td>     1.146</td>  <td>     2.464</td>  <td>    0.9961</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.9043</td>  <td>     1.174</td>  <td>     2.470</td>  <td>     1.008</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.9075</td>  <td>     1.203</td>  <td>     2.478</td>  <td>     1.022</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.9063</td>  <td>     1.227</td>  <td>     2.475</td>  <td>     1.030</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609621943957,"user_tz":-330,"elapsed":1549,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"48660b01-ad3e-4a85-9f72-ac92f1ab4e57"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     21:12:24\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.922290\n","Nobs:                     722.000    HQIC:                  0.898910\n","Log likelihood:          -2362.15    FPE:                    2.42108\n","AIC:                     0.884212    Det(Omega_mle):         2.40108\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.053430         0.057960            0.922           0.357\n","L1.return               -0.029894         0.037321           -0.801           0.423\n","L1.negative tone        -0.031734         0.046368           -0.684           0.494\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.472643         0.046186           10.233           0.000\n","L1.return                0.027538         0.029739            0.926           0.354\n","L1.negative tone         0.143509         0.036949            3.884           0.000\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.049663\n","negative tone   -0.049663       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621947675,"user_tz":-330,"elapsed":1370,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"72ed7b89-55a8-4861-e197-1d6b47017c3d"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.03\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609621949904,"user_tz":-330,"elapsed":1435,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"493bc658-8de2-4894-fac6-1c348729a59c"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-0.18,  0.  ]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609621952127,"user_tz":-330,"elapsed":1491,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"ae4f65a7-f6be-4a91-a316-9280694f604c"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.058811</td>\n","      <td>0.467686</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.036831</td>\n","      <td>0.541379</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.035149</td>\n","      <td>0.551350</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.034883</td>\n","      <td>0.552734</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.034847</td>\n","      <td>0.552925</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.058811       0.467686\n","2019-12-28  0.036831       0.541379\n","2019-12-29  0.035149       0.551350\n","2019-12-30  0.034883       0.552734\n","2019-12-31  0.034847       0.552925"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609621956004,"user_tz":-330,"elapsed":1606,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6609168a-9486-4719-d150-a9c30873a35a"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.3639\n","mae :  0.4066\n","mpe :  inf\n","rmse :  0.7361\n","corr :  -0.0565\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.2292\n","mae :  0.6161\n","mpe :  inf\n","rmse :  0.6414\n","corr :  0.2954\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}