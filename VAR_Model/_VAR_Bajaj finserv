{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" VAR_Bajaj finserv","provenance":[{"file_id":"1Cmxk_B5XKAeMcgPV92CqKGNGoOLl-UN9","timestamp":1609618544885},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1609618130822},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1-gRda014ZuOZ_x24iZiwLuW3dVcz-P-f","authorship_tag":"ABX9TyOLXALPOgQAdtalROfjHf5y"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619189650,"user_tz":-330,"elapsed":3890,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"66dde13f-fd87-46d7-faa0-6e220195bec3"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1609619190492,"user_tz":-330,"elapsed":2465,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"bb16f991-bfdf-4181-ad1c-3a7dd363e137"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_BAJAJFINSV.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_finserv.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.35</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-1.37</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>-0.03</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>-0.72</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>1.28</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.79</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.77</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.01</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.35\n","2018-01-02   -1.37           0.00\n","2018-01-03   -0.03           0.00\n","2018-01-04   -0.72           0.00\n","2018-01-05    1.28           0.00\n","...            ...            ...\n","2019-12-27    0.79           0.00\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.77\n","2019-12-30    0.01           0.00\n","2019-12-31    0.00           0.00\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1609619253591,"user_tz":-330,"elapsed":59219,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"82ca6e5b-e75d-4f02-ab7f-16f65a578f12"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1609619374853,"user_tz":-330,"elapsed":4372,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"0dc7d8f0-427d-43b2-91e3-ae72e3acb7d3"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.0793</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.0572</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.0793\n","negative tone_y    0.0572           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj"},"source":["# Results from Granger Casuality test can be read as :Both negative tone causes return and return causes negative tone at 10% significance.\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619429039,"user_tz":-330,"elapsed":999,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"dec7c4f8-cb57-4421-8748-0adaf4ec5728"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619434354,"user_tz":-330,"elapsed":1618,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"91107705-1efb-4390-e80a-0188ebeba85e"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -6.7571\n"," No. Lags Chosen       = 13\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -11.3461\n"," No. Lags Chosen       = 3\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619437673,"user_tz":-330,"elapsed":1326,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5d4140ed-8575-4c78-bb43-371e6034881f"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.3686849931453546\n","BIC :  0.4067627643826911\n","FPE :  1.4458322232124936\n","HQIC:  0.3833832059407018 \n","\n","Lag Order = 2\n","AIC :  0.37717272205707175\n","BIC :  0.4407044715339781\n","FPE :  1.458156791775368\n","HQIC:  0.4016978780611236 \n","\n","Lag Order = 3\n","AIC :  0.37669094857789076\n","BIC :  0.46573194436697607\n","FPE :  1.4574555974796692\n","HQIC:  0.4110656518504717 \n","\n","Lag Order = 4\n","AIC :  0.37360519705761386\n","BIC :  0.488210905595832\n","FPE :  1.452967202909662\n","HQIC:  0.4178521346818129 \n","\n","Lag Order = 5\n","AIC :  0.37680728009343595\n","BIC :  0.5170333671673369\n","FPE :  1.4576303588397364\n","HQIC:  0.4309492225925441 \n","\n","Lag Order = 6\n","AIC :  0.3831468735524628\n","BIC :  0.5490492052896876\n","FPE :  1.4669051220676246\n","HQIC:  0.4472066753095641 \n","\n","Lag Order = 7\n","AIC :  0.39110626844434854\n","BIC :  0.5827409123114147\n","FPE :  1.478633767251099\n","HQIC:  0.46510686812458557 \n","\n","Lag Order = 8\n","AIC :  0.39522419762286093\n","BIC :  0.6126474234292892\n","FPE :  1.4847436408323544\n","HQIC:  0.47918861859839634 \n","\n","Lag Order = 9\n","AIC :  0.40461679570033254\n","BIC :  0.647885076609162\n","FPE :  1.4987657428832173\n","HQIC:  0.4985681464780255 \n","\n","Lag Order = 10\n","AIC :  0.41546411015650553\n","BIC :  0.6846341237012467\n","FPE :  1.515125379736703\n","HQIC:  0.5194255848083262 \n","\n","Lag Order = 11\n","AIC :  0.42238508245368767\n","BIC :  0.7175137115617648\n","FPE :  1.5256645043447703\n","HQIC:  0.5363799610498895 \n","\n","Lag Order = 12\n","AIC :  0.4271295191789749\n","BIC :  0.7482738532017064\n","FPE :  1.5329400995099798\n","HQIC:  0.5511811682240465 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    0.99            0.0\n","2019-12-24    0.45            0.0\n","2019-12-25    0.00            0.0\n","2019-12-26    0.84            0.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1609619442407,"user_tz":-330,"elapsed":1654,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b6ea4fde-02b1-4830-ef9a-38229d092e31"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.4022</td>  <td>    0.4150*</td> <td>     1.495</td>  <td>    0.4072</td> \n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.3849*</td> <td>    0.4234</td>  <td>     1.469*</td> <td>    0.3998*</td>\n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.3922</td>  <td>    0.4564</td>  <td>     1.480</td>  <td>    0.4170</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.3898</td>  <td>    0.4797</td>  <td>     1.477</td>  <td>    0.4245</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.3851</td>  <td>    0.5007</td>  <td>     1.470</td>  <td>    0.4298</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.3865</td>  <td>    0.5278</td>  <td>     1.472</td>  <td>    0.4411</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.3901</td>  <td>    0.5571</td>  <td>     1.477</td>  <td>    0.4546</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.3955</td>  <td>    0.5882</td>  <td>     1.485</td>  <td>    0.4700</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.3987</td>  <td>    0.6171</td>  <td>     1.490</td>  <td>    0.4831</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.4070</td>  <td>    0.6510</td>  <td>     1.502</td>  <td>    0.5013</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.4156</td>  <td>    0.6854</td>  <td>     1.515</td>  <td>    0.5198</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.4216</td>  <td>    0.7171</td>  <td>     1.524</td>  <td>    0.5357</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.4271</td>  <td>    0.7483</td>  <td>     1.533</td>  <td>    0.5512</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1609619449454,"user_tz":-330,"elapsed":1477,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"5f1d21d0-0a8b-4980-d39b-906dd27e4d8b"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Sat, 02, Jan, 2021\n","Time:                     20:30:49\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.406763\n","Nobs:                     722.000    HQIC:                  0.383383\n","Log likelihood:          -2176.04    FPE:                    1.44583\n","AIC:                     0.368685    Det(Omega_mle):         1.43389\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.055714         0.066684            0.835           0.403\n","L1.return               -0.122410         0.037034           -3.305           0.001\n","L1.negative tone         0.103163         0.074957            1.376           0.169\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.403556         0.033048           12.211           0.000\n","L1.return                0.032360         0.018354            1.763           0.078\n","L1.negative tone         0.078358         0.037148            2.109           0.035\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000       0.057567\n","negative tone    0.057567       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619454247,"user_tz":-330,"elapsed":1493,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9cabf285-23c1-47af-c8dc-3f29f2155880"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 1.99\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609619456504,"user_tz":-330,"elapsed":940,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"96dfb7fb-6a99-4be3-f59f-61df4c7450cd"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[0.84, 0.  ]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1609619458977,"user_tz":-330,"elapsed":1159,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"44471cb1-1f98-4055-b49a-a8925029413b"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.047110</td>\n","      <td>0.430738</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.105917</td>\n","      <td>0.435783</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.087706</td>\n","      <td>0.441131</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.090487</td>\n","      <td>0.440960</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.090129</td>\n","      <td>0.441037</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.047110       0.430738\n","2019-12-28  0.105917       0.435783\n","2019-12-29  0.087706       0.441131\n","2019-12-30  0.090487       0.440960\n","2019-12-31  0.090129       0.441037"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1609619462428,"user_tz":-330,"elapsed":1337,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"400c6fa8-d02b-4398-b955-9b1b3f093d99"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.0946\n","mae :  0.2403\n","mpe :  inf\n","rmse :  0.3832\n","corr :  -0.9938\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.2839\n","mae :  0.4155\n","mpe :  inf\n","rmse :  0.4177\n","corr :  0.3872\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}