{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_Hero motocorp","provenance":[{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610553094111},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1eY9aoM0ADEHBdI6o22l00b9kZbBCCRqI","authorship_tag":"ABX9TyNoamda01uQGm/wYGZ6v4xd"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553470149,"user_tz":-330,"elapsed":2536,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"00e3d344-7a14-47d1-a8e7-9c0eaf5069c9"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610553504005,"user_tz":-330,"elapsed":3604,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"01f2fd6a-6970-4ba2-c03e-9797e2daea1c"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_HEROMOTOCO.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_hero moto.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>1.11</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.14</td>\n","      <td>2.38</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>0.30</td>\n","      <td>0.30</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>-0.43</td>\n","      <td>0.47</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.15</td>\n","      <td>1.39</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.15</td>\n","      <td>0.87</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.30</td>\n","      <td>0.54</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>1.81</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           1.11\n","2018-01-02   -0.14           2.38\n","2018-01-03    0.30           0.30\n","2018-01-04   -0.43           0.47\n","2018-01-05    0.15           1.39\n","...            ...            ...\n","2019-12-27   -0.15           0.87\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           0.00\n","2019-12-30    0.30           0.54\n","2019-12-31    0.00           1.81\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610553569269,"user_tz":-330,"elapsed":63664,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"7559f7c0-15c4-48e3-b774-8cd1a77e150c"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610553614827,"user_tz":-330,"elapsed":1381,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"c67d4a63-2047-432a-dd06-ef4b6f3eb550"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.0000</td>\n","      <td>0.1553</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.3534</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y           1.0000           0.1553\n","negative tone_y    0.3534           1.0000"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"gaNZFZYmb-DQ","executionInfo":{"status":"ok","timestamp":1610974182999,"user_tz":-330,"elapsed":2370,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}}},"source":["# Results from Granger Casuality test can be read as : Both negative tone do not causes return and return do not causes negative tone significantly.\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553631114,"user_tz":-330,"elapsed":1334,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"920c7f75-747f-43d5-cefa-89117b845dd5"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553635363,"user_tz":-330,"elapsed":1484,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"aa9a2f2a-89e8-4167-f564-a2c9f136855a"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -15.3088\n"," No. Lags Chosen       = 3\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -7.8262\n"," No. Lags Chosen       = 6\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553638482,"user_tz":-330,"elapsed":1641,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"75032c1c-a234-41f5-a796-48d6dd958a0e"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  0.43378510749627164\n","BIC :  0.4718628787336081\n","FPE :  1.543087382205516\n","HQIC:  0.44848332029161886 \n","\n","Lag Order = 2\n","AIC :  0.4400392137185624\n","BIC :  0.5035709631954688\n","FPE :  1.5527687976266595\n","HQIC:  0.4645643697226143 \n","\n","Lag Order = 3\n","AIC :  0.4421201932695622\n","BIC :  0.5311611890586475\n","FPE :  1.5560046569016726\n","HQIC:  0.47649489654214316 \n","\n","Lag Order = 4\n","AIC :  0.44943442962630886\n","BIC :  0.564040138164527\n","FPE :  1.5674295446448154\n","HQIC:  0.49368136725050793 \n","\n","Lag Order = 5\n","AIC :  0.45906285206812797\n","BIC :  0.599288939142029\n","FPE :  1.5825977575396666\n","HQIC:  0.5132047945672361 \n","\n","Lag Order = 6\n","AIC :  0.4517141082194336\n","BIC :  0.6176164399566584\n","FPE :  1.5710152351013418\n","HQIC:  0.5157739099765348 \n","\n","Lag Order = 7\n","AIC :  0.45471831294296483\n","BIC :  0.646352956810031\n","FPE :  1.5757487808122765\n","HQIC:  0.5287189126232019 \n","\n","Lag Order = 8\n","AIC :  0.4640085362277665\n","BIC :  0.6814317620341948\n","FPE :  1.5904650591882235\n","HQIC:  0.5479729572033019 \n","\n","Lag Order = 9\n","AIC :  0.46387062237184995\n","BIC :  0.7071389032806794\n","FPE :  1.5902571901852949\n","HQIC:  0.557821973149543 \n","\n","Lag Order = 10\n","AIC :  0.4679284072272727\n","BIC :  0.7370984207720138\n","FPE :  1.5967375103507004\n","HQIC:  0.5718898818790934 \n","\n","Lag Order = 11\n","AIC :  0.47170090186761326\n","BIC :  0.7668295309756904\n","FPE :  1.6027900231460828\n","HQIC:  0.5856957804638151 \n","\n","Lag Order = 12\n","AIC :  0.475626996121403\n","BIC :  0.7967713301441345\n","FPE :  1.609116067835814\n","HQIC:  0.5996786451664746 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    1.64           0.32\n","2019-12-24    0.18           0.61\n","2019-12-25    0.00           0.00\n","2019-12-26   -1.27           0.26\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610553640725,"user_tz":-330,"elapsed":1597,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"8e3fe305-b6b1-4699-b98c-3f2dce57bbce"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td>    0.4519</td>  <td>    0.4648*</td> <td>     1.571</td>  <td>    0.4569*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>    0.4475*</td> <td>    0.4860</td>  <td>     1.564*</td> <td>    0.4623</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>    0.4560</td>  <td>    0.5202</td>  <td>     1.578</td>  <td>    0.4808</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>    0.4566</td>  <td>    0.5465</td>  <td>     1.579</td>  <td>    0.4913</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>    0.4616</td>  <td>    0.5772</td>  <td>     1.587</td>  <td>    0.5062</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>    0.4693</td>  <td>    0.6106</td>  <td>     1.599</td>  <td>    0.5239</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td>    0.4603</td>  <td>    0.6273</td>  <td>     1.585</td>  <td>    0.5249</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>    0.4621</td>  <td>    0.6548</td>  <td>     1.587</td>  <td>    0.5365</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>    0.4719</td>  <td>    0.6903</td>  <td>     1.603</td>  <td>    0.5563</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>    0.4703</td>  <td>    0.7144</td>  <td>     1.601</td>  <td>    0.5646</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>    0.4720</td>  <td>    0.7418</td>  <td>     1.603</td>  <td>    0.5762</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>    0.4737</td>  <td>    0.7692</td>  <td>     1.606</td>  <td>    0.5879</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>    0.4756</td>  <td>    0.7968</td>  <td>     1.609</td>  <td>    0.5997</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610553648048,"user_tz":-330,"elapsed":1542,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"821f004e-1581-4c5a-a936-665526dd84f6"},"source":["model_fitted = model.fit(1)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Wed, 13, Jan, 2021\n","Time:                     16:00:45\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.471863\n","Nobs:                     722.000    HQIC:                  0.448483\n","Log likelihood:          -2199.54    FPE:                    1.54309\n","AIC:                     0.433785    Det(Omega_mle):         1.53034\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                   -0.025624         0.073835           -0.347           0.729\n","L1.return                0.001158         0.037514            0.031           0.975\n","L1.negative tone        -0.029211         0.066443           -0.440           0.660\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.644549         0.041358           15.584           0.000\n","L1.return                0.014694         0.021013            0.699           0.484\n","L1.negative tone         0.123476         0.037218            3.318           0.001\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.103308\n","negative tone   -0.103308       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553650371,"user_tz":-330,"elapsed":1597,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"0331ec3b-9119-4fea-bbfc-ccdc8f0334f4"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610553652818,"user_tz":-330,"elapsed":1687,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9da77099-9be5-4d51-9d7f-18faa3b0a78b"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[-1.27,  0.26]])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610553655642,"user_tz":-330,"elapsed":2290,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b5dd7f13-4026-4193-b872-cbd4e8e94aa2"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>-0.034690</td>\n","      <td>0.657991</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>-0.044885</td>\n","      <td>0.725285</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.046863</td>\n","      <td>0.733444</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.047104</td>\n","      <td>0.734423</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>-0.047132</td>\n","      <td>0.734540</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27 -0.034690       0.657991\n","2019-12-28 -0.044885       0.725285\n","2019-12-29 -0.046863       0.733444\n","2019-12-30 -0.047104       0.734423\n","2019-12-31 -0.047132       0.734540"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610553658937,"user_tz":-330,"elapsed":1424,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"9a5606ac-1002-4b4d-d6ea-f13434fb3d22"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.0741\n","mae :  0.1203\n","mpe :  -inf\n","rmse :  0.1675\n","corr :  -0.6547\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.0731\n","mae :  0.5881\n","mpe :  inf\n","rmse :  0.6787\n","corr :  -0.1063\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}