{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAR_LT","provenance":[{"file_id":"1h9SvZXO5XCLw7d-G_y9XQoMeAn0ybyhl","timestamp":1610970356024},{"file_id":"1EeY1p-dYepDJ6MGd0q4bcbNkA56iCUgl","timestamp":1610554880495},{"file_id":"1JTFTFR7lwoa55CppmwBCyC9ZFqAiXw8F","timestamp":1609616711671}],"collapsed_sections":[],"mount_file_id":"1AQJbaWSNM8kgLPJLQ7-i7jdX_y3HBwgf","authorship_tag":"ABX9TyMTfj1pse4iGaWL4LXxQRTE"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"aTt-bLhWqiVF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970605884,"user_tz":-330,"elapsed":3994,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6a5125de-db30-431b-b954-770bf961eb9e"},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller\n","from statsmodels.tools.eval_measures import rmse,aic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a5PP2bF1rhX1","colab":{"base_uri":"https://localhost:8080/","height":436},"executionInfo":{"status":"ok","timestamp":1610970611752,"user_tz":-330,"elapsed":4982,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"6b4327ef-ee8b-4b97-df71-938c0d22ec02"},"source":["\n","r=pd.read_csv(\"/content/drive/My Drive/stock/final_LT.NS.csv\")\n","nt=pd.read_csv(\"/content/drive/My Drive/tone/pct730/pct730_larsen.csv\")\n","df=pd.DataFrame()\n","df['return']=r['return']\n","df['negative tone']=nt['PCT']\n","df['Date']=r['Date']\n","df.set_index('Date',inplace=True)\n","df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]\n","df.replace([np.inf, -np.inf], np.nan)\n","\n","df.dropna(inplace=True)\n","df\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-01-01</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>-0.87</td>\n","      <td>1.18</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>2.04</td>\n","      <td>1.07</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>3.17</td>\n","      <td>1.13</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>-0.06</td>\n","      <td>0.80</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>1.15</td>\n","      <td>0.84</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>0.00</td>\n","      <td>1.09</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>0.11</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.00</td>\n","      <td>1.08</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>728 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["            return  negative tone\n","Date                             \n","2018-01-01    0.00           0.00\n","2018-01-02   -0.87           1.18\n","2018-01-03    2.04           1.07\n","2018-01-04    3.17           1.13\n","2018-01-05   -0.06           0.80\n","...            ...            ...\n","2019-12-27    1.15           0.84\n","2019-12-28    0.00           0.00\n","2019-12-29    0.00           1.09\n","2019-12-30    0.11           0.00\n","2019-12-31    0.00           1.08\n","\n","[728 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"oalP4NKkAMMu","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1610970679106,"user_tz":-330,"elapsed":59730,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"deb21c90-702a-4e9c-d0f7-0d9c5b52c873"},"source":["fig, axes = plt.subplots(nrows=1, ncols=2, dpi=85, figsize=(10,6))\n","for i, ax in enumerate(axes.flatten()):\n","    data = df[df.columns[i]]\n","    ax.plot(data, color='red', linewidth=1)\n","    # Decorations\n","    ax.set_title(df.columns[i])\n","    ax.xaxis.set_ticks_position('none')\n","    ax.yaxis.set_ticks_position('none')\n","    ax.spines[\"top\"].set_alpha(0)\n","    ax.tick_params(labelsize=6)\n","\n","plt.tight_layout();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 850x510 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bJXLim6uAW7_","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1610970725324,"user_tz":-330,"elapsed":1705,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"8004dd4b-2873-4a84-dee2-5b61af654e8a"},"source":["from statsmodels.tsa.stattools import grangercausalitytests\n","maxlag=12\n","test = 'ssr_chi2test'\n","def grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):    \n","    \"\"\"Check Granger Causality of all possible combinations of the Time series.\n","    The rows are the response variable, columns are predictors. The values in the table \n","    are the P-Values. P-Values lesser than the significance level (0.05), implies \n","    the Null Hypothesis that the coefficients of the corresponding past values is \n","    zero, that is, the X does not cause Y can be rejected.\n","\n","    data      : pandas dataframe containing the time series variables\n","    variables : list containing names of the time series variables.\n","    \"\"\"\n","    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n","    for c in df.columns:\n","        for r in df.index:\n","            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n","            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n","            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n","            min_p_value = np.min(p_values)\n","            df.loc[r, c] = min_p_value\n","    df.columns = [var + '_x' for var in variables]\n","    df.index = [var + '_y' for var in variables]\n","    return df\n","\n","grangers_causation_matrix(df, variables = df.columns) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_x</th>\n","      <th>negative tone_x</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>return_y</th>\n","      <td>1.000</td>\n","      <td>0.0622</td>\n","    </tr>\n","    <tr>\n","      <th>negative tone_y</th>\n","      <td>0.016</td>\n","      <td>1.0000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 return_x  negative tone_x\n","return_y            1.000           0.0622\n","negative tone_y     0.016           1.0000"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"sw-oAStCMAgj"},"source":["# Results from Granger Casuality test can be read as : negative tone causes return (10% significance) and return causes negative tone (5% significance).\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4o50qsaedyyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970731398,"user_tz":-330,"elapsed":1948,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"567157e4-d2d1-4e02-bb8b-bd991eff1a8d"},"source":["t = 5\n","df_train, df_test = df[0:-t], df[-t:]\n","\n","# Check size\n","print(df_train.shape)  # (723, 2)\n","print(df_test.shape)  # (5, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(723, 2)\n","(5, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nIl2Hdo0hBuI"},"source":["def adfuller_test(series, signif=0.05, name='', verbose=False):\n","    \"\"\"Perform ADFuller to test for Stationarity of given series and print report\"\"\"\n","    r = adfuller(series, autolag='AIC')\n","    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n","    p_value = output['pvalue'] \n","    def adjust(val, length= 6): return str(val).ljust(length)\n","\n","    # Print Summary\n","    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n","    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n","    print(f' Significance Level    = {signif}')\n","    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n","    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n","\n","    for key,val in r[4].items():\n","        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n","\n","    if p_value <= signif:\n","        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n","        print(f\" => Series is Stationary.\")\n","    else:\n","        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n","        print(f\" => Series is Non-Stationary.\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k1WENsT3wLnE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970736295,"user_tz":-330,"elapsed":1628,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"4d7e9d54-fe6d-4873-b1a7-d4d494f3bab6"},"source":["# ADF Test on each column\n","for name, column in df_train.iteritems():\n","    adfuller_test(column, name=column.name)\n","    print('\\n')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["    Augmented Dickey-Fuller Test on \"return\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -28.2619\n"," No. Lags Chosen       = 0\n"," Critical value 1%     = -3.439\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n","    Augmented Dickey-Fuller Test on \"negative tone\" \n","    -----------------------------------------------\n"," Null Hypothesis: Data has unit root. Non-Stationary.\n"," Significance Level    = 0.05\n"," Test Statistic        = -9.0981\n"," No. Lags Chosen       = 5\n"," Critical value 1%     = -3.44\n"," Critical value 5%     = -2.866\n"," Critical value 10%    = -2.569\n"," => P-Value = 0.0. Rejecting Null Hypothesis.\n"," => Series is Stationary.\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g75LrN35wPvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970739448,"user_tz":-330,"elapsed":2501,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"929fe012-33c8-4e8c-bdae-6bed83aee865"},"source":["model = VAR(df_train)\r\n","for i in [1,2,3,4,5,6,7,8,9,10,11,12]:\r\n","    result = model.fit(i)\r\n","    print('Lag Order =', i)\r\n","    print('AIC : ', result.aic)\r\n","    print('BIC : ', result.bic)\r\n","    print('FPE : ', result.fpe)\r\n","    print('HQIC: ', result.hqic, '\\n')\r\n","print(df_train[-4:])   "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Lag Order = 1\n","AIC :  -0.0038454107229960524\n","BIC :  0.03423236051434045\n","FPE :  0.9961620686859757\n","HQIC:  0.010852802072351161 \n","\n","Lag Order = 2\n","AIC :  -5.489183058908498e-05\n","BIC :  0.06347685764631729\n","FPE :  0.9999455543397086\n","HQIC:  0.024470264173462777 \n","\n","Lag Order = 3\n","AIC :  -0.00038735187910135527\n","BIC :  0.08865364390998395\n","FPE :  0.9996139480077109\n","HQIC:  0.033987351393479553 \n","\n","Lag Order = 4\n","AIC :  -0.005678611705081341\n","BIC :  0.10892709683313681\n","FPE :  0.9943400816219902\n","HQIC:  0.03856832591911774 \n","\n","Lag Order = 5\n","AIC :  -0.00698164713557755\n","BIC :  0.13324443993832347\n","FPE :  0.993047429770041\n","HQIC:  0.04716029536353064 \n","\n","Lag Order = 6\n","AIC :  -0.012333894786376892\n","BIC :  0.15356843695084785\n","FPE :  0.9877497072512991\n","HQIC:  0.05172590697072438 \n","\n","Lag Order = 7\n","AIC :  -0.0005499166237797476\n","BIC :  0.1910847272432864\n","FPE :  0.9994624906349775\n","HQIC:  0.07345068305645733 \n","\n","Lag Order = 8\n","AIC :  0.0055886709328655665\n","BIC :  0.2230118967392939\n","FPE :  1.0056223446118135\n","HQIC:  0.08955309190840097 \n","\n","Lag Order = 9\n","AIC :  0.017867172245989812\n","BIC :  0.26113545315481923\n","FPE :  1.018053334142784\n","HQIC:  0.11181852302368281 \n","\n","Lag Order = 10\n","AIC :  0.024905480312654937\n","BIC :  0.29407549385739606\n","FPE :  1.0252531570625534\n","HQIC:  0.12886695496447567 \n","\n","Lag Order = 11\n","AIC :  0.03254251026494703\n","BIC :  0.32767113937302417\n","FPE :  1.0331242705355772\n","HQIC:  0.1465373888611489 \n","\n","Lag Order = 12\n","AIC :  0.041419656553411316\n","BIC :  0.36256399057614275\n","FPE :  1.0423498780691047\n","HQIC:  0.16547130559848294 \n","\n","            return  negative tone\n","Date                             \n","2019-12-23    1.22           0.33\n","2019-12-24    2.00           1.83\n","2019-12-25    0.00           1.38\n","2019-12-26   -0.18           0.80\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tsa/base/tsa_model.py:219: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  ' ignored when e.g. forecasting.', ValueWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O9yZVJin1LTq","executionInfo":{"status":"ok","timestamp":1610970745526,"user_tz":-330,"elapsed":1913,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"3ccdf5c0-ce20-49f2-a8cd-3d7236c2b04d"},"source":["x = model.select_order(maxlags=12)\r\n","x.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>VAR Order Selection (* highlights the minimums)</caption>\n","<tr>\n","   <td></td>      <th>AIC</th>         <th>BIC</th>         <th>FPE</th>        <th>HQIC</th>    \n","</tr>\n","<tr>\n","  <th>0</th>  <td> -0.002317*</td> <td>   0.01053*</td> <td>    0.9977*</td> <td>  0.002645*</td>\n","</tr>\n","<tr>\n","  <th>1</th>  <td>  0.002142</td>  <td>   0.04068</td>  <td>     1.002</td>  <td>   0.01703</td> \n","</tr>\n","<tr>\n","  <th>2</th>  <td>  0.005056</td>  <td>   0.06928</td>  <td>     1.005</td>  <td>   0.02987</td> \n","</tr>\n","<tr>\n","  <th>3</th>  <td>  0.004188</td>  <td>   0.09411</td>  <td>     1.004</td>  <td>   0.03892</td> \n","</tr>\n","<tr>\n","  <th>4</th>  <td>  0.006142</td>  <td>    0.1218</td>  <td>     1.006</td>  <td>   0.05080</td> \n","</tr>\n","<tr>\n","  <th>5</th>  <td>  0.001897</td>  <td>    0.1432</td>  <td>     1.002</td>  <td>   0.05648</td> \n","</tr>\n","<tr>\n","  <th>6</th>  <td> -0.002220</td>  <td>    0.1648</td>  <td>    0.9978</td>  <td>   0.06229</td> \n","</tr>\n","<tr>\n","  <th>7</th>  <td>  0.006286</td>  <td>    0.1990</td>  <td>     1.006</td>  <td>   0.08072</td> \n","</tr>\n","<tr>\n","  <th>8</th>  <td>   0.01312</td>  <td>    0.2315</td>  <td>     1.013</td>  <td>   0.09747</td> \n","</tr>\n","<tr>\n","  <th>9</th>  <td>   0.02290</td>  <td>    0.2670</td>  <td>     1.023</td>  <td>    0.1172</td> \n","</tr>\n","<tr>\n","  <th>10</th> <td>   0.02828</td>  <td>    0.2980</td>  <td>     1.029</td>  <td>    0.1325</td> \n","</tr>\n","<tr>\n","  <th>11</th> <td>   0.03534</td>  <td>    0.3308</td>  <td>     1.036</td>  <td>    0.1495</td> \n","</tr>\n","<tr>\n","  <th>12</th> <td>   0.04142</td>  <td>    0.3626</td>  <td>     1.042</td>  <td>    0.1655</td> \n","</tr>\n","</table>"],"text/plain":["<class 'statsmodels.iolib.table.SimpleTable'>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5SN_79o61nUA","executionInfo":{"status":"ok","timestamp":1610970802950,"user_tz":-330,"elapsed":1484,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"831f8783-e555-46db-980e-3483d9974ed8"},"source":["model_fitted = model.fit(6)\r\n","model_fitted.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Summary of Regression Results   \n","==================================\n","Model:                         VAR\n","Method:                        OLS\n","Date:           Mon, 18, Jan, 2021\n","Time:                     11:53:18\n","--------------------------------------------------------------------\n","No. of Equations:         2.00000    BIC:                   0.153568\n","Nobs:                     717.000    HQIC:                 0.0517259\n","Log likelihood:          -2004.34    FPE:                   0.987750\n","AIC:                   -0.0123339    Det(Omega_mle):        0.952883\n","--------------------------------------------------------------------\n","Results for equation return\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.297358         0.138432            2.148           0.032\n","L1.return               -0.058142         0.037724           -1.541           0.123\n","L1.negative tone        -0.031934         0.057042           -0.560           0.576\n","L2.return               -0.005561         0.037705           -0.147           0.883\n","L2.negative tone        -0.118109         0.056833           -2.078           0.038\n","L3.return                0.061359         0.037561            1.634           0.102\n","L3.negative tone        -0.015577         0.056909           -0.274           0.784\n","L4.return               -0.031254         0.037588           -0.831           0.406\n","L4.negative tone         0.000473         0.056764            0.008           0.993\n","L5.return                0.013612         0.037527            0.363           0.717\n","L5.negative tone        -0.123672         0.056941           -2.172           0.030\n","L6.return               -0.031333         0.037607           -0.833           0.405\n","L6.negative tone        -0.002459         0.057088           -0.043           0.966\n","===================================================================================\n","\n","Results for equation negative tone\n","===================================================================================\n","                      coefficient       std. error           t-stat            prob\n","-----------------------------------------------------------------------------------\n","const                    0.787402         0.090779            8.674           0.000\n","L1.return               -0.024689         0.024738           -0.998           0.318\n","L1.negative tone        -0.010667         0.037406           -0.285           0.776\n","L2.return                0.000395         0.024725            0.016           0.987\n","L2.negative tone         0.044363         0.037269            1.190           0.234\n","L3.return                0.052224         0.024631            2.120           0.034\n","L3.negative tone         0.034711         0.037319            0.930           0.352\n","L4.return               -0.014430         0.024649           -0.585           0.558\n","L4.negative tone         0.075855         0.037224            2.038           0.042\n","L5.return               -0.060874         0.024609           -2.474           0.013\n","L5.negative tone        -0.023735         0.037340           -0.636           0.525\n","L6.return               -0.049512         0.024661           -2.008           0.045\n","L6.negative tone         0.092702         0.037436            2.476           0.013\n","===================================================================================\n","\n","Correlation matrix of residuals\n","                   return  negative tone\n","return           1.000000      -0.056241\n","negative tone   -0.056241       1.000000\n","\n"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"oQt4xV7U22hI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970807227,"user_tz":-330,"elapsed":1452,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"44ffa87a-91e5-4d6e-c51e-add1cdec5abd"},"source":["from statsmodels.stats.stattools import durbin_watson\r\n","out = durbin_watson(model_fitted.resid)\r\n","\r\n","for col, val in zip(df.columns, out):\r\n","    print(col, ':', round(val, 2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["return : 2.0\n","negative tone : 1.99\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhMlrqfmlKyt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610970809826,"user_tz":-330,"elapsed":1823,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"abee2365-cfc2-4369-97a8-8de932c9f3d2"},"source":["# Get the lag order\r\n","lag_order = model_fitted.k_ar\r\n","print(lag_order)  #1\r\n","\r\n","# Input data for forecasting\r\n","forecast_input = df_train.values[-lag_order:]\r\n","forecast_input"],"execution_count":null,"outputs":[{"output_type":"stream","text":["6\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[ 0.  ,  0.  ],\n","       [ 0.  ,  0.  ],\n","       [ 1.22,  0.33],\n","       [ 2.  ,  1.83],\n","       [ 0.  ,  1.38],\n","       [-0.18,  0.8 ]])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"wr3s2ZcAcsJs","executionInfo":{"status":"ok","timestamp":1610970812341,"user_tz":-330,"elapsed":1546,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"aed0d96e-57e2-4f13-eed8-b3b0a5185b7d"},"source":["# Forecast\r\n","t=5\r\n","fc = model_fitted.forecast(y=forecast_input, steps=t)\r\n","\r\n","df_forecast = pd.DataFrame(fc, index=df.index[-t:], columns=df.columns)\r\n","df_forecast"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return</th>\n","      <th>negative tone</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.175524</td>\n","      <td>1.019931</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-28</th>\n","      <td>0.053753</td>\n","      <td>0.883366</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-29</th>\n","      <td>-0.116403</td>\n","      <td>0.750020</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-30</th>\n","      <td>-0.061405</td>\n","      <td>0.967201</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.061859</td>\n","      <td>1.040030</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              return  negative tone\n","Date                               \n","2019-12-27  0.175524       1.019931\n","2019-12-28  0.053753       0.883366\n","2019-12-29 -0.116403       0.750020\n","2019-12-30 -0.061405       0.967201\n","2019-12-31  0.061859       1.040030"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSVYaKuiAXud","executionInfo":{"status":"ok","timestamp":1610970814906,"user_tz":-330,"elapsed":1052,"user":{"displayName":"Prateek Jaiswal","photoUrl":"","userId":"02713205155461107256"}},"outputId":"b64e8533-994b-477f-d5a1-03315ce496a7"},"source":["from statsmodels.tsa.stattools import acf\r\n","def forecast_accuracy(forecast, actual):\r\n","    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE\r\n","    me = np.mean(forecast - actual)             # ME\r\n","    mae = np.mean(np.abs(forecast - actual))    # MAE\r\n","    mpe = np.mean((forecast - actual)/actual)   # MPE\r\n","    rmse = np.mean((forecast - actual)**2)**.5  # RMSE\r\n","    corr = np.corrcoef(forecast, actual)[0,1]   # corr\r\n","    \r\n","    return({'mape':mape, 'me':me, 'mae': mae, \r\n","            'mpe': mpe, 'rmse':rmse, 'corr':corr})\r\n","\r\n","print('Forecast Accuracy of: return')\r\n","accuracy_prod = forecast_accuracy(df_forecast['return'].values, df_test['return'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n","print('\\nForecast Accuracy of: negative tone')\r\n","accuracy_prod = forecast_accuracy(df_forecast['negative tone'].values, df_test['negative tone'])\r\n","for k, v in accuracy_prod.items():\r\n","    print(k, ': ', round(v,4))\r\n","\r\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Forecast Accuracy of: return\n","mape :  inf\n","me :  -0.2293\n","mae :  0.2756\n","mpe :  nan\n","rmse :  0.447\n","corr :  0.7223\n","\n","Forecast Accuracy of: negative tone\n","mape :  inf\n","me :  0.3301\n","mae :  0.4821\n","mpe :  inf\n","rmse :  0.6108\n","corr :  -0.0308\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZoCwfq-FOmZ"},"source":[""],"execution_count":null,"outputs":[]}]}